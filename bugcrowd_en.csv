name,description,resolution,exploitation,references
Cryptographic Weakness,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. The application uses broken, weak, or otherwise flawed cryptography which can allow an attacker to decrypt sensitive information, or otherwise compromise the confidentiality, integrity, or authenticity of data.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. Perform {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. Use only trustworthy cryptographic algorithms outlined within security standards and regulations.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html, https://owasp.org/Top10/A02_2021-Cryptographic_Failures/"
Cryptographic Weakness - Insecure Implementation,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. Insecure implementation of cryptography was identified which can allow an attacker to break the confidentiality and integrity of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the insecure implementation:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insecure Implementation - Improper Following Of Specification,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the implementation of cryptography improperly follows specifications, which can allow an attacker to break the confidentiality and integrity of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the improper following of specification:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. Use only well vetted cryptographic libraries.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insecure Implementation - Missing Cryptographic Step,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. Missing computational steps during the implementation of cryptography was identified which degrades security. This can allow an attacker to break the confidentiality and integrity of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the missing cryptographic step:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. Use only well vetted cryptographic libraries.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Side Channel Attack,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. A cryptographic weakness was identified which can allow an attacker to use a side-channel attack to break the confidentiality and integrity of requests sent to and from the endpoint by deriving the encryption key through various methods.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the side-channel attack:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Side Channel Attack - Emanations Attack,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. The application is vulnerable to a emanations attack as there are changes to the electromagnetic emanations across the physical system when it is performing different steps of cryptographic operations.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the power emanations attack:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. Best practices includes uniform use of the system's processor cycles, power usage, and features across all steps of cryptographic operations. This ensures that the outcomes of cryptographic steps have a uniform emanations profile.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Side Channel Attack - Padding Oracle Attack,"A cryptographic weakness was identified which can allow an attacker to use a padding oracle attack to derive the encryption key. This is due to the application revealing information during the decryption process about the validity of the padding data. This can allow an attacker to break the confidentiality of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the padding oracle attack:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. It is also best practice for applications to use nondescript error messages that do not vary between error types when decrypting user-supplied data.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Side Channel Attack - Power Analysis Attack,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. The application is vulnerable to a power analysis attack as there is uneven power consumption across the system when performing different steps of cryptographic operations.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the power analysis attack:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. Best practices includes separating the power consumption of a system from the state of cryptographic operations. This ensures that the outcomes of a cryptographic step (or multiple steps) are not observable through the power consumption of the system.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Side Channel Attack - Differential Fault Analysis,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. The application is vulnerable to a differential fault analysis attack as there are changes to the system's response to specially crafted fault conditions during specific steps of cryptographic operations.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. Best practices includes uniform exception handling and ensuring that the system reverts to a known uniform state when faults occur.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Side Channel Attack - Timing Attack,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. The application is vulnerable to a timing attack as the time it takes to complete a cryptographic operation directly relates to user-supplied data. This allows an attacker to use a timing attack to derive the encryption key.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the timing attack:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. This includes ensuring that the application's cryptographic mechanisms take the same amount of time to complete regardless of the user-supplied input.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Weak Hash,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. A weak hash was identified which can allow an attacker to break the confidentiality and integrity of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the weak hash:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. Ensure the use of only vetted and unbroken hashing algorithms.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Weak Hash - Use Of Predictable Salt,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. A predictable salt in the hashing mechanism was identified which can allow an attacker to use rainbow table attacks.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the predictable salt:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. Ensure the use of only vetted and unbroken hashing algorithms.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Weak Hash - Predictable Hash Collision,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. A predictable hash collision was identified where the same hash value is generated by a hashing algorithm for different plaintext inputs. This can allow an attacker to break the confidentiality and integrity of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the predictable hash collision:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. Ensure the use of only vetted and unbroken hashing algorithms.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Weak Hash - Lack Of Salt,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the hash does not have a salt which can allow an attacker to use rainbow table attacks.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the lack of salt:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. Ensure that a unique, randomly generated salt value is used prior to the computation of the hash.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Incomplete Cleanup Of Keying Material,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the application's cleanup of keying material is incomplete and it retains sensitive cryptographic data in memory longer than is necessary. This can allow an attacker to break the confidentiality of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. It is best practice for the application to retain sensitive cryptographic data within memory for longer than needed by the application.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insufficient Verification Of Data Authenticity,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the authenticity of the data used in the cryptographic processes is not verified which can lead to data corruption. Ths can allow an attacker to break the confidentiality and integrity of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the insufficient verification of data authenticity:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. Ensure that the application validates the authenticity of the data used across the cryptographic implementations.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insufficient Verification Of Data Authenticity - Cryptographic Signature,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the application fails to verify the cryptographic signature. Ths can allow an attacker to break the confidentiality and integrity of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the insufficient validation of the cryptographic signature:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. Ensure that the application validates the cryptographic signature and associated data, and denies requests that contain an invalid cryptographic signature.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insufficient Verification Of Data Authenticity - Identity Check Value,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the authenticity of the Integrity Check Value (ICV) is not verified which can lead to data corruption. Ths can allow an attacker to break the confidentiality and integrity of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the insufficient verification of the ICV:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. Ensure that the application validates the authenticity of the ICV data and follows best practices for ICV validation steps.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Use Of Expired Cryptographic Key Or Cert,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the application uses an expired cryptographic key or certificate which can allow an attacker to break the confidentiality of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. It is best practice for the application to verify that the certificate produced by an entity is not expired or revoked, and that it rejects attempts to use expired keys or certificates.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Key Reuse,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the application's cryptographic mechanism reuses keys. This can allow an attacker to leverage the key to gain access to information or privileges within the application that are protected by the same key.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the key reuse:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. Best practices include ensuring that the application does not reuse keys across different trust zones.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Key Reuse - Intra Environment,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the application's cryptographic mechanism reuses keys within the same environment (intra-environment). This can allow an attacker to leverage the key to gain access to information or privileges within the application that are protected by the same key.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the  intra-environment key reuse:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. Best practices include ensuring that the application does not reuse keys.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Key Reuse - Lack Of Perfect Forward Secrecy,"It was identified that the application's cryptographic mechanism lacks the use of Perfect Forward Secrecy (PFS). PFS involves the negotiation of an ephemeral key pair for each newly create session between two parties. Without PFS, an attacker would be able to compromise all past and future sessions based on a set of keys that they can decrypt. They can then leverage the keys to gain access to information or privileges within the application that are protected by the same key.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the lack of PFS:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. Best practices include ensuring that perfect forward secrecy is enabled for all implemented encryption protocols.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Key Reuse - Inter Environment,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the application's cryptographic mechanism reuses keys across different environment (inter-environment). This can allow an attacker to leverage the key to gain access to information or privileges within the application that are protected by the same key.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the inter-environment key reuse:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. Best practices include ensuring that the application does not reuse keys across different trust zones.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Broken Cryptography,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. The application uses broken, weak, or otherwise flawed cryptography which can allow an attacker to decrypt sensitive information.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. Use only trustworthy cryptographic algorithms outlined within security standards and regulations.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html, https://owasp.org/Top10/A02_2021-Cryptographic_Failures/"
Cryptographic Weakness - Broken Cryptography - Use Of Broken Cryptographic Primitive,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. The application uses a broken cryptographic primitive which can allow an attacker to decrypt sensitive information.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. Use only trustworthy cryptographic algorithms outlined within security standards and regulations.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html, https://owasp.org/Top10/A02_2021-Cryptographic_Failures/"
Cryptographic Weakness - Broken Cryptography - Use Of Vulnerable Cryptographic Library,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. The application uses a vulnerable cryptographic library which can allow an attacker to decrypt sensitive information.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. Use only trustworthy cryptographic algorithms outlined within security standards and regulations.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html, https://owasp.org/Top10/A02_2021-Cryptographic_Failures/"
Cryptographic Weakness - Insecure Key Generation,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the endpoint contains an insecure key generation mechanism which can allow an attacker to break the confidentiality of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the insecure key generation:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insecure Key Generation - Insufficient Key Space,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the endpoint contains an insecure key generation mechanism that has insufficient key space. This can allow an attacker to use brute-force techniques to identify keys and break the confidentiality of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the insufficient key space:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. Best practices include ensuring that the application specifies a large minimum key length, for example AES-128, RSA-2048, or SHA-256.",unclassified,"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/, https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf"
Cryptographic Weakness - Insecure Key Generation - Key Exchange Without Entity Authentication,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the endpoint contains an insecure key generation mechanism that involves key exchange without entity authentication. This can allow an attacker to break the confidentiality of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the key exchange without entity authentication:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. Ensure proper cryptographic key generation, management, and rotation principles are in use. It is also best practice to validate the identity of the opposite party during the key exchange process.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insecure Key Generation - Improper Asymmetric Exponent Selection,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the endpoint contains an insecure key generation mechanism that involves improper asymmetric exponent selection. This can allow an attacker to identify keys and break the confidentiality of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the improper asymmetric exponent selection:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. For asymmetric exponent selection, ensure that there is a sufficiently large number to be selected. It is also best practice to use uniquely generated random number for exponent.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insecure Key Generation - Insufficient Key Stretching,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the endpoint contains an insecure key generation mechanism that has insufficient key stretching. This can allow an attacker to identify keys and break the confidentiality of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the insufficient key stretching:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. Strong key stretching practices include ensuring that the application performs a large number of iterations to increase entropy.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insecure Key Generation - Improper Asymmetric Prime Selection,"Cryptography is used to ensure secure storage and transmission of data. However, there are a number of best practices that must be followed to ensure the cryptography in use remains secure and does not result in the exposure of sensitive data. It was identified that the endpoint contains an insecure key generation mechanism that involves improper asymmetric prime selection. This can allow an attacker to identify keys and break the confidentiality of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the improper asymmetric prime selection:

{{screenshot}}","Implement strong cryptography and keep up to date algorithms, protocols, and keys in place. For asymmetric prime number selection, ensure that there is a sufficient amount of prime numbers represented, and no mathematical relationship between each prime number selected. It is also best practice to use uniquely generated prime numbers for prime selection.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insufficient Entropy,"Cryptography is used to ensure secure storage and transmission of data. When insufficient entropy is used to generate cryptographic keys, it is possible to predict or guess the keys. Insufficient entropy of cryptographic algorithm generation was identified which can allow an attacker to break the confidentiality of requests sent to and from the endpoint.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the insufficient entropy:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. It is also best practice to use cryptographically strong random number generators so that the random numbers are not easily guessed.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insufficient Entropy - Limited Rng Entropy Source,"Cryptography is used to ensure secure storage and transmission of data. When insufficient entropy is used to generate cryptographic keys, it is possible to predict or guess the keys. Insufficient entropy of a Random Number Generator (RNG) was identified which can create predictable random numbers. This can allow an attacker to guess the session ID or cryptographic key and gain access to restricted data or functionality.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the insufficient entropy of the RNG:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. It is also best practice to use multiple sources of entropy to generate random numbers so that they are not easily guessed.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insufficient Entropy - Predictable Initialization Vector,"Cryptographic algorithms use an initial block of data (called an initialization vector) alongside the plaintext data that is encrypted. When this IV is predictable, an attacker can identify the IV from the original data within the encryption.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the predictability of the initialization vector:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. It is also best practice to use different initialization vectors for multiple invocations of encryption routines to ensure they aren't predictable.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insufficient Entropy - Prng Seed Reuse,"A Pseudo-Random Number Generator (PRNG) uses an initial seed value to generate random number through a complex algorithm. When this seed value is known, it is possible to determine the random numbers produce by the PRNG. An attacker with access to the seed value can predict or guess the random numbers which can lead to unauthorized access if that seed value is used for authorization and authentication.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the PRNG seed reuse:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. It is also best practice to not use the same seed value for multiple invocations of PRNG initialization.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insufficient Entropy - Initialization Vector Reuse,"Cryptographic algorithms use an initial block of data (called an initialization vector) alongside the plaintext data that is encrypted. When this IV is reused for multiple encryptions, an attacker can identify the IV from the original data within the encryption.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the initialization vector reuse:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. It is also best practice to use different initialization vectors for multiple invocations of encryption routines.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insufficient Entropy - Small Seed Space In Prng,"A Pseudo-Random Number Generator (PRNG) uses an initial seed value to generate random number through a complex algorithm. When this seed value is small in size, it is possible to bruteforce all possible seeed values. An attacker who can guess the seed value can predict or guess the random numbers generated by the PRNG. This can lead to unauthorized access if that seed value is used for authorization and authentication.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the small seed space in the PRNG:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. It is also best practice to ensure that the length of the PRNG seed is sufficiently large (in bit size) to render brute force attacks infeasible.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insufficient Entropy - Use Of Trng For Nonsecurity Purpose,"Most True Random Number Generators (TRNG) have a finite limit to their random number generation rate. Therefore, a TRNG should only be used when entropy is required for security purposes. When an application draws from a TRNG for a non-security purpose, it depletes the entropy of the source, increasing the likelihood that an attacker would be able to predict of guess number generated.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the True Random Number Generator being used for a non-security purpose:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. Only draw from TRNGs for security purposes when entropy is needed.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Cryptographic Weakness - Insufficient Entropy - Predictable Prng Seed,"A Pseudo-Random Number Generator (PRNG) uses an initial seed value to generate random number through a complex algorithm. When this seed value is predictable in full or in part, it is possible to determine the random numbers produce by the PRNG. The PRNG seed value is predictable, allowing an attacker to guess the random numbers  generated by the PRNG. This can lead to unauthorized access if that seed value is used for authorization and authentication.

**Business Impact**

This vulnerability can lead to reputational damage of the company through the impact to customers’ trust, and the ability of an attacker to view data. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Setup {{software}} to intercept and log requests
1. Use a browser to navigate to: {{URL}}
1. {{action}} to view unencrypted requests

**Proof of Concept (PoC)**

The screenshot below demonstrates the PRNG seed reuse:

{{screenshot}}","Implement robust entropy for the cryptographic algorithms and ensure that the algorithms, protocols, and keys in place are kept up to date. It is also best practice to use randomly generated seed values drawn from high entropy sources, such as the output of another PRNG.",unclassified,https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
Mobile Security Misconfiguration,"Mobile security misconfigurations can occur at any level of the application stack and can involve unpatched software, unprotected files or pages, or unauthorized access to the application. An attacker can take advantage of security misconfigurations within the mobile application to perform further attacks on the application, the business, or its users.

**Business Impact**

This vulnerability can lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Navigate to the following filesystem/page within the application: {{location}}
1. Observe through an HTTP interception proxy or in-application tools that there is a mobile security misconfiguration

**Proof of Concept (PoC)**

The screenshot below shows the mobile security misconfiguration:

{{screenshot}}","It is recommended that the mobile application’s security is managed through a repeatable configuration process which covers application hardening, updates, and patches. There should also be a verification process through the development and delivery cycles which tests the effectiveness of the configurations and settings.

For further information, please refer to:
<https://owasp.org/www-project-mobile-top-10/>",unclassified,
Mobile Security Misconfiguration - Ssl Certificate Pinning,"Mobile security misconfigurations can occur at any level of the application stack and can involve unpatched software, unprotected files or pages, or unauthorized access to the application. SSL pinning adds an extra layer of security for an application as it forces the application to validate the server’s CA certificate against a known copy.

When SSL certificate pinning is misconfigured, an attacker could perform a Person-in-the-Middle (PitM) attack on the user. With access to sensitive data through a PitM attack they could perform further attacks on the application, the business, or its users.

**Business Impact**

This vulnerability can lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Install the application on your mobile device
1. Route your mobile device's HTTP traffic through a proxy server and install/trust the proxy server's CA certificate
1. Execute the following payload:

{{payload}}

1. Open the application and observe that the HTTP traffic is routed through the proxy server, meaning the certificate pinning is misconfigured

**Proof of Concept (PoC)**

The screenshot below shows the mobile security misconfiguration:

{{screenshot}}","It is recommended to securely implement SSL certificate pinning for the application.

It is also recommended that the mobile application’s security is managed through a repeatable configuration process which covers application hardening, updates, and patches. There should be a verification process through the development and delivery cycles which tests the effectiveness of the configurations and settings.

For further information, please refer to:
<https://cheatsheetseries.owasp.org/cheatsheets/Pinning_Cheat_Sheet.html>",unclassified,
Mobile Security Misconfiguration - Ssl Certificate Pinning - Absent,"Mobile security misconfigurations can occur at any level of the application stack and can involve unpatched software, unprotected files or pages, or unauthorized access to the application. SSL pinning adds an extra layer of security for an application as it forces the application to validate the server’s CA certificate against a known copy.

Without SSL certificate pinning, an attacker could perform a Person-in-the-Middle (PitM) attack on the user. With access to sensitive data through a PitM attack they could perform further attacks on the application, the business, or its users.

**Business Impact**

This vulnerability can lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Install the application on your mobile device
1. Route your mobile device's HTTP traffic through a proxy server and install/trust the proxy server's CA certificate
1. Open the application and observe that the HTTP traffic is routed through the proxy server, meaning the application does not implement certificate pinning

**Proof of Concept (PoC)**

The screenshot below shows the mobile security misconfiguration:

{{screenshot}}","It is recommended to implement SSL certificate pinning for the application.

It is also recommended that the mobile application’s security is managed through a repeatable configuration process which covers application hardening, updates, and patches. There should be a verification process through the development and delivery cycles which tests the effectiveness of the configurations and settings.

For further information, please refer to:
<https://cheatsheetseries.owasp.org/cheatsheets/Pinning_Cheat_Sheet.html>",unclassified,
Mobile Security Misconfiguration - Ssl Certificate Pinning - Defeatable,"Mobile security misconfigurations can occur at any level of the application stack and can involve unpatched software, unprotected files or pages, or unauthorized access to the application. SSL pinning adds an extra layer of security for an application as it forces the application to validate the server’s CA certificate against a known copy.

When SSL certificate pinning is defeatable, an attacker could perform a Person-in-the-Middle (PitM) attack on the user. With access to sensitive data through a PitM attack they could perform further attacks on the application, the business, or its users.

**Business Impact**

This vulnerability can lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Install the application on your mobile device
1. Route your mobile device's HTTP traffic through a proxy server and install/trust the proxy server's CA certificate
1. Execute the following payload to defeat the certificate pinning:

{{payload}}

1. Open the application and observe that the HTTP traffic is routed through the proxy server, meaning the certificate pinning was defeated

**Proof of Concept (PoC)**

The screenshot below shows the mobile security misconfiguration:

{{screenshot}}","It is recommended to securely implement SSL certificate pinning for the application.

It is also recommended that the mobile application’s security is managed through a repeatable configuration process which covers application hardening, updates, and patches. There should be a verification process through the development and delivery cycles which tests the effectiveness of the configurations and settings.

For further information, please refer to:
<https://cheatsheetseries.owasp.org/cheatsheets/Pinning_Cheat_Sheet.html>",unclassified,
Mobile Security Misconfiguration - Auto Backup Allowed By Default,"Mobile security misconfigurations can occur at any level of the application stack and can involve unpatched software, unprotected files or pages, or unauthorized access to the application. When automatic backup is allowed by default, sensitive user data can be unknowingly stored on the mobile device.

An attacker could abuse an application that has auto backup allowed by default to access this sensitive data from the application once they have physical access to the device. This could allow the attacker to bypass any in-app authentication and access sensitive data which they could abuse to perform further attacks on the application, the business, or its users.

**Business Impact**

This vulnerability can lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Install the application on an android mobile device
1. In the mobile device, enable USB debugging
1. Use the android ADB tool to backup the data of the mobile device
1. In this backup, view that sensitive data from the application was included in the backup automatically

**Proof of Concept (PoC)**

The screenshot below shows the mobile security misconfiguration:

{{screenshot}}","It is recommended that the mobile application’s security is managed through a repeatable configuration process which covers application hardening, updates, and patches. There should also be a verification process through the development and delivery cycles which tests the effectiveness of the configurations and settings.

For further information, please refer to:
<https://owasp.org/www-project-mobile-top-10/>",unclassified,
Mobile Security Misconfiguration - Tapjacking,"Mobile security misconfigurations can occur at any level of the application stack and can involve unpatched software, unprotected files or pages, or unauthorized access to the application. Tapjacking occurs when user input is captured by an application it was not intended for. This usually occurs through screen overlays that gather input when a user believes they are inputting information into a different screen.

An attacker could abuse an application that does not protect sensitive UI functionality from tapjacking by stealing UI inputs from a user that uses the application on specific Android OS versions. With access to sensitive data through a tapjacking attack, an attacker could perform further attacks on the application, the business, or its users.

**Business Impact**

This vulnerability can lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. View the source code files of the application
1. Navigate to the following URL: {{URL}} and view the sensitive UI functionality does not have the attribute `""filterTouchesWhenObscured=""true""`, thus allowing tapjacking attacks on certain Android OS versions

**Proof of Concept (PoC)**

The screenshot below shows the mobile security misconfiguration:

{{screenshot}}","To prevent tapjacking for the application, ensure the attribute `""filterTouchesWhenObscured=""true""` is present.

It is also recommended that the mobile application’s security is managed through a repeatable configuration process which covers application hardening, updates, and patches. There should be a verification process through the development and delivery cycles which tests the effectiveness of the configurations and settings.",unclassified,
Mobile Security Misconfiguration - Clipboard Enabled,"Mobile security misconfigurations can occur at any level of the application stack and can involve unpatched software, unprotected files or pages, or unauthorized access to the application. When the system clipboard is enabled, sensitive user data, such as passwords, can be unknowingly stored on the mobile device.

An attacker could abuse the system clipboard being enabled to steal sensitive information that a user copied to their clipboard from within the application. With access to this sensitive data they could perform further attacks on the application, the business, or its users.

**Business Impact**

This vulnerability can lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Install the application on your mobile device
1. Navigate to the following URL: {{URL}} and copy some sensitive account information
1. Paste this data in some other area of your mobile device and observe that access to the clipboard was enabled in the application

**Proof of Concept (PoC)**

The screenshot below shows the mobile security misconfiguration:

{{screenshot}}","It is recommended that the mobile application’s security is managed through a repeatable configuration process which covers application hardening, updates, and patches. There should also be a verification process through the development and delivery cycles which tests the effectiveness of the configurations and settings.

For further information, please refer to:
<https://owasp.org/www-project-mobile-top-10/>",unclassified,
External Behavior,"Behavior  external from the application is leaking user sensitive information due to misconfiguration errors of system or browser features. A local attacker can take advantage of these external behavior errors to gather sensitive user information and impersonate a user or make requests on their behalf.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Use {{software}} to profile the external behavior that is showing sensitive user information

**Proof of Concept (PoC)**

The screenshots below demonstrate the misconfigured external behavior:

{{screenshot}}","It is important to thoroughly test the application for leakage of sensitive information across multiple devices, browsers, and environments within a well documented Software Development Lifecycle (SDLC).",unclassified,
External Behavior - Captcha Bypass,"A Computer Automated Public Turing Test test to tell Computers and Humans Apart (CAPTCHA) allows applications to tell whether a user is a human or a robot. A CAPTCHA can be bypassed when the implementation or its workflow is improperly configured, or when software can be used to bypass the challenge.

An attacker can bypass the CAPTCHA form and spam the website with queries for registration, login, as well as spam support teams with faulty requests.

**Business Impact**

CAPTCHA bypass can lead to reputational damage for the business due to a loss in confidence and trust by users. It can also result in indirect financial loss to the business through the extra workloads placed on internal teams to deal with spam from an attacker.

**Steps to Reproduce**

1. Navigate to the following endpoint with CAPTCHA: {{value}}
1. Use {{software}} to bypass CAPTCHA

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the CAPTCHA bypass:

{{screenshot}}",The configuration of CAPTCHAs should be thoroughly tested for design and implementation flaws to prevent an attacker bypassing the CAPTCHA.,unclassified,"https://cwe.mitre.org/data/definitions/804.html, https://owasp.org/www-project-automated-threats-to-web-applications/assets/oats/EN/OAT-009_CAPTCHA_Defeat"
External Behavior - Captcha Bypass - Crowdsourcing,"A Computer Automated Public Turing Test test to tell Computers and Humans Apart (CAPTCHA) allows applications to tell whether a user is a human or a robot. Powerful Optical Artificial Intelligence (OAI) enabled tools require a large amount of data to create models to break implementations of CAPTCHA. An attacker can leverage OAI tools to bypass captcha and make requests to critical functionality without rate limit. Forms that are often firewalled by a CAPTCHA can even be a vector for Denial of Service executing read and write from the database multiple times.

**Business Impact**

CAPTCHA bypass can lead to reputational damage for the business due to a loss in confidence and trust by users. It can also result in indirect financial loss to the business through the extra workloads placed on internal teams to deal with spam from an attacker.

**Steps to Reproduce**

1. Navigate to the following endpoint with CAPTCHA: {{value}}
1. Use {{software}} to bypass CAPTCHA

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the CAPTCHA bypass:

{{screenshot}}",The configuration of CAPTCHAs should be thoroughly tested for design and implementation flaws to prevent an attacker bypassing the CAPTCHA.,unclassified,"https://cwe.mitre.org/data/definitions/804.html, https://owasp.org/www-project-automated-threats-to-web-applications/assets/oats/EN/OAT-009_CAPTCHA_Defeat"
External Behavior - Csv Injection,"Applications will often embed unsafe input in exported spreadsheets targeting desktop applications such as Excel or LibreOffice, or their cloud application equivalents. A malicious attacker can leverage this unsafe input to exfiltrate data from users, or deliver malicious binary to users downloading their input controlled file. Unsafe CSV formulas in CSV files within the application allow malicious attackers to deliver payloads or exfiltrate data using specifically crafted input.

**Business Impact**

CSV injection can lead to reputational damage for the business due to a loss in confidence and trust by users. It can also result in indirect financial loss to the business if an attacker is able to exfiltrate data.

**Steps to Reproduce**

1. Navigate to the following endpoint: {{value}}
1. {{action}} to export a CSV file
1. Observe that the CSV file is using unsafe input:

{{screenshot}}

1. Craft a malicious CSV file to exfiltrate data by using the following payload:

{{payload}}

1. Upload to publicly accessible endpoint

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the CSV injection:

{{screenshot}}","It is recommended to validate and sanitize the input fields of CSVs so that the content is read as text only by the spreadsheet editor. The appropriate content type should also be set in the response header when serving CSV files. For example, `Content-Type: text/csv`.
Additionally, dynamic formula injection can be prevented by not allowing user-supplied input to be directly interpreted as a calculation or formula. This can be achieved by removing the functionality, or implementing a separate mechanism that handles the user input securely.",unclassified,https://owasp.org/www-community/attacks/CSV_Injection
External Behavior - User Password Persisted In Memory,"The user’s password is kept in memory after the application has ceased utilizing it. An attacker can abuse this to read the user password in memory and login as the user, impersonate them, or make requests on their behalf.

**Business Impact**

This vulnerability can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Utilize some software that allows computer memory to be accessed in a human-readable format
1. Log in to the application
1. Navigate to the following URL: {{URL}} and perform {{action}}
1. Cease using the application
1. Using the computer memory viewer, view the password of the user that remained in memory after use

**Proof of Concept (PoC)**

You can observe the plaintext password that remained in memory after utilization below:

{{screenshot}}","Passwords should not be stored in clear text and should be encrypted, hashed and salted. It is also recommended to use secure coding practices to handle passwords in memory so that the time that a passwords spends in memory is as short as possible.",unclassified,
External Behavior - Browser Feature,"Browsers implement features to offer users both online and offline features to enhance the user experience of the browser and applications. For example, a browser can offer offline features such as caching, notifications, as well as offloading computation for applications, such as Progressive Web Applications (PWA). Occasionally, these browser features can cause security issues depending on their implementation. A local attacker can take advantage of the browser feature to impersonate a user and make requests on their behalf.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Use {{software}} to profile the browser feature that is showing sensitive user information

**Proof of Concept (PoC)**

The screenshots below demonstrate the misconfigured browser feature:

{{screenshot}}",It is recommended to limit the browser feature’s use for sensitive forms and fields.,unclassified,
External Behavior - Browser Feature - Plaintext Password Field,"The password field for the login form of the application reveals the password in plaintext. An attacker with local access can shoulder surf or otherwise tailgate a user and watch them login to the application. From here, an attacker could login as a user to impersonate them or make requests on their behalf.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Enter text within the password field
1. Use the `Inspect` tool to see that the input is shown in plaintext

{{screenshot}}

**Proof of Concept (PoC)**

The screenshots below demonstrate the password field rendering in plaintext:

{{screenshot}}","The data inputted into a password field should always be encrypted at rest and while in transport using secure hashing algorithms. Passwords should not be stored client-side. Instead, server-side sessions should be used to authenticate users.",unclassified,
External Behavior - Browser Feature - Autocomplete Enabled,"Browsers implement features such as autocomplete to offer form filling features for end users. Autocomplete is an HTML attribute that saves previously entered text within the input Document Object Model (DOM) fields. An attacker can leverage the cached input for this application locally to login as a user or expose critical pieces of data.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Enter text within the input field and submit the form
1. Use `Inspect` from the developer tools to verify the input parameter has `autocomplete=on`
1. {{action}} to see the text saved into the input field

**Proof of Concept (PoC)**

The screenshots below demonstrate the autocomplete enabled:

{{screenshot}}","To limit the caching of sensitive data, it is recommended to disable autocomplete on forms with sensitive input parameters. For example, use `autocomplete=off`.",unclassified,
External Behavior - Browser Feature - Autocorrect Enabled,"Browsers implement features such as autocorrect to offer predictive spelling and grammar features for end users. The applications implementation of autocorrect for sensitive fields can enable an attacker with local access to login as a user, or leverage critical pieces of information to impersonate the user or make requests on their behalf.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Fill and {{action}} to submit form
1. {{action}} and notice previously entered text is autocorrected

{{screenshot}}

**Proof of Concept (PoC)**

The screenshots below demonstrate the autocorrect enabled on a sensitive field:

{{screenshot}}","It is recommended to set the autocorrect attribute to ""off"" for any sensitive input parameters to limit the caching of sensitive data. For example, `autocorrect=""off""`.",unclassified,
External Behavior - Browser Feature - Aggressive Offline Caching,"Browsers implement features such as service workers to offer offline features for an application. For example, a browser can offer offline features such as caching, notifications, as well as offloading computation for applications, such as Progressive Web Applications (PWA). Occasionally, these offline workers can cause issues like high CPU usage or overly aggressive offline caching, as seen in this instance. Depending on the implementation of the service worker, aggressive offline caching can act as a vector for Denial of Service (DoS) to regular application users by consuming compute to overly write to the offline cache.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ access to the application and its functions.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Use {{software}} to profile when service worker is active and compare to when the server worker is not active

**Proof of Concept (PoC)**

The screenshots below demonstrate the aggressive offline caching:

{{screenshot}}",It is recommended to adjust the levels of offline caching for the application. Service worker use and caching should be configured based upon user metrics of the application and current best practices. Offline caching needs to strike a balance between caching enough for performance and caching too much information.,unclassified,
External Behavior - Browser Feature - Save Password,"Browsers implement features such as saving input field text to reduce the time it takes for a user to fill in forms. For this application, the password is saved in the input field. An attacker with local access to the application and computer can impersonate a user and make requests on their behalf.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Enter username and password within the login form and submit
1. Logout of application and navigate back to the login page
1. Observe that the username and password is saved

**Proof of Concept (PoC)**

The screenshots below demonstrate the password saved in the input field:

{{screenshot}}","It is recommended to include code on the login page that instructs the browser to not save the password information. This can be achieved by setting the `autocomplete` attribute of the password input field to ""off"". For example, `autocomplete=""off""`.",unclassified,
External Behavior - System Clipboard Leak,"The system clipboard leaks sensitive information when performing a copy and paste function within the application. An attacker could abuse this clipboard leak to steal sensitive information that a user copied to their clipboard in the application.

**Business Impact**

This vulnerability can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Create and install the following malicious application capable of accessing the clipboard: {{malicious application}}
1. Log in to {{application}}
1. Navigate to the following endpoint: {{value}}
1. Copy some sensitive information to the clipboard
1. Within the malicious application, observe the sensitive information through the clipboard

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the leak from the system clipboard:

{{screenshot}}","It is recommended to disable or limit access to the clipboard within the application when performing sensitive operations or when handling sensitive data. It is also possible to limit the duration that sensitive data can remain in the clipboard. Finally, sensitive data should not be included in a clipboard history or any type of cloud-based clipboard program.",unclassified,
External Behavior - System Clipboard Leak - Shared Links,"The system clipboard leaks sensitive information when performing a copy and paste function within the application. An attacker could abuse this clipboard leak to steal sensitive information that a user copied to their clipboard in the application.

**Business Impact**

This vulnerability can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Create and install the following malicious application capable of accessing the clipboard: {{malicious application}}
1. Log in to {{application}}
1. Navigate to the following endpoint: {{value}}
1. Copy some sensitive information to the clipboard
1. Within the malicious application, observe the sensitive information through the clipboard

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the leak from the system clipboard:

{{screenshot}}","It is recommended to disable or limit access to the clipboard within the application when performing sensitive operations or when handling sensitive data. It is also possible to limit the duration that sensitive data can remain in the clipboard. Finally, sensitive data should not be included in a clipboard history or any type of cloud-based clipboard program.",unclassified,
Physical Security Issues - Bypass Of Physical Access Control,"The physical access control mechanisms implemented to secure the device are vulnerable to a bypass attack. This flaw allows unauthorized attacker to circumvent the designed physical security measures implemented, gaining access to the device's internal hardware and components that are intended to be restricted.

**Business Impact**

The ability to bypass physical access controls undermines the overall security of the device, exposing it to risks of tampering, data extraction, or the insertion of malicious components. Such breaches can lead to compromised device integrity, unauthorized access to sensitive information, and potential operational failures. The resulting damage can extend to financial losses, erosion of customer trust, and reputational harm, especially if the compromise leads to broader security incidents.

**Steps to Reproduce**

1. Walk up to the front of the {{hardware}}, and notice the lock currently in place to prevent access to the machine.
2. Walk to the opposite side, and you'll notice a vent grill attached with Philips head screws.
3. Using a Philips #1 screwdriver, unscrew the vent grill and pull it off the device.
4. You now have bypassed the access control and gained access to the device's internal components.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}",,unclassified,
Physical Security Issues - Weakness In Physical Access Control,"A weakness has been identified in the physical access controls deployed to secure physical access to facilities, premises, or sensitive areas within an organization. This scenario typically arises from insufficient security measures, such as weak locks, ineffective surveillance, or lack of employee awareness. This vulnerability can result in unauthorized individuals could easily obtain a key to gain access.

**Business Impact**

The perceived ease of bypassing such a security measure can damage an organization's reputation, lead to financial losses, and erode customer trust, especially if sensitive information or valuable assets are compromised.

**Steps to Reproduce**

1. Looking at the facility, it is possible to identify indications of physical access: {{indicators}}
1. Perform {{action}} to bypass {{security measure}}

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}",,unclassified,
Physical Security Issues - Weakness In Physical Access Control - Cloneable Key,"The physical access control system securing the device relies on a physical key that is susceptible to cloning. This design flaw allows attackers, with brief access to the key, to create an unauthorized copy. Access to the key could be obtained through various means, including insider threats or by employing teleduplication techniques, where a photograph of the key is used to replicate it. Consequently, An attacker can gain unauthorised access by using a cloned key, circumventing intended security measures.

**Business Impact**

The possibility of key cloning poses a considerable security threat, undermining the physical security of the device and the safeguarding of the data and systems it contains. Unauthorized access achieved through a cloned key can lead to significant adverse outcomes, such as data breaches, unauthorized changes to the device, and the theft of sensitive or proprietary information. The repercussions of such incidents include financial losses, reputational damage to the organization, and diminished confidence from customers and business partners.

**Steps to Reproduce**

1. Obtain access to the physical key for a short period of time (2 minutes).
2. Using a clay mold, dust the key with Talcum powder, and take an impression of the key briefly, and remove the key.
3. With the clay mold, melt a low-melting point metal such as Woodsmetal and pour it into the mold, and let it cool.
4. Remove your new key and test that the key does function inside of the lock.

or

1. Briefly photograph the key, with the Bitting in full view.
2. Using a vector graphic tool, such as Inkscape, scale an image of the key based upon the Bow of the keyblade, and measure each valley on the key.
3. With the image, look at the bow and you'll notice it says SC1, using the SC1 Depth and Space measurements which are public, we can identify the bitting as: {{bittingcode}}
4. Using a Key cutting machine or Impressioning file and Calipers, cut the key to the correct depth and space, and test to verify the key does work inside of the lock.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}",It is recommended for electronic access control systems to use cryptographically strong key mechanisms that prevent the key material from being accessible on the device.,unclassified,
Physical Security Issues - Weakness In Physical Access Control - Commonly Keyed System,"The physical access control deployed to secure the device was found to use a lock keyed alike to commonly used keys. This scenario typically arises when locks are mass-manufactured with the same key configuration by vendors, intended for low-risk applications, or when a specific key standard is adopted with an expectation of limited use. When these lock systems are employed in contexts requiring higher security, like the device in question, the security efficacy is substantially reduced. The widespread availability or public knowledge of these keys means unauthorized individuals could easily obtain a key to gain access.

**Business Impact**

Utilizing a commonly keyed system for securing devices intended to be secure significantly undermines the device's physical security. It opens avenues for unauthorized access, potentially leading to theft, data breaches, and compromise of the device's integrity. The perceived ease of bypassing such a security measure can damage an organization's reputation, lead to financial losses, and erode customer trust, especially if sensitive information or valuable assets are compromised.

**Steps to Reproduce**

1. Looking at the lock, we can identify markings showing {{markings}} which indicate the lock in use is a {{locksystem}}
2. This lock matches to the key {{key}} which is commonly keyed to other systems.
3. Attempt to unlock the device using the key.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","It is recommended to implement iterative locking elements (which can be defeated still by a skilled attacker) or the use of digital key systems, such as Assa Abloy's eCLIQ or Pulse systems.",unclassified,
Physical Security Issues - Weakness In Physical Access Control - Master Key Identification,"The physical access control system designed to secure the device utilizes a master keyed system. In such systems, locks can be opened by multiple keys, each cut differently, but all locks within the system can also be opened by a single master key. This configuration presents a significant security vulnerability. An attacker with access to a mastered lock, or who comes into possession of a key from the system, could derive the master key. With the master key, the attacker would have the capability to open all locks within the system, severely compromising security.

**Business Impact**

The potential for an attacker to derive the master key and gain unrestricted access to all areas secured by the system poses a considerable threat. It could lead to unauthorized access to sensitive areas, data breaches, theft of physical and intellectual property, and other security incidents. Such breaches can have far-reaching consequences, including financial losses, damage to the organization’s reputation, and loss of customer trust. The use of a master keyed system thereby introduces a critical point of failure in the physical security infrastructure.

**Steps to Reproduce**

1. Obtain access to a lock from the master keyed system.
2. Apply a metal shim to the back of the lock cylinder where the key pins are binding.
3. Insert a key blank fully and slowly pull the key back while applying pressure to the metal shim.
4. Remove the core and key pins from the lock, then remove the master wafers, driver pins, and springs onto a pinning mat, making sure to keep the keys in order.
5. Measure each key pin and master wafer, and match it to a codebook for the depth and space of the key system.
6. Using a tool, such as KeySpace, enter the details for the key system, and cut test keys to suit.
7. After testing each key, the key with the bitting {{bitting}} is our master key for this system.

or

1. Obtain a key from the master keyed system, this can be a low privilege key.
2. Measure each key pin and master wafer, and match it to a codebook for the depth and space of the key system.
3. Measure the key for the depth of each cut, and match it to a codebook for the depth and space of the key system.
4. Using a tool, such as KeySpace, enter the details for the key system, and cut test keys to suit.
5. After testing each key, the key with the bitting {{bitting}} is our master key for this system.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}",,unclassified,
Physical Security Issues - Weakness In Physical Access Control - Master Key Identification - Commonly Keyed System,"The physical access control deployed to secure the device was found to use a lock keyed alike to commonly used keys. This scenario typically arises when locks are mass-manufactured with the same key configuration by vendors, intended for low-risk applications, or when a specific key standard is adopted with an expectation of limited use. When these lock systems are employed in contexts requiring higher security, like the device in question, the security efficacy is substantially reduced. The widespread availability or public knowledge of these keys means unauthorized individuals could easily obtain a key to gain access.

**Business Impact**

Utilizing a commonly keyed system for securing devices intended to be secure significantly undermines the device's physical security. It opens avenues for unauthorized access, potentially leading to theft, data breaches, and compromise of the device's integrity. The perceived ease of bypassing such a security measure can damage an organization's reputation, lead to financial losses, and erode customer trust, especially if sensitive information or valuable assets are compromised.

**Steps to Reproduce**

1. Looking at the lock, we can identify markings showing {{markings}} which indicate the lock in use is a {{locksystem}}
2. This lock matches to the key {{key}} which is commonly keyed to other systems.
3. Attempt to unlock the device using the key.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","It is recommended to implement iterative locking elements (which can be defeated still by a skilled attacker) or the use of digital key systems, such as Assa Abloy's eCLIQ or Pulse systems.",unclassified,
Ai Application Security,"Misconfigurations can occur in Artificial Intelligence (AI) applications, including but not limited to machine learning models, algorithms, and inference systems. These misconfigurations can allow an attacker to compromise confidentiality, integrity, or availability of data and services.

**Business Impact**

This vulnerability can lead to reputational and financial damage of the company due an attacker gaining access to unauthorized data or compromising the decision-making of the LLM, which would also impact customers' trust. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Navigate to the following URL:
1. Inject the following prompt into the LLM:

```prompt
  {malicious prompt}
```

1. Observe that the LLM returns sensitive data

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}",,unclassified,
Ai Application Security - Llm Security,"Misconfigurations can occur across Large Language Model (LLM) within the setup, deployment, or usage of the LLM, leading to security weaknesses or vulnerabilities. These misconfigurations can allow an attacker to compromise confidentiality, integrity, or availability of data and services. Misconfigurations may stem from inadequate access controls, insecure default settings, or improper configuration of fine-tuning parameters.

**Business Impact**

This vulnerability can lead to reputational and financial damage of the company due an attacker gaining access to unauthorized data or compromising the decision-making of the LLM, which would also impact customers' trust. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Navigate to the following URL:
1. Inject the following prompt into the LLM:

```prompt
  {malicious prompt}
```

1. Observe that the LLM returns sensitive data

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}",,unclassified,
Ai Application Security - Llm Security - Excessive Agency Permission Manipulation,"Excessive agency or permission manipulation occurs when an attacker is able to manipulate the Large Language Model (LLM) outputs to perform actions that may be damaging or otherwise harmful. An attacker can abuse excessive agency or permission manipulation within the LLM to gain access to, modify, or delete data, without any confirmation from a user.

**Business Impact**

This vulnerability can lead to reputational and financial damage if an attacker compromises the LLM decision making or accesses unauthorized data. These circumstances not only harm the company but also weaken users' trust. The extent of business impact depends on the sensitivity of the data transmitted by the application.

**Steps to Reproduce**

1. Navigate to the following URL:
1. Enter the following prompt into the LLM:

```prompt
  {prompt}
```

1. Observe that the output from the LLM returns sensitive data

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","There is no single technique to prevent excessive agency or permission manipulation from occurring. Implementing the following defensive measures in the LLM can prevent and limit the impact of the vulnerability:

- Use Role Based Access Controls (RBAC) for access to backend systems or when performing privileged operations. Apply the principle of least privilege to restrict the LLM's access to backend systems to that which is strictly necessary for its intended functionality.
- Require user interaction to approve any authorized action that will perform privileged operations on their behalf.
- Treat user input, external input, and the LLM as untrusted input sources.
- Establish trust boundaries between external sources, the LLM, any plugins, and any neighboring systems.
- Limit the tools, plugins, and functions that the LLM can access to the minimum necessary for intended functionality.
- Log and monitor all activity of the LLM and the systems it is connected to.",unclassified,"https://owasp.org/www-project-top-10-for-large-language-model-applications/, https://embracethered.com/blog/posts/2023/chatgpt-cross-plugin-request-forgery-and-prompt-injection./"
Ai Application Security - Llm Security - Training Data Poisoning,"Training data poisoning occurs when an attacker manipulates the training data to intentionally compromise the output of the Large Language Model (LLM). This can be achieved by manipulating the pre-training data, fine-tuning data process, or the embedding process. An attacker can undermine the integrity of the LLM by poisoning the training data, resulting in outputs that are unreliable, biased, or unethical. This breach of integrity significantly impacts the model's trustworthiness and accuracy, posing a serious threat to the overall effectiveness and security of the LLM.

**Business Impact**

This vulnerability can lead to reputational and financial damage if an attacker compromises the LLM decision making or accesses unauthorized data. These cirvumstances not only harm the company but also weaken users' trust. The extent of business impact depends on the sensitivity of the data transmitted by the application.

**Steps to Reproduce**

1. Navigate to the following URL:
1. Enter the following prompt into the LLM:

```prompt
  {prompt}
```

1. Observe that the output from the LLM returns a compromised result

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","There is no single technique to prevent excessive agency or permission manipulation from occurring. Implementing the following defensive measures in the LLM can prevent and limit the impact of the vulnerability:

- Verify the integrity, content, and sources, of the training data.
- Ensure the legitimacy of the data throughout all stages of training.
- Strictly vet the data inputs and include filtering and sanitization.
- Use testing and detection mechanisms to monitor the model's outputs and detect any data poisoning attempts.",unclassified,"https://owasp.org/www-project-top-10-for-large-language-model-applications/, https://stanford-cs324.github.io/winter2022/lectures/data/"
Ai Application Security - Llm Security - Llm Output Handling,"Insecure output handling within Large Language Models (LLMs) occurs when the output generated by the LLM is not sanitized or validated before being passed downstream to other systems. This can allow an attacker to indirectly gain access to systems, elevate their privileges, or gain arbitrary code execution by using crafted prompts.

**Business Impact**

This vulnerability can lead to reputational and financial damage of the company due an attacker gaining access to unauthorized data or compromising the decision-making of the LLM, which would also impact customers' trust. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Navigate to the following URL:
1. Inject the following prompt into the LLM:

```prompt
  {malicious prompt}
```

1. Observe that the LLM returns sensitive data

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","There is no single technique to prevent excessive insecure output handling from occurring. Implementing the following defensive measures in the LLM can prevent and limit the impact of the vulnerability:

- Apply input validation and sanitization principles for all LLM outputs.
- Use JavaScript or Markdown to sanitize LLM model outputs that are returned to the user.
- Use Role Based Access Controls (RBAC) or Identity Access Management (IAM) for access to backend systems or when performing privileged operations. Apply the principle of least privilege to restrict the LLM's access to backend systems to that which is strictly necessary for its intended functionality.
- For privileged operations, require user interaction to approve any authorized action that would be performed on behalf of them.
- Treat user input, external input, and the LLM as untrusted input sources.
- Establish trust boundaries between external sources, the LLM, any plugins, and any neighboring systems.
- Limit the tools, plugins, and functions that the LLM can access to the minimum necessary for intended functionality.
- Log and monitor all activity of the LLM and the systems it is connected to.",unclassified,"https://owasp.org/www-project-top-10-for-large-language-model-applications/, https://owasp-aasvs4.readthedocs.io/en/latest/V5.html#validation-sanitization-and-encoding"
Ai Application Security - Llm Security - Prompt Injection,"Prompt injection occurs when an attacker crafts a malicious prompt that manipulates a Large Language Model (LLM) into executing unintended actions. The LLM's inability to distinguish user input from its dataset influences the output it generates. This flaw allows attackers to exploit the system by injecting malicious prompts, thereby bypassing safeguards.

**Business Impact**

This vulnerability can lead to reputational and financial damage of the company due an attacker gaining access to unauthorized data or compromising the decision-making of the LLM, which would also impact customers' trust. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Inject the following prompt into the LLM:

```prompt
  {malicious prompt}
```

1. Observe that the LLM returns sensitive data

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","There is no single technique to prevent prompt injection from occurring. Implementing the following defensive measures in the LLM can prevent and limit the impact of the vulnerability:

- Use privilege controls for access to backend systems or when performing privileged operations. Apply the principle of least privilege to restrict the LLM's access to backend systems to that which is strictly necessary for its intended functionality.
- For privileged operations, require user interaction to approve any authorized action that would be performed on behalf of them.
- Treat user input, external input, and the LLM as untrusted input sources.
- Establish trust boundaries between external sources, the LLM, any plugins, and any neighboring systems.",unclassified,"https://owasp.org/www-project-top-10-for-large-language-model-applications/, https://aivillage.org/large%20language%20models/threat-modeling-llm/"
Blockchain Infrastructure Misconfiguration,"Blockchain Infrastructure Misconfiguration refers to weaknesses in the foundational components of a blockchain system, including nodes, consensus mechanisms, network configurations, and data integrity protocols. This can occur due to improper setup, insufficient security measures, or lack of adherence to best practices for infrastructure design and maintenance. Misconfigurations in this category can lead to systemic vulnerabilities, enabling attackers to disrupt the network, manipulate data, or exploit functionality. An attacker can leverage these misconfigurations to cause denial of service, compromise consensus, or gain unauthorized control over network operations.

**Business Impact**  

Infrastructure misconfigurations can undermine the reliability and security of the blockchain network, leading to downtime, financial losses, and erosion of trust among users and stakeholders. Such vulnerabilities can damage the reputation of the platform, expose sensitive data, and disrupt dependent decentralized applications.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Identify deviations from security best practice in the configuration settings of nodes and network infrastructure {{explanation of where + screenshot}}
1. Attempt to exploit weak or missing authentication for administrative access to nodes  
1. Simulate malformed transactions or messages to test the system's error-handling mechanisms  
1. Observe that the identified misconfigurations result in unauthorized access, operational disruptions, or data manipulation

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Implement secure default settings and restrict administrative access to nodes and infrastructure.  
- Regularly audit and validate network configurations against industry best practices.  
- Use automated tools to detect and resolve misconfigurations in real time.  
- Harden consensus mechanisms by enforcing robust cryptographic standards and validating peer integrity.  
- Monitor network activity to detect and mitigate potential exploits stemming from misconfigurations.",unclassified,
Blockchain Infrastructure Misconfiguration - Improper Bridge Validation And Verification Logic,"This misconfiguration occurs when a blockchain bridge fails to rigorously validate cross-chain transactions or asset transfers. This can arise from incomplete verification of cryptographic proofs, inadequate validation of source chain data, or flawed consensus mechanisms. An attacker can exploit this vulnerability to forge transactions, double-spend assets, or compromise the integrity of cross-chain interactions.

**Business Impact**  

Improper validation in blockchain bridges can lead to significant financial losses, cross-chain instability, and diminished trust in the platform. Exploits may propagate vulnerabilities across multiple chains, magnifying their impact and eroding user confidence.

**Steps to Reproduce** 

1. Navigate to the following URL: {{URL}}
1. Analyze the bridge's transaction validation and verification logic.  
1. Submit a cross-chain transaction with forged or incomplete data.  
1. Observe if the bridge accepts and processes the invalid transaction.  
1. Attempt to manipulate or double-spend assets through the bridge.  
1. Confirm that the bridge fails to detect or reject the invalid transaction.

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Use robust cryptographic mechanisms to validate cross-chain proofs and transactions.  
- Implement multi-signature or consensus-based verification for bridge transactions.  
- Regularly audit bridge validation and verification logic to identify weaknesses.  
- Incorporate monitoring systems to flag and halt suspicious cross-chain activity.",unclassified,
Server Security Misconfiguration,"Server security misconfigurations result from errors in the setup and deployment of a web server. These misconfigurations can lead to a broad range of issues which could allow a malicious attacker to manipulate the server and retrieve, change, or delete content.

**Business Impact**

Depending on the type of misconfiguration found in the server, exposure or manipulation of data from within it could lead to financial loss and reputational damage for the business.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP, to record and intercept web traffic from your browser
1. Use a browser to navigate to: {{URL}}
1. Using the HTTP intercept proxy, capture the response
1. Observe the server security misconfiguration

**Proof of Concept (PoC)**

The screenshot below demonstrates the server security misconfiguration:

{{screenshot}}","It is recommended that all servers are managed through a repeatable configuration process which covers server hardening, updates, security headers, and segmentation. There should also be a verification process which tests the effectiveness of the configurations and settings.",unclassified,
Server Security Misconfiguration - Missing Secure Or Httponly Cookie Flag,"The `Secure` and `HTTPOnly` flags on session cookies ensures that the cookies are sent to a server in a secure and encrypted manner. A lack of a `Secure` or `HTTPOnly` flag in {{target}} allows an attacker to access cookies via Person-in-The-Middle or Cross-Site Scripting (XSS) attacks where they could steal a user's session or extract information about the session.

**Business Impact**

This vulnerability can result in reputational damage and indirect financial loss to the business through the impact to customers’ trust.

If an attacker is successful with a XSS attack, it could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Use Web Proxy to intercept the response
1. Observe the lack of `Secure` or `HTTPOnly` flags

**Proof of Concept (PoC)**

The following screenshot show the missing `Secure` or `HTTPOnly` flag:

{{screenshot}}","The cookie should be set to include both the `Secure` and `HTTPOnly` flags. The following example shows the syntax and inclusion of the flags:

`Set-Cookie: <name>=<value>[; <Max-Age>=<age>] [; expires=<date>][; domain=<domain_name>] [; path=<some_path>][; secure][; HttpOnly]`",unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie, https://owasp.org/www-community/HttpOnly"
Server Security Misconfiguration - Missing Secure Or Httponly Cookie Flag - Session Token,"The `Secure` and `HTTPOnly` flags on session tokens ensures that the cookies are sent to a server in a secure and encrypted manner. A lack of a `Secure` or `HTTPOnly` flag in {{target}} allows an attacker to access cookies via Person-in-The-Middle or Cross-Site Scripting (XSS) attacks where they could steal a user's session or extract information about the session.

**Business Impact**

This vulnerability can result in reputational damage and indirect financial loss to the business through the impact to customers’ trust.

If an attacker is successful with a XSS attack, it could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Use Web Proxy to intercept the response
1. Observe the lack of `Secure` or `HTTPOnly` flags

**Proof of Concept (PoC)**

The following screenshot show the missing `Secure` or `HTTPOnly` flag:

{{screenshot}}","The cookie should be set to include both the `Secure` and `HTTPOnly` flags. The following example shows the syntax and inclusion of the flags:

`Set-Cookie: <name>=<value>[; <Max-Age>=<age>] [; expires=<date>][; domain=<domain_name>] [; path=<some_path>][; secure][; HttpOnly]`",unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie, https://owasp.org/www-community/HttpOnly"
Server Security Misconfiguration - Missing Secure Or Httponly Cookie Flag - Non Session Cookie,"The `Secure` and `HTTPOnly` flags on cookies ensures that the cookies are sent to a server in a secure and encrypted manner. A lack of a `Secure` or `HTTPOnly` flag in {{target}} allows an attacker to access cookies via Person-in-The-Middle or Cross-Site Scripting (XSS) attacks where they could steal a user's session or extract information about the session.

**Business Impact**

This vulnerability can result in reputational damage and indirect financial loss to the business through the impact to customers’ trust.

If an attacker is successful with a XSS attack, it could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Use Web Proxy to intercept the response
1. Observe the lack of `Secure` or `HTTPOnly` flags

**Proof of Concept (PoC)**

The following screenshot show the missing `Secure` or `HTTPOnly` flag:

{{screenshot}}","The cookie should be set to include both the `Secure` and `HTTPOnly` flags. The following example shows the syntax and inclusion of the flags:

`Set-Cookie: <name>=<value>[; <Max-Age>=<age>] [; expires=<date>][; domain=<domain_name>] [; path=<some_path>][; secure][; HttpOnly]`",unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie, https://owasp.org/www-community/HttpOnly"
Server Security Misconfiguration - Cache Poisoning,"A web cache allows for static and fast fetching of content in web applications. Content Delivery Networks (CDNs) are commonly used to serve content used by applications. A malicious attacker can take advantage of caching mechanisms to serve content or deny service to certain applications using X-Based Host headers (X-Forwarded-Host, etc.).

Cache poisoning allows an attacker to serve content for cached pages on CDNs and websites with cache misconfigurations. This opens the application up to attacks like Cross-Site Request Forgery (CSRF), and to leakage of sensitive information.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to the following url: {{URL}}
1. Intercept the request in the HTTP interception Proxy and change HTTP header: {{value}} to {{value}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Notice that the following page is cached

{{screenshot}}

1. {{action}} to poison the cache

**Proof of Concept (PoC)**

The screenshot below demonstrates the cache poisoning:

{{screenshot}}","Where possible disable caching altogether. If caching is required to serve content, restrict caching to static content only. Implement end-to-end encryption as well as DNS security extension protocols.",unclassified,
Server Security Misconfiguration - Oauth Misconfiguration,"OAuth is an authorization framework used to identify and authenticate users for an application. There are a number of implementation misconfigurations which can lead to an OAuth framework being implemented insecurely. These misconfigurations can lead to a broad range of issues which could allow an attacker to manipulate or retrieve sensitive data and potentially bypass the authentication process.

**Business Impact**

Depending on the type of misconfiguration found in the OAuth implementation, exposure or manipulation of data from within it could lead to financial loss and reputational damage for the business.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. With the HTTP intercept proxy turned on, login to the application and capture the response in the the HTTP intercept proxy
1. Observe the OAuth misconfiguration

**Proof of Concept (PoC)**

The screenshot below demonstrates the OAuth misconfiguration:

{{screenshot}}","There is no single technique to stop OAuth misconfigurations from occurring. However, securely implementing the OAuth workflow with the right combination of defensive measures can prevent and limit the impact of these OAuth misconfigurations. Some best practices include the following:

- Ensure that parameters within the OAuth workflows are validated
- Enable Cross-Site Request Forgery (CSRF) validation on endpoints
- Thoroughly validate input and use other preventative controls to limit Cross-Site Scripting (XSS). See the Open Web Application Security Project’s (OWASP) XSS prevention cheat sheet for more details: <https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html>",unclassified,
Server Security Misconfiguration - Oauth Misconfiguration - Account Takeover,"OAuth is an authorization framework used to identify and authenticate users for an application. There are a number of implementation misconfigurations which can lead to an OAuth framework being implemented insecurely that an attacker can leverage to take over multiple user accounts and manipulate or retrieve data.

**Business Impact**

Account takeover can lead to financial and loss through an attacker's access to multiple user accounts and the data within. This attack can also lead to reputational damage for the business through the impact to customers’ trust in the security of the application.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. With the HTTP intercept proxy turned on, login to the application and capture the response in the the HTTP intercept proxy
1. Observe the OAuth misconfiguration that leads to account takeover

**Proof of Concept (PoC)**

The screenshot below demonstrates the OAuth misconfiguration:

{{screenshot}}","There is no single technique to stop OAuth misconfigurations from occurring. However, securely implementing the OAuth workflow with the right combination of defensive measures can prevent and limit the impact of these OAuth misconfigurations. Some best practices include the following:

- Ensure that parameters within the OAuth workflows are validated
- Enable Cross-Site Request Forgery (CSRF) validation on endpoints
- Thoroughly validate input and use other preventative controls to limit Cross-Site Scripting (XSS). See the Open Web Application Security Project’s (OWASP) XSS prevention cheat sheet for more details: <https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html>",unclassified,
Server Security Misconfiguration - Oauth Misconfiguration - Insecure Redirect Uri,"OAuth is an authorization framework used to identify and authenticate users for an application. There are a number of implementation misconfigurations which can lead to an OAuth framework being implemented insecurely that an attacker can leverage to take over multiple user accounts and manipulate or retrieve data.

The application fails to validate the `redirect_uri` parameter used within the OAuth workflow. This redirect URI is where the user is redirected to after being authorized. When the `redirect_uri` parameter is not validated, an attacker is able to change this URI to a domain they own. As a consequence, when the OAuth workflow is triggered, the legitimate user’s browser sends the authorization token to the attacker-controlled domain, allowing the attacker to take over the user’s account.

**Business Impact**

Account takeover can lead to financial and loss through an attacker's access to multiple user accounts and the data within. This attack can also lead to reputational damage for the business through the impact to customers’ trust in the security of the application.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. With the HTTP intercept proxy turned on, login to the application and capture the response in the the HTTP intercept proxy
1. Change `redirect_uri` to the following value:

{{parameter}}

1. Observe that the authorization token is sent to server altered in the previous step

**Proof of Concept (PoC)**

The screenshot below demonstrates a successful account takeover:

{{screenshot}}","There is no single technique to stop OAuth misconfigurations from occurring. However, securely implementing the OAuth workflow with the right combination of defensive measures can prevent and limit the impact of these OAuth misconfigurations. Some best practices include the following:

- Ensure that parameters within the OAuth workflow are validated, including the `redirect_uri` parameter. This can be performed through a strict allow list.
- Enable Cross-Site Request Forgery (CSRF) validation on endpoints
- Thoroughly validate input and use other preventative controls to limit Cross-Site Scripting (XSS). See the Open Web Application Security Project’s (OWASP) XSS prevention cheat sheet for more details: <https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html>",unclassified,
Server Security Misconfiguration - Oauth Misconfiguration - Missing State Parameter,"OAuth is an authorization framework used to identify and authenticate users for an application. There are a number of implementation misconfigurations which can lead to an OAuth framework being implemented insecurely that an attacker can leverage to take over multiple user accounts and manipulate or retrieve data.

A misconfigured or missing `state` parameter allows an attacker to issue a request on behalf of a user and trick the user’s browser into completing the OAuth workflow, similar to a Cross-Site Request Forgery (CSRF) attack. This can enable an attacker to take over multiple accounts in the application depending on the OAuth workflow configuration.

**Business Impact**

Account takeover can lead to financial and loss through an attacker's access to multiple user accounts and the data within. This attack can also lead to reputational damage for the business through the impact to customers’ trust in the security of the application.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Capture the response with the HTTP intercept proxy turned on
1. Observe the insecure `state` parameter
1. Change `state` to the following value:

{{parameter}}

1. Forward the following vulnerable request to the application:

``` HTTP Request
{{HTTP Request}}
```

1. Observe that it is now possible to take over a user’s account

**Proof of Concept (PoC)**

The screenshot below demonstrates a successful account takeover:

{{screenshot}}","There is no single technique to stop OAuth misconfigurations from occurring. However, securely implementing the OAuth workflow with the right combination of defensive measures can prevent and limit the impact of these OAuth misconfigurations. Some best practices include the following:

- Ensure that parameters within the OAuth workflows are validated
- Enable Cross-Site Request Forgery (CSRF) validation on endpoints
- Thoroughly validate input and use other preventative controls to limit Cross-Site Scripting (XSS). See the Open Web Application Security Project’s (OWASP) XSS prevention cheat sheet for more details: <https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html>",unclassified,
Server Security Misconfiguration - Oauth Misconfiguration - Account Squatting,"OAuth is an authorization framework used to identify and authenticate users for an application. There are a number of implementation misconfigurations which can lead to an OAuth framework being implemented insecurely.

During the OAuth based account registration process, the OAuth authorization flow creates a new account for an email address and grants access via an OAuth token without checking if there is a pre-existing account for the same email address. This allows an attacker to register an account with a legitimate email and “squat” on the account. When the legitimate user creates an account with their email address using the OAuth workflow, they are unknowingly logged into the original account that the attacker created. This means that the attacker is still able to access the account.

**Business Impact**

Depending on the type of misconfiguration found in the OAuth implementation, exposure or manipulation of data from within it could lead to financial loss and reputational damage for the business.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. With the HTTP intercept proxy turned on, login to the application and capture the response in the the HTTP intercept proxy
1. Observe the OAuth misconfiguration

**Proof of Concept (PoC)**

The screenshot below demonstrates the OAuth misconfiguration:

{{screenshot}}","There is no single technique to stop OAuth misconfigurations from occurring. However, securely implementing the OAuth workflow with the right combination of defensive measures can prevent and limit the impact of these OAuth misconfigurations. Some best practices include the following:

- Ensure that parameters within the OAuth workflow are validated, including the `redirect_uri` parameter. This can be performed through a strict allow list.
- Enable Cross-Site Request Forgery (CSRF) validation on endpoints
- Thoroughly validate input and use other preventative controls to limit Cross-Site Scripting (XSS). See the Open Web Application Security Project’s (OWASP) XSS prevention cheat sheet for more details: <https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html>",unclassified,
Server Security Misconfiguration - Dbms Misconfiguration,"Database Management System (DBMS) misconfiguration can arise from software or hardware misconfigurations, vulnerabilities, or human error. DBMS misconfigurations can result in an attacker performing Denial of Service (DoS) attacks, injection attacks, buffer overflows, malware, and attacks performed on backup databases. These attacks can result in an attacker gaining access to the database and potentially read or write access to its contents.

**Business Impact**

DBMS misconfigurations can lead to reputational damage for the business due to a loss in confidence and trust by users. It can also lead to indirect financial loss due to intellectual property theft, industry regulated fines, and breach investigation activities and customer notification as a result of an attacker gaining and exploiting access to the DBMS. The severity of the business impact depends on the privilege level of access gained by an attacker.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to the vulnerable functionality: {{value}}
1. Use Web Proxy to intercept the request
1. Navigate to the vulnerable functionality {{value}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe that the database has the following misconfiguration: {{value}}.

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the misconfiguration:

{{screenshot}}","Database security is multi-tiered, relying on a number of best practices to keep the business’s data secure. The following should be kept in mind:

- Databases should have sufficient physical security. Both on premise and cloud-based databases should be located within a secure environment
- All data at rest and in transit should be encrypted with accordance to best practices
- administrative and network access controls should be managed on the principle of least privilege and these controls should be part of a regular audit and review process
- Software and hardware should be maintained inside a regular maintenance and review lifecycle
- All security controls should be part of an organization wide monitoring and audit review lifecycle",unclassified,
Server Security Misconfiguration - Dbms Misconfiguration - Excessively Privileged User Dba,"Database Management System (DBMS) misconfiguration can arise from software or hardware misconfigurations, vulnerabilities, or human error. DBMS misconfigurations can result in an attacker performing Denial of Service (DoS) attacks, injection attacks, buffer overflows, malware, and attacks performed on backup databases.

The database contains a user with excessive privileges. If their account were to be compromised, an attacker could gain access to the database and get read and write access to its contents.

**Business Impact**

DBMS misconfigurations can lead to reputational damage for the business due to a loss in confidence and trust by users. It can also lead to indirect financial loss due to intellectual property theft, industry regulated fines, and breach investigation activities and customer notification as a result of an attacker gaining and exploiting access to the DBMS. The severity of the business impact depends on the privilege level of access gained by an attacker.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to the vulnerable functionality: {{value}}
1. Use Web Proxy to intercept the request
1. Navigate to the vulnerable functionality {{value}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe that the user with roles {{value}} has excessive privileges to {{action}} in database {{value}}.

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the misconfiguration:

{{screenshot}}","Database security is multi-tiered, relying on a number of best practices to keep the business’s data secure. The following should be kept in mind:

- Databases should have sufficient physical security. Both on premise and cloud-based databases should be located within a secure environment
- All data at rest and in transit should be encrypted with accordance to best practices
- administrative and network access controls should be managed on the principle of least privilege and these controls should be part of a regular audit and review process
- Software and hardware should be maintained inside a regular maintenance and review lifecycle
- All security controls should be part of an organization wide monitoring and audit review lifecycle",unclassified,
Server Security Misconfiguration - Missing Dnssec,"Domain name system security extensions (DNSSEC) are security controls used for DNS lookups to protect users from Cache Poisoning and Person-in-The-Middle (PiTM) attacks. It does this by using a cryptographic signature to ensure DNS servers are non-malicious.

Missing DNSSEC keys in {{target}} allow a malicious attacker to execute PiTM and Cache Poisoning attacks.

**Business Impact**

This vulnerability can result in reputational damage and indirect financial loss to the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Use {{software}} to gathering information about the DNS
1. Observe that DNSSEC is missing

**Proof of Concept (PoC)**

The following screenshot show the full exploit:

{{screenshot}}",DNSSEC should be configured in accordance with best practices.,unclassified,
Server Security Misconfiguration - Potentially Unsafe Http Method Enabled,"HTTP request methods are used to indicate the desired action to be performed in communications between a client and a server. It is possible to perform create, read, update, and delete, amongst other operations. While not a vulnerability within itself, an attacker can use different HTTP methods when they are enabled to gather information, or interact with an endpoint in a way that is unintended. This can lead to an attacker modifying the endpoint in unsafe ways and gathering further information about the system for further attacks.

**Business Impact**

HTTP methods enabled can lead to reputational damage for the business through the impact to customers’ trust in the security of the application.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Within the HTTP intercept proxy insert the following request:

{{screenshot}}

1. Observe the change of the HTTP method
1. Forward the new request to the application

**Proof of Concept (PoC)**

The screenshot below demonstrates the HTTP method enabled:

{{screenshot}}",The attack surface of this endpoint should be reduced by disabling the use of the HTTP methods that are considered unsafe.,unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods, https://datatracker.ietf.org/doc/html/rfc7231#section-4"
Server Security Misconfiguration - Potentially Unsafe Http Method Enabled - Options,"HTTP request methods are used to indicate the desired action to be performed in communications between a client and a server. For example, an endpoint will return a list of all methods allowed when sent a request using the OPTIONS method.

The OPTIONS HTTP method can be sent to this application and could be used by an attacker to gather information, or interact with an endpoint in a way that is unintended, gathering information about the system for further attacks.

**Business Impact**

HTTP methods enabled can lead to reputational damage for the business through the impact to customers’ trust in the security of the application.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Within the HTTP intercept proxy insert the following request:

{{screenshot}}

1. Observe the change of the HTTP method to the OPTIONS method
1. Forward the new request to the application

**Proof of Concept (PoC)**

The screenshot below demonstrates the HTTP method enabled:

{{screenshot}}",The attack surface of this endpoint should be reduced by disabling the use of the HTTP OPTIONS methods as it is considered unsafe.,unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS, https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.7"
Server Security Misconfiguration - Potentially Unsafe Http Method Enabled - Trace,"HTTP request methods are used to indicate the desired action to be performed in communications between a client and a server. For example, the TRACE HTTP method is used to help applications debug by using a loopback message.

The TRACE HTTP method can be sent to this application and could be used by an attacker to gather information, or interact with an endpoint in a way that is unintended. It is possible for the TRACE method to be used in a cross-site tracing attack, a technique where a malicious attacker can bypass the `HttpOnly` tag, capture a session cookie, and gain control of a user's session.

**Business Impact**

HTTP methods enabled can lead to reputational damage for the business through the impact to customers’ trust in the security of the application.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Within the HTTP intercept proxy insert the following request:

{{screenshot}}

1. Observe the change of the HTTP method to the TRACE method
1. Forward the new request to the application

**Proof of Concept (PoC)**

The screenshot below demonstrates the HTTP method enabled:

{{screenshot}}",The attack surface of this endpoint should be reduced by disabling the use of the HTTP TRACE methods as it is considered unsafe.,unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/TRACE, https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.8"
Server Security Misconfiguration - Mail Server Misconfiguration,"A Sender Policy Framework (SPF) and DomainKeys Identified Mail (DKIM) are security controls used by email domains to prevent spoofing. A missing or misconfigured SPF or DKIM on a domain enables an attacker to spoof the name of a domain and send emails on its behalf. The misconfiguration on this mail server allows an attacker to use a trusted domain for email spoofing, commonly used in phishing and spam campaigns to appear as if the emails originate from a legitimate source.

**Business Impact**

Depending on the type of misconfiguration found in the mail server, an attacker who is able to  manipulate and use the domain as part of a phishing or spam campaign can cause reputational damage to the business.

**Steps to Reproduce**

1. Using the following command to verify the target is a domain without an MX record:

{{value}}

1. Use dig or nslookup to request details for DMARC:

{{value}}

1. Send a test email using the following application:

{{application}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the mail server misconfiguration:

{{screenshot}}","There is no single technique to stop mail server misconfigurations from occurring. However, securely implementing the SPF, DMARC and DKIM with the right combination of defensive measures can prevent and limit the impact of these mail server misconfigurations.",unclassified,
Server Security Misconfiguration - Mail Server Misconfiguration - Email Spoofing To Spam Folder,"Email spoofing is an attack that modifies email headers to send emails on behalf of a domain. It is commonly used in phishing and spam campaigns to appear as if the emails originate from a legitimate source. A misconfiguration of this domain enables an attacker to spoof the name of a domain and send emails on its behalf.

**Business Impact**

Depending on the type of misconfiguration found in the mail server, an attacker who is able to  manipulate and use the domain as part of a phishing or spam campaign can cause reputational damage to the business.

**Steps to Reproduce**

1. Using the following command to verify the target is a domain without an MX record:

{{value}}

1. Use dig or nslookup to request details for DMARC:

```bash
dig TXT 
```

1. Send a test email using the following application:

{{application}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the mail server misconfiguration:

{{screenshot}}","There is no single technique to stop mail server misconfigurations from occurring. However, securely implementing the SPF, DMARC and DKIM with the right combination of defensive measures can prevent and limit the impact of these mail server misconfigurations.",unclassified,
Server Security Misconfiguration - Mail Server Misconfiguration - Missing Or Misconfigured Spf And Or Dkim,"A Sender Policy Framework (SPF) and DomainKeys Identified Mail (DKIM) are security controls used by email domains to prevent spoofing. A missing or misconfigured SPF or DKIM on this domain enables an attacker to spoof the name of a domain and send emails on its behalf.

**Business Impact**

Depending on the type of misconfiguration found in the mail server, an attacker who is able to  manipulate and use the domain as part of a phishing or spam campaign can cause reputational damage to the business.

**Steps to Reproduce**

1. Using the dig command, you can request the details on SPF/DKIM on the domain

```bash
dig TXT 
```

1. Observe in the response that there is no answer section for SPF/DKIM on the domain:

```text
```

1. Using the following command to request details on the SPF and DKIM on the domain:

{{value}}

1. Observe in the response that the SPF/DKIM is missing or misconfigured:

{{response}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the mail server misconfiguration:

{{screenshot}}","There is no single technique to stop mail server misconfigurations from occurring. However, securely implementing the SPF, DMARC and DKIM with the right combination of defensive measures can prevent and limit the impact of these mail server misconfigurations.",unclassified,
Server Security Misconfiguration - Mail Server Misconfiguration - Email Spoofing On Non Email Domain,"Email spoofing is an attack that modifies email headers to send emails on behalf of a domain. It is commonly used in phishing and spam campaigns to appear as if the emails originate from a legitimate source. A misconfiguration of this non-email domain enables an attacker to spoof the name of a domain and send spoofed emails on its behalf.

**Business Impact**

Depending on the type of misconfiguration found in the mail server, an attacker who is able to  manipulate and use the domain as part of a phishing or spam campaign can cause reputational damage to the business.

**Steps to Reproduce**

1. Use dig or nslookup to request details for DMARC:

```bash
dig TXT 
```

1. Observe in the response that there is no answer section for DMARC on the domain:

```text
```

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the mail server misconfiguration:

{{screenshot}}","There is no single technique to stop mail server misconfigurations from occurring. However, securely implementing the SPF, DMARC and DKIM with the right combination of defensive measures can prevent and limit the impact of these mail server misconfigurations.",unclassified,
Server Security Misconfiguration - Mail Server Misconfiguration - Email Spoofing To Inbox Due To Missing Or Misconfigured Dmarc On Email Domain,"A Sender Policy Framework (SPF) and DomainKeys Identified Mail (DKIM) are security controls used by email domains to prevent spoofing. Domain-based Message Authentication (DMARC) uses both SPF and DKIM to reject or quarantine emails sent from domains. A missing DMARC on this domain enables an attacker to spoof the name of a domain and send emails on behalf of the domain.

**Business Impact**

Depending on the type of misconfiguration found in the mail server, an attacker who is able to  manipulate and use the domain as part of a phishing or spam campaign can cause reputational damage to the business.

**Steps to Reproduce**

1. Use dig or nslookup to request details for DMARC:

```bash
dig TXT 
```

1. Observe in the response that there is a misconfigured or missing answer section for DMARC on the domain:

```text
```

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the mail server misconfiguration:

{{screenshot}}","There is no single technique to stop mail server misconfigurations from occurring. However, securely implementing the SPF, DMARC and DKIM with the right combination of defensive measures can prevent and limit the impact of these mail server misconfigurations.",unclassified,
Server Security Misconfiguration - Mail Server Misconfiguration - No Spoofing Protection On Email Domain,"A Sender Policy Framework (SPF) and DomainKeys Identified Mail (DKIM) are security controls used by email domains to prevent spoofing. A missing or misconfigured SPF or DKIM on this domain enables an attacker to spoof the name of a domain and send emails on its behalf.

**Business Impact**

Depending on the type of misconfiguration found in the mail server, an attacker who is able to  manipulate and use the domain as part of a phishing or spam campaign can cause reputational damage to the business.

**Steps to Reproduce**

1. Use dig or nslookup to request details for SPF/DKIM/DMARC on the domain:

```bash
dig TXT 
```

1. Observe in the response that the SPF/DKIM/DMARC is missing or misconfigured:

{{response}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the mail server misconfiguration:

{{screenshot}}","There is no single technique to stop mail server misconfigurations from occurring. However, securely implementing the SPF, DMARC and DKIM with the right combination of defensive measures can prevent and limit the impact of these mail server misconfigurations.",unclassified,
Server Security Misconfiguration - Clickjacking,"Clickjacking is a method of tricking a user into clicking on a link that performs an action, which is disguised as a legitimate link to something else. Usually, this is carried out by embedding a link into a transparent `<iframe>` HTML element which sits on top of a legitimate button on the webpage. This instance of clickjacking can allow an attacker to manipulate a user into performing unwanted actions.

**Business Impact**

Clickjacking can lead to reputational damage for the business due to a loss in confidence from users who are attempting to perform legitimate actions within the application.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. With the HTTP intercept proxy turned on, use a browser to navigate to: {{URL}}
1. Observe that {{action}} can be performed through only mouse-clicks
1. In a HTTP proxy, observe in the server response that there are no anti-clickjacking protections in place, such as the header `Content-Security-Policy: frame-ancestors 'self'` or the `X-Frame-Options` header  set to `DENY` or `SAMEORIGIN`

**Proof of Concept (PoC)**

The screenshot below demonstrates the full exploit taking place:

{{screenshot}}","There is no single technique to prevent clickjacking attacks from occurring. However, there are multiple levels of defensive strategies that can be implemented to protect from clickjacking attacks. Some best practices include using appropriate HTTP response headers to ensure the browser disallows framing, or controls which domains it can occur from. These should be customized specific to the application and its environment. For example:

``` HTTP
X-Frame-Options: DENY
Content-Security-Policy: frame-ancestors 'none';
```",unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors, https://portswigger.net/web-security/clickjacking"
Server Security Misconfiguration - Clickjacking - Non Sensitive Action,"Clickjacking is a method of tricking a user into clicking on a link that performs an action, which is disguised as a legitimate link to something else. Usually, this is carried out by embedding a link into a transparent `<iframe>` HTML element which sits on top of a legitimate button on the webpage. This instance of clickjacking can allow an attacker to manipulate a user into performing unwanted actions when they believe they are clicking on a link for a non-sensitive action within the application.

**Business Impact**

Clickjacking can lead to reputational damage for the business due to a loss in confidence from users who are attempting to perform legitimate actions within the application.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. With the HTTP intercept proxy turned on, use a browser to navigate to: {{URL}}
1. Observe that {{action}} can be performed through only mouse-clicks
1. In a HTTP proxy, observe in the server response that there are no anti-clickjacking protections in place, such as the header `Content-Security-Policy: frame-ancestors 'self'` or the `X-Frame-Options` header  set to `DENY` or `SAMEORIGIN`

**Proof of Concept (PoC)**

The screenshot below demonstrates the full exploit taking place:

{{screenshot}}","There is no single technique to prevent clickjacking attacks from occurring. However, there are multiple levels of defensive strategies that can be implemented to protect from clickjacking attacks. Some best practices include using appropriate HTTP response headers to ensure the browser disallows framing, or controls which domains it can occur from. These should be customized specific to the application and its environment. For example:

``` HTTP
X-Frame-Options: DENY
Content-Security-Policy: frame-ancestors 'none';
```",unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors, https://portswigger.net/web-security/clickjacking"
Server Security Misconfiguration - Clickjacking - Sensitive Action,"Clickjacking is a method of tricking a user into clicking on a link that performs an action, which is disguised as a legitimate link to something else. Usually, this is carried out by embedding a link into a transparent `<iframe>` HTML element which sits on top of a legitimate button on the webpage. This instance of clickjacking can allow an attacker to manipulate a user into performing unwanted actions when they believe they are performing a sensitive click-based action within the application.

**Business Impact**

Clickjacking can lead to reputational damage for the business due to a loss in confidence from users who are attempting to perform legitimate actions within the application.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. With the HTTP intercept proxy turned on, use a browser to navigate to: {{URL}}
1. Observe that {{action}} can be performed through only mouse-clicks
1. In a HTTP proxy, observe in the server response that there are no anti-clickjacking protections in place, such as the header `Content-Security-Policy: frame-ancestors 'self'` or the `X-Frame-Options` header  set to `DENY` or `SAMEORIGIN`

**Proof of Concept (PoC)**

The screenshot below demonstrates the full exploit taking place:

{{screenshot}}","There is no single technique to prevent clickjacking attacks from occurring. However, there are multiple levels of defensive strategies that can be implemented to protect from clickjacking attacks. Some best practices include using appropriate HTTP response headers to ensure the browser disallows framing, or controls which domains it can occur from. These should be customized specific to the application and its environment. For example:

``` HTTP
X-Frame-Options: DENY
Content-Security-Policy: frame-ancestors 'none';
```",unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors, https://portswigger.net/web-security/clickjacking"
Server Security Misconfiguration - Clickjacking - Form Input,"Clickjacking is a method of tricking a user into clicking on a link that performs an action, which is disguised as a legitimate link to something else. Usually, this is carried out by embedding a link into a transparent `<iframe>` HTML element which sits on top of a legitimate button on the webpage. This instance of clickjacking can allow an attacker to manipulate a user into performing unwanted actions when they believe they are clicking on a form input within the application.

**Business Impact**

Clickjacking can lead to reputational damage for the business due to a loss in confidence from users who are attempting to perform legitimate actions within the application.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. With the HTTP intercept proxy turned on, use a browser to navigate to: {{URL}}
1. Observe that {{action}} can be performed through only mouse-clicks
1. In a HTTP proxy, observe in the server response that there are no anti-clickjacking protections in place, such as the header `Content-Security-Policy: frame-ancestors 'self'` or the `X-Frame-Options` header  set to `DENY` or `SAMEORIGIN`

**Proof of Concept (PoC)**

The screenshot below demonstrates the full exploit taking place:

{{screenshot}}","There is no single technique to prevent clickjacking attacks from occurring. However, there are multiple levels of defensive strategies that can be implemented to protect from clickjacking attacks. Some best practices include using appropriate HTTP response headers to ensure the browser disallows framing, or controls which domains it can occur from. These should be customized specific to the application and its environment. For example:

``` HTTP
X-Frame-Options: DENY
Content-Security-Policy: frame-ancestors 'none';
```",unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors, https://portswigger.net/web-security/clickjacking"
Server Security Misconfiguration - Lack Of Security Headers,"A lack of HTTP response security headers can lead to sensitive user data being retrieved by an attacker through Cross-Site Scripting (XSS), Machine-in-the-Middle (MitM), click-jacking, and some local network attacks. There are multiple HTTP response headers used in communication between the server and client which can be implemented to improve security against well documented vulnerabilities.

An advanced attacker can leverage a missing security headers to bypass security controls of an application to execute code within a user's browser or capture data in transit.

**Business Impact**

Not having security headers implemented following best practices can lead to reputational damage and indirect financial loss to the business due to an advanced attacker’s ability to access data through common attack vectors. The degree of impact is dependent on the sensitivity of data being stored and transmitted by the application, and the sophistication of the attacker’s abilities.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Navigate to the following endpoint using a browser: {{URL}}
1. Capture the request using the HTTP interception proxy and review the response
1. Observe that the security headers are not implemented according to best practice

**Proof of Concept (PoC)**

The screenshot below demonstrates the missing header:

{{screenshot}}",The HTTP security header should be set following best practice to prevent common attacks.,unclassified,"https://owasp.org/www-project-secure-headers/, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers#security"
Server Security Misconfiguration - Lack Of Security Headers - X Content Security Policy,"A lack of the HTTP response header for `X-Content-Security-Policy` can lead to sensitive user data being retrieved by an attacker and increases the attack surface for Cross-Site Scripting (XSS) and click-jacking attacks. There are multiple HTTP response headers used in communication between the server and client which can be implemented to improve security against well documented vulnerabilities. For example, the `X-Content-Security-Policy` security header allows admins to permissively control the types of resources allowed to load for a page.

An advanced attacker can leverage a missing `X-Content-Security-Policy` header to launch XSS attacks and execute malicious code in a user’s browser.

**Business Impact**

Not having a `X-Content-Security-Policy` header can lead to reputational damage and indirect financial loss to the business due to an advanced attacker’s ability to access data through a XSS attack. The degree of impact is dependent on the sensitivity of data being transmitted over the wire and the sophistication of the attacker’s abilities.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Navigate to the following endpoint using a browser: {{URL}}
1. Capture the request using the HTTP interception proxy and review the response
1. Observe that no `X-Content-Security-Policy` header is implemented within the HTTP headers

**Proof of Concept (PoC)**

The screenshot below demonstrates the missing header:

{{screenshot}}","# Remediation Advice

The `X-Content-Security-Policy` header is depreciated. It is recommended to use `Content-Security-Policy` only, and to not use both headers as it can create unexpected behavior in browsers.

The `Content-Security-Policy` header should be configured in a way that reduces the attack surface of the application. The CSP header is not set as a catch all value, due to its permissive design. Therefore, It is important to ensure that the CSP heading is not too permissive for the application's needs.",unclassified,"https://owasp.org/www-community/controls/Content_Security_Policy/, https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP/, https://content-security-policy.com/"
Server Security Misconfiguration - Lack Of Security Headers - X Content Type Options,"A lack of the HTTP response header for `X-Content-Type-Options` can lead to sensitive user data being retrieved by an attacker and increases the attack surface for Cross-Site Scripting (XSS) attacks. There are multiple HTTP response headers used in communication between the server and client which can be implemented to improve security against well documented vulnerabilities. For example, the `X-Content-Type-Options` security header is used to ignore the MIME types of content returned from a server.

An advanced attacker can leverage a missing `X-Content-Type-Options` header to leverage MIME type sniffing which can break client-side parsers and can lead to Cross-Site Scripting (XSS) attacks.

**Business Impact**

Not having a `X-Content-Type-Options` header can lead to reputational damage and indirect financial loss to the business due to an advanced attacker’s ability to access data through a XSS attack. The degree of impact is dependent on the sensitivity of data being transmitted over the wire and the sophistication of the attacker’s abilities.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Navigate to the following endpoint using a browser: {{URL}}
1. Capture the request using the HTTP interception proxy and review the response
1. Observe that no `X-Content-Type-Options` header is implemented within the HTTP headers

**Proof of Concept (PoC)**

The screenshot below demonstrates the missing header:

{{screenshot}}","# Recommendations

The `X-Content-Type-Options` header should be set to `nosniff` to block content sniffing. For example:

`X-Content-Type-Options: nosniff`",unclassified,"https://owasp.org/www-project-secure-headers/#x-content-type-options, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options, https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types"
Server Security Misconfiguration - Lack Of Security Headers - Public Key Pins,"A lack of the HTTP response header for `Public-Key-Pins` can lead to sensitive user data being retrieved by an advanced attacker through Person-in-the-Middle (PitM) attacks. There are multiple HTTP response headers used in communication between the server and client which can be implemented to improve security against well documented vulnerabilities. For example, the `Public-Key-Pins` security header is used in legacy versions of browsers to prevent clients from loading reflected XSS attacks.

An advanced attacker can leverage a missing `Public-Key-Pins` header to forge certificates and gain access to data through a PitM attack.

**Business Impact**

Not having a `Public-Key-Pins` header can lead to reputational damage and indirect financial loss to the business due to an advanced attacker’s ability to access data through a MitM attack. The degree of impact is dependent on the sensitivity of data being stored and transmitted by the application, and the sophistication of the attacker’s abilities.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Navigate to the following endpoint using a browser: {{URL}}
1. Capture the request using the HTTP interception proxy and review the response
1. Observe that no `Public-Key-Pins` header is implemented within the HTTP headers

**Proof of Concept (PoC)**

The screenshot below demonstrates the missing header:

{{screenshot}}","The `Public-Key-Pins` header should not be used in modern browsers as it has been deprecated by the `Expect-CT`, which supports the Certificate Transparency framework requirements and allows sites to opt in for reporting.

The `Expect-CT` header has multiple directives which can be set for specific business needs. For more information, please see the following guides:

- <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Public-Key-Pins>
- <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT>",unclassified,
Server Security Misconfiguration - Lack Of Security Headers - Content Security Policy,"A lack of the HTTP response header for Content Security Policy (CSP) can lead to sensitive user data being retrieved by an attacker and increases the attack surface for Cross-Site Scripting (XSS) and click-jacking attacks. There are multiple HTTP response headers used in communication between the server and client which can be implemented to improve security against well documented vulnerabilities. For example, the `Content-Security-Policy` security header allows admins to permissively control the types of resources allowed to load for a page.

An advanced attacker can leverage a missing `Content-Security-Policy` header to launch XSS attacks and execute malicious code in a user’s browser.

**Business Impact**

Not having an `Content-Security-Policy` header can lead to reputational damage and indirect financial loss to the business due to an advanced attacker’s ability to access data through a XSS attack. The degree of impact is dependent on the sensitivity of data being transmitted over the wire and the sophistication of the attacker’s abilities.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Navigate to the following endpoint using a browser: {{URL}}
1. Capture the request using the HTTP interception proxy and review the response
1. Observe that no `Content-Security-Policy` header is implemented within the HTTP headers

**Proof of Concept (PoC)**

The screenshot below demonstrates the missing header:

{{screenshot}}","The `Content-Security-Policy` header should be configured in a way that reduces the attack surface of the application. The CSP header is not set as a catch-all, due to its permissive design. Therefore, It is important to ensure that the CSP heading is not too permissive for the application's needs, and has directives appropriately set.",unclassified,"https://owasp.org/www-community/controls/Content_Security_Policy/, https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP/"
Server Security Misconfiguration - Lack Of Security Headers - Cache Control For A Sensitive Page,"A lack of the HTTP response header for `Cache-Control` can lead to sensitive data being extracted from cached sessions. There are multiple HTTP response headers used in communication between the server and client which can be implemented to improve security against well documented vulnerabilities. For example, the `Cache-Control` security header is used to prevent cached data being accessible.

An advanced attacker can leverage a missing `Cache-Control` header to extract sensitive data from cached sessions in order to build a phishing profile against a target user and launch further attacks.

**Business Impact**

When sensitive data is being stored and transmitted by the application which does not have the `Cache-Control` header, an advanced attacker can access the sensitive data, phish users and cause reputational damage to the business.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Navigate to the following endpoint using a browser: {{URL}}
1. Capture the request using the HTTP interception proxy and review the response
1. Observe that no `Cache-Control` header is implemented within the HTTP headers
1. Close the browser tab and any open sessions
1. View the cache and observe sensitive details are present

**Proof of Concept (PoC)**

The screenshot below demonstrates the missing `Cache-Control` header:

{{screenshot}}

The screenshot below shows the sensitive details present in the cache:

{{screenshot}}","The `Cache-Control` header should be configured in a way that reduces the attack surface of the application. It is important to ensure that the `Cache-Control` heading is not too permissive for the application's needs, and has directives appropriately set such as `max-age`, and `no-store` amongst others. These directives should be set in respect to sensitivity of data being stored and transmitted by the application.",unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control, https://owasp.org/www-project-secure-headers/#cache-control, https://cheatsheetseries.owasp.org/cheatsheets/XS_Leaks_Cheat_Sheet.html#using-the-cache-control-header"
Server Security Misconfiguration - Lack Of Security Headers - Cache Control For A Non Sensitive Page,"A lack of the HTTP response header for `Cache-Control` can lead to sensitive data being extracted from cached sessions. There are multiple HTTP response headers used in communication between the server and client which can be implemented to improve security against well documented vulnerabilities. For example, the `Cache-Control` security header is used to prevent cached data being accessible.

An advanced attacker can leverage a missing `Cache-Control` header to extract non-sensitive data from cached sessions in order to build a phishing profile against a target user and launch further attacks.

**Business Impact**

When data is being stored and transmitted by the application which does not have the `Cache-Control` header, an advanced attacker can access the data, phish users and cause reputational damage to the business. The impact is reduced by the non-sensitive nature of the data. However, if sensitive data is cached the impact to the business and its users is increased.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Navigate to the following endpoint using a browser: {{URL}}
1. Capture the request using the HTTP interception proxy and review the response
1. Observe that no `Cache-Control` header is implemented within the HTTP headers

**Proof of Concept (PoC)**

The screenshot below demonstrates the missing header:

{{screenshot}}","The `Cache-Control` header should be configured in a way that reduces the attack surface of the application. It is important to ensure that the `Cache-Control` heading is not too permissive for the application's needs, and has directives appropriately set such as `max-age`, and `no-store` amongst others. These directives should be set in respect to sensitivity of data being stored and transmitted by the application.",unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control, https://owasp.org/www-project-secure-headers/#cache-control, https://cheatsheetseries.owasp.org/cheatsheets/XS_Leaks_Cheat_Sheet.html#using-the-cache-control-header"
Server Security Misconfiguration - Lack Of Security Headers - X Xss Protection,"A lack of the HTTP response header for `X-XSS-Protection` can lead to sensitive user data being retrieved by an attacker through Cross-Site Scripting (XSS) attacks. There are multiple HTTP response headers used in communication between the server and client which can be implemented to improve security against well documented vulnerabilities. For example, the `X-XSS-Protection` security header is used in legacy versions of Internet Explorer, Safari, and Chrome to prevent clients from loading reflected XSS attacks.

An advanced attacker can leverage a missing `X-XSS-Protection` header to bypass security controls of an application to execute code within a user's browser.

**Business Impact**

Not having a `X-XSS-Protection` header can lead to reputational damage and indirect financial loss to the business due to an advanced attacker’s ability to access data through a XSS attack. The degree of impact is dependent on the sensitivity of data being stored and transmitted by the application, and the sophistication of the attacker’s abilities.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Navigate to the following endpoint using a browser: {{URL}}
1. Capture the request using the HTTP interception proxy and review the response
1. Observe that no `X-XSS-Protection` header is implemented within the HTTP headers

**Proof of Concept (PoC)**

The screenshot below demonstrates the missing header:

{{screenshot}}","The `X-XSS-Protection` header should not be used in modern browsers as it can create XSS vulnerabilities in websites. It has been deprecated by the Content Security Policy (CSP) security header. The CSP header, `Content-Security-Policy`, should be used to prevent XSS attacks.

The `Content-Security-Policy` header should be configured in a way that reduces the attack surface of the application. The CSP header is not set as a catch-all, due to its permissive design. Therefore, It is important to ensure that the CSP heading is not too permissive for the application's needs, and has directives appropriately set.

For older browsers that do not support the CSP header, the `X-XSS-Protection` header should be set to instruct browsers how to filter and block XSS attacks. For example:

`X-XSS-Protection: 1; mode=block`

This directive enables XSS filtering then prevents rendering of the web page if a XXS attack is detected.",unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection, https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy"
Server Security Misconfiguration - Lack Of Security Headers - X Frame Options,"A lack of the HTTP response header for `X-Frame-Options` can lead to sensitive user data being retrieved by an attacker. There are multiple HTTP response headers used in communication between the server and client which can be implemented to improve security against well documented vulnerabilities. For example, the `X-Frame-Options` security header is used to instruct a browser whether it should or should not render an `<iframe>`, `<frame>`, `<embed>`, or `<object>` tag.

An advanced attacker can leverage a missing `X-Frame-Options` header to render an `<iframe>`, `<frame>`, `<embed>`, or `<object>` tag to bypass Same Origin Policy (SOP) and read data, or to exploit a click-jacking attack.

**Business Impact**

Not having an `X-Frame-Options` header can lead to reputational damage and indirect financial loss to the business due to an advanced attacker’s ability to access data through a click-jacking attack, or via bypassing the SOP. The degree of impact is dependent on the sensitivity of data being transmitted over the wire and the sophistication of the attacker’s abilities.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Navigate to the following endpoint using a browser: {{URL}}
1. Capture the request using the HTTP interception proxy and review the response
1. Observe that no `X-Frame-Options` header is implemented within the HTTP headers

**Proof of Concept (PoC)**

The screenshot below demonstrates the missing header:

{{screenshot}}","The `x-frame-options` header should be set to instruct browsers how to handle framing from other domains. The following directives can be used:

- **DENY** - This directive prevents all attempts of a page being displayed in a frame. For example:

    `X-Frame-Options: DENY`

- **SAMEORIGIN** - This directive allows the page to be displayed in a frame only if it originates from the same origin as the page itself. For example:

    `X-Frame-Options: SAMEORIGIN`",unclassified,
Server Security Misconfiguration - Lack Of Security Headers - Strict Transport Security,"A lack of the HTTP response header for Strict Transport Security can lead to sensitive data being transmitted unencrypted and being intercepted while in transit. There are multiple HTTP response headers used in communication between the server and client which can be implemented to improve security against well documented vulnerabilities. For example, the HTTP Strict Transport Security (HSTS) header instructs the website to enforce the use of HTTPS.

By not having a HSTS header in place, the application fails to enforce users to connect to it over an encrypted connection. If an advanced attacker is positioned to intercept or modify a user’s network traffic, they can perform a protocol downgrade attack, a Persons-in-the-Middle (PitM) attack, or hijack a user’s cookies. This aids an advanced attacker in gaining access to the data being sent between the server and client, including the login credentials or application cookies.

**Business Impact**

Not having a HSTS header can lead to reputational damage and indirect financial loss to the business due to an advanced attacker’s access to data over an unencrypted HTTP connection. The degree of impact is dependent on the sensitivity of data being transmitted over the wire.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Navigate to the following endpoint using a browser: {{URL}}
1. Capture the request using the HTTP interception proxy
1. Observe that a HSTS header is not in the response of the HTTP request

**Proof of Concept (PoC)**

The screenshot below demonstrates a lack of HSTS header:

{{screenshot}}","The `Strict-Transport-Security` header should be set to instruct browsers that sites should only be accessed over a HTTPS connection. For example:

`Strict-Transport-Security: max-age=<31536000>`

Here `max-age` is set for a year, measured in seconds. It is recommended that this be set to a large value such as 1 or 2 years. Additionally, the optional directive of `includeSubDomains` can be used to include all subdomains.

For further information, please see:

- <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security>
- <https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html>",unclassified,
Server Security Misconfiguration - Lack Of Security Headers - X Webkit Csp,"A lack of the HTTP response header for `X-Webkit-Content-Security-Policy` can lead to sensitive user data being retrieved by an attacker through Cross-Site Scripting (XSS) attacks. There are multiple HTTP response headers used in communication between the server and client which can be implemented to improve security against well documented vulnerabilities. For example, the `X-Webkit-Content-Security-Policy` security header is used in legacy versions of browsers to prevent clients from loading reflected XSS attacks.

An advanced attacker can leverage a missing `X-Webkit-Content-Security-Policy` header to bypass security controls of an application to execute code within a user's browser.

**Business Impact**

Not having a `X-Webkit-Content-Security-Policy` header can lead to reputational damage and indirect financial loss to the business due to an advanced attacker’s ability to access data through a XSS attack. The degree of impact is dependent on the sensitivity of data being stored and transmitted by the application, and the sophistication of the attacker’s abilities.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Navigate to the following endpoint using a browser: {{URL}}
1. Capture the request using the HTTP interception proxy and review the response
1. Observe that no `X-Webkit-Content-Security-Policy` header is implemented within the HTTP headers

**Proof of Concept (PoC)**

The screenshot below demonstrates the missing header:

{{screenshot}}","The `X-Webkit-Content-Security-Policy` header should not be used in modern browsers as it can create XSS vulnerabilities in websites. It has been deprecated by the Content Security Policy (CSP) security header. The CSP header, `Content-Security-Policy`, should be used to prevent XSS attacks.

The `Content-Security-Policy` header should be configured in a way that reduces the attack surface of the application. The CSP header is not set as a catch-all, due to its permissive design. Therefore, It is important to ensure that the CSP heading is not too permissive for the application's needs, and has directives appropriately set.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html#csp-directives, https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy"
Server Security Misconfiguration - Lack Of Security Headers - Content Security Policy Report Only,"A lack of the HTTP response header for `Content-Security-Policy-Report-Only` can lead to sensitive user data being retrieved by an attacker through Cross-Site Scripting (XSS) and click-jacking attacks without being detected. There are multiple HTTP response headers used in communication between the server and client which can be implemented to improve security against well documented vulnerabilities. For example, the `Content-Security-Policy-Report-Only` security header allows for a report to be generated each time the browser detects a violation from the Content Security Policy (CSP).

An advanced attacker can leverage a missing `Content-Security-Policy-Report-Only` header to launch XSS attacks and execute malicious code in a user’s browser without detection.

**Business Impact**

Not having a `Content-Security-Policy-Report-Only` header can lead to reputational damage and indirect financial loss to the business due to an advanced attacker’s ability to access data undetected. The degree of impact is dependent on the sensitivity of data being transmitted over the wire and the sophistication of the attacker’s abilities.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Navigate to the following endpoint using a browser: {{URL}}
1. Capture the request using the HTTP interception proxy and review the response
1. Observe that no `Content-Security-Policy-Report-Only` header is implemented within the HTTP headers

**Proof of Concept (PoC)**

The screenshot below demonstrates the missing header:

{{screenshot}}","The `Content-Security-Policy-Report-Only` header should be set to include the directive `report-uri` to report violations of the CSP. For example:

`Content-Security-Policy-Report-Only: report-uri; <policy-directive>`

Additionally, the `Content-Security-Policy` header should be configured in a way that reduces the attack surface of the application. The CSP header is not set as a catch all value, due to its permissive design. Therefore, It is important to ensure that the CSP heading is not too permissive for the application's needs.",unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only, https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html#2-content-security-policy-report-only-header, https://owasp.org/www-community/controls/Content_Security_Policy/, https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP/, https://content-security-policy.com/"
Server Security Misconfiguration - Same Site Scripting,"Same-Site Scripting is a Domain Name Server (DNS) misconfiguration on localhost entries that can allow an attacker to execute commands on the same site. An attacker can use Same-Site Scripting in tandem with a Cross-Site-Scripting attack to break the Same Origin Policy and extract state data to route requests to their personal machine.

**Business Impact**

Same-Site Scripting can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Use {{program}} on the {{target}}
1. Observe the following value in the output contains 127.0.0.1 without a trailing `.`:

{{screenshot}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the Same-Site Scripting:

{{screenshot}}","If possible, local host entries should be removed from the nameserver configuration.",unclassified,
Server Security Misconfiguration - Fingerprinting Banner Disclosure,"Fingerprinting is where an attacker identifies the services running on a host due to visible default banners. This information helps an attacker to formulate a list of applicable exploits on a target system.

The application responds with a banner disclosing the type and version of the web server being run. From this information an attacker can determine if the application is vulnerable to known vulnerabilities. Older versions of servers are particularly susceptible to known, version-specific attacks if they do not have up-to-date security patches.

**Business Impact**

Banner disclosures can lead to reputational damage for the business due to a loss in confidence from users who can see that the web server is running on older software. If an attacker is successful in identifying and exploiting a known vulnerability for the identified version of software on this host, this can lead to indirect financial losses and data loss.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Send a request to the endpoint
1. Using the HTTP interception proxy, observe the response, noting the information disclosed about the server:

{{value}}

**Proof of Concept (PoC)**

The screenshot below demonstrates the banner disclosure:

{{screenshot}}","It is recommended to keep servers up-to-date with the latest security patches and software versions. If possible, obscure server information in headers to reduce information disclosure.",unclassified,
Server Security Misconfiguration - Using Default Credentials,"Default credentials are credentials that are set as default by the manufacturer or supplier of hardware and software products. These credentials often have Administrator privileges. An attacker can take advantage of default credentials and login to administrative accounts using wordlists of usernames and passwords found online, which may give them the authority to change the state of the application or users’ accounts.

**Business Impact**

Default credentials can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the application’s security of user accounts. If an attacker successfully guesses default credentials it can lead to user account compromise and data exfiltration.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Enter the username and password combination {{Username:DefaultPassword}}
1. Observe the successful login to an Admin account

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the default credentials:

{{screenshot}}","All default credentials should be changed before deploying the software to the internet. If default credentials are hardcoded, the device should not be exposed to the internet and instead should be behind a firewall.",unclassified,"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials, https://attack.mitre.org/techniques/T0812/"
Server Security Misconfiguration - Email Verification Bypass,"Email verification bypass is where an attacker is able to gain access to the application or system without confirming the email address used to create the account. As a result,  an attacker is able to sign up to the application using email addresses that they don't own. This can lead to multiple fake accounts being created, or accounts being created on behalf of other users. While not a vulnerability within itself, bypassing email verification can lead to social engineering attacks on legitimate users.

**Business Impact**

The impact of this vulnerability can lead to an attacker creating multiple fake accounts, performing fraudulent activities, or exploiting other vulnerabilities on behalf of other users. This could result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Register User Account A
1. Using the HTTP interception proxy, intercept the following request:

```HTTP
{{request}}
```

1. Modify the following parameters:

{{payload}}

1. Forward the request then turn off interception in the proxy
1. Observe that User Account A is activated without email verification.

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","There are a number of best practices involved with implementing email validation, including the following:

- Implement server-side validation for email verification tokens.
- Ensure effective rate limiting controls are in place to prevent automated account creation, potential verification bypass attempts, and email inboxes from being bombarded with emails.
- Ensure that email verification tokens have a suitable expiring time and cannot be reused.",unclassified,
Server Security Misconfiguration - Waf Bypass,"A Web Application Firewall (WAF) protects applications from attacks such as Cross-Site Scripting (XSS), SQL injection, and malicious strings using pattern matching and traffic analysis. Some applications will completely rely on WAFs as their primary defense. By bypassing the WAF, an attacker can gain direct access to an application’s server via a specifically crafted payload.

**Business Impact**

WAF bypass can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the application’s security of user accounts. If an attacker successfully gains direct access to the server it can lead to user account compromise and data exfiltration.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Access the application by sending the following payload to the endpoint {{value}}:

{{payload}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the WAF bypass:

{{screenshot}}","Deploy WAFs following best practices and ensure it is configured to protect the web application from common exploits. Additionally, enable logging and monitoring of traffic.",unclassified,
Server Security Misconfiguration - Waf Bypass - Direct Server Access,"A Web Application Firewall (WAF) protects applications from attacks such as Cross-Site Scripting (XSS), SQL injection, and malicious strings using pattern matching and traffic analysis. Some applications will completely rely on WAFs as their primary defense. By bypassing the WAF, an attacker can gain direct access to an application’s server via a specifically crafted payload.

**Business Impact**

WAF bypass can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the application’s security of user accounts. If an attacker successfully gains direct access to the server it can lead to user account compromise and data exfiltration.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Access the application by sending the following payload to the endpoint {{value}}:

{{payload}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the WAF bypass:

{{screenshot}}","Deploy WAFs following best practices and ensure it is configured to protect the web application from common exploits. Additionally, enable logging and monitoring of traffic.",unclassified,
Server Security Misconfiguration - Unsafe File Upload,"Unsafe file uploads occur when the web server fails to sufficiently validate the file’s size, type, name, contents, or what restrictions are placed on the file once it has been successfully uploaded. The application fails to validate files that are uploaded, allowing an attacker to upload unsafe files to the web server and gain access to folders in a directory that are not intended to be accessed.

**Business Impact**

Unsafe file upload can lead to reputational damage for the business due to a loss in confidence from users who are attempting to perform legitimate actions within the application. It can also lead to indirect financial loss due to an attacker reading or manipulating files on the web server.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. With the HTTP intercept proxy turned on, use a browser to navigate to: {{URL}}
1. Intercept the request in the HTTP intercept proxy:

```HTTP
{{Request}}
```

1. Change the following parameter to append a different value to the extension, as seen below:

```HTTP
{{Request}}
```

1. Resend the request

**Proof of Concept (PoC)**

The screenshot below demonstrates the full exploit:

{{screenshot}}","There is no single technique to prevent unsafe file uploads. However, implementing the right combination of defensive measures within the application will prevent or limit the impact. Some best practices include the following:

- Allow only specific file types to be uploaded which are dictated by business functionality
- Filter and check all content uploaded for viruses. Everything that does not pass strict validation should be discarded
- Set a minimum and maximum file size and naming length, ensuring that only alpha-numeric characters are accepted and that only a single period is used to to designate between the file name and the extension type.
- Don’t display the path of the uploaded file to the end users",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html, https://cwe.mitre.org/data/definitions/434.html"
Server Security Misconfiguration - Unsafe File Upload - No Size Limit,"Unsafe file uploads occur when the web server fails to sufficiently validate the file’s size, type, name, contents, or what restrictions are placed on the file once it has been successfully uploaded. The application fails to validate the size of files that are uploaded. An attacker can serve a Denial of Service (DoS) to the application by uploading large files to the server as there is no file size limit. This may cause outages and slowdowns.

**Business Impact**

Unsafe file upload can lead to reputational damage for the business due to a loss in confidence from users who are attempting to perform legitimate actions within the application. It can also lead to indirect financial loss due to the downtime of  the web server.

**Steps to Reproduce**

1. Generate a large file using: {{command}}
1. Navigate to file upload functionality at: {{URL}}
1. Upload the large file generated in the first step

**Proof of Concept (PoC)**

The screenshot below demonstrates the full exploit:

{{screenshot}}","There is no single technique to prevent unsafe file uploads. However, implementing the right combination of defensive measures within the application will prevent or limit the impact. Some best practices include the following:

- Allow only specific file types to be uploaded which are dictated by business functionality
- Filter and check all content uploaded for viruses. Everything that does not pass strict validation should be discarded
- Set a minimum and maximum file size and naming length, ensuring that only alpha-numeric characters are accepted and that only a single period is used to to designate between the file name and the extension type.
- Don’t display the path of the uploaded file to the end users",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html, https://cwe.mitre.org/data/definitions/434.html"
Server Security Misconfiguration - Unsafe File Upload - No Antivirus,"Unsafe file uploads occur when the web server fails to sufficiently validate the file’s size, type, name, contents, or what restrictions are placed on the file once it has been successfully uploaded. The application fails to check if files contain viruses or viral signatures. Therefore, an attacker can host malicious files on the server and serve them to victims under the same domain.

**Business Impact**

Unsafe file upload can lead to reputational damage for the business due to a loss in confidence from users who are attempting to perform legitimate actions within the application. It can also lead to indirect financial loss due to the downtime of  the web server.

**Steps to Reproduce**

1. Generate a malicious file using: {{command}}
1. Navigate to file upload functionality at: {{URL}}
1. Upload the large file generated in the first step

**Proof of Concept (PoC)**

The screenshot below demonstrates the full exploit:

{{screenshot}}","There is no single technique to prevent unsafe file uploads. However, implementing the right combination of defensive measures within the application will prevent or limit the impact. Some best practices include the following:

- Allow only specific file types to be uploaded which are dictated by business functionality
- Filter and check all content uploaded for viruses. Everything that does not pass strict validation should be discarded
- Set a minimum and maximum file size and naming length, ensuring that only alpha-numeric characters are accepted and that only a single period is used to to designate between the file name and the extension type.
- Don’t display the path of the uploaded file to the end users",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html, https://cwe.mitre.org/data/definitions/434.html"
Server Security Misconfiguration - Unsafe File Upload - File Extension Filter Bypass,"Unsafe file uploads occur when the web server fails to sufficiently validate the file’s size, type, name, contents, or what restrictions are placed on the file once it has been successfully uploaded. The application fails to validate the extension type of files that are uploaded, allowing an attacker to upload unsafe files to the web server which can be sent to and executed by users.

**Business Impact**

Unsafe file upload can lead to reputational damage for the business due to a loss in confidence from users who are attempting to perform legitimate actions within the application. It can also lead to indirect financial loss due to an attacker reading or manipulating files on the web server.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. With the HTTP intercept proxy turned on, use a browser to navigate to: {{URL}}
1. Intercept the request in the HTTP intercept proxy:

```HTTP
{{Request}}
```

1. Change the following parameter to append a different value to the extension, as seen below:

```HTTP
{{Request}}
```

1. Resend the request

**Proof of Concept (PoC)**

The screenshot below demonstrates the full exploit:

{{screenshot}}","There is no single technique to prevent unsafe file uploads. However, implementing the right combination of defensive measures within the application will prevent or limit the impact. Some best practices include the following:

- Allow only specific file types to be uploaded which are dictated by business functionality
- Filter and check all content uploaded for viruses. Everything that does not pass strict validation should be discarded
- Set a minimum and maximum file size and naming length, ensuring that only alpha-numeric characters are accepted and that only a single period is used to to designate between the file name and the extension type.
- Don’t display the path of the uploaded file to the end users",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html, https://cwe.mitre.org/data/definitions/434.html"
Server Security Misconfiguration - Server Side Request Forgery Ssrf,"Server-side request forgery (SSRF) is a vulnerability that exploits the trust relationship between a server and an application, or other backend systems. An attacker can take advantage of this trust to forge server-side traffic and make HTTP requests to internal domains. A SSRF vulnerability was found in this application which allows an attacker to perform a request to an internally networked resource, which is considered high impact.

Server-side request forgery (SSRF) is a vulnerability that exploits the trust relationship between a server and an application, or other backend systems. An attacker can take advantage of this trust to forge server-side traffic and make HTTP requests to internal or external domains. A SSRF vulnerability was found in this application which allows an attacker to make requests to an unintended location within the application.

**Business Impact**

SSRF can lead to data theft and through an attacker accessing, deleting, or modifying data from within the application via their access to server-side systems. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Forward the following payload to the endpoint:

```HTTP
{{request}}
```

1. Observe the sensitive response

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to stop SSRF from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of SSRF. Some best practices include the following:

- Within the application layer, use allow lists for input validation
- Within the network layer, apply segregation principles to limit the network access of the application to only areas of the network it needs to connect to
- Validate any external domain or IP address that the application attempts send a request to
- Display generic error handling messages to the client when an error occurs, and for all error types. E.g. When invalid data is received and when a request fails server-side.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html, https://portswigger.net/web-security/ssrf, https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/"
Server Security Misconfiguration - Server Side Request Forgery Ssrf - External Dns Query Only,"Server-side request forgery (SSRF) is a vulnerability that exploits the trust relationship between a server and an application, or other backend systems. An attacker can take advantage of this trust to forge server-side traffic and make HTTP requests to external domains. An external SSRF vulnerability was found in this application which allows an attacker to trigger external DNS-based interactions from the application.

**Business Impact**

External DNS-only SSRF can result in the application and internal network being less secure, as an attacker is able to use the known DNS queries to mount further attacks.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Forward the following payload to the endpoint:

```HTTP
{{request}}
```

1. Observe DNS interaction in the HTTP interception proxy

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to stop SSRF from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of SSRF. Some best practices include the following:

- Within the application layer, use allow lists for input validation
- Within the network layer, apply segregation principles to limit the network access of the application to only areas of the network it needs to connect to
- Validate any external domain or IP address that the application attempts send a request to
- Display generic error handling messages to the client when an error occurs, and for all error types. E.g. When invalid data is received and when a request fails server-side.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html, https://portswigger.net/web-security/ssrf, https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/"
Server Security Misconfiguration - Server Side Request Forgery Ssrf - External Low Impact,"Server-side request forgery (SSRF) is a vulnerability that exploits the trust relationship between a server and an application, or other backend systems. An attacker can take advantage of this trust to forge server-side traffic and make HTTP requests to external domains. An external SSRF vulnerability was found in this application which allows an attacker to query external services from the application.

**Business Impact**

External SSRF can lead to data theft and through an attacker accessing, deleting, or modifying data from within the application via their access to server-side systems. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Forward the following payload to the endpoint:

```HTTP
{{request}}
```

1. Observe HTTP and DNS interaction in the HTTP interception proxy

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","TThere is no single technique to stop SSRF from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of SSRF. Some best practices include the following:

- Within the application layer, use allow lists for input validation
- Within the network layer, apply segregation principles to limit the network access of the application to only areas of the network it needs to connect to
- Validate any external domain or IP address that the application attempts send a request to
- Display generic error handling messages to the client when an error occurs, and for all error types. E.g. When invalid data is received and when a request fails server-side.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html, https://portswigger.net/web-security/ssrf, https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/"
Server Security Misconfiguration - Server Side Request Forgery Ssrf - Internal High Impact,"Server-side request forgery (SSRF) is a vulnerability that exploits the trust relationship between a server and an application, or other backend systems. An attacker can take advantage of this trust to forge server-side traffic and make HTTP requests to internal domains. A SSRF vulnerability was found in this application which allows an attacker to perform a request to an internally networked resource, which is considered high impact.

**Business Impact**

SSRF can lead to data theft and through an attacker accessing, deleting, or modifying data from within the application via their access to server-side systems. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Forward the following payload to the endpoint:

```HTTP
{{request}}
```

1. Observe the sensitive response

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to stop SSRF from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of SSRF. Some best practices include the following:

- Within the application layer, use allow lists for input validation
- Within the network layer, apply segregation principles to limit the network access of the application to only areas of the network it needs to connect to
- Validate any external domain or IP address that the application attempts send a request to
- Display generic error handling messages to the client when an error occurs, and for all error types. E.g. When invalid data is received and when a request fails server-side.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html, https://portswigger.net/web-security/ssrf, https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/"
Server Security Misconfiguration - Server Side Request Forgery Ssrf - Internal Scan And Or Medium Impact,"Server-side request forgery (SSRF) is a vulnerability that exploits the trust relationship between a server and an application, or other backend systems. An attacker can take advantage of this trust to forge server-side traffic and make HTTP requests to internal or external domains. A SSRF vulnerability was found in this application which allows an attacker to perform arbitrary internal requests and internal network scanning.

**Business Impact**

SSRF can lead to data theft and through an attacker accessing, deleting, or modifying data from within the application via their access to server-side systems. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Forward the following payload to the endpoint:

```HTTP
{{request}}
```

1. Capture the request in the HTTP interception proxy when “Submit” is clicked
1. Send the request to intruder
1. Set intruder up to replace the following parameter value with all IP addresses in the 10.0.0.0/16 range

 {{parameter}}

1. Observe that active internal web hosts respond with {{X}}, while hosts that do not have web hosts respond with {{Y}}

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to stop SSRF from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of SSRF. Some best practices include the following:

- Within the application layer, use allow lists for input validation
- Within the network layer, apply segregation principles to limit the network access of the application to only areas of the network it needs to connect to
- Validate any external domain or IP address that the application attempts send a request to
- Display generic error handling messages to the client when an error occurs, and for all error types. E.g. When invalid data is received and when a request fails server-side.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html, https://portswigger.net/web-security/ssrf, https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/"
Server Security Misconfiguration - Captcha,"A Computer Automated Public Turing Test test to tell Computers and Humans Apart (CAPTCHA) allows applications to tell whether a user is a human or a robot. A CAPTCHA can be bypassed when the implementation or its workflow is misconfigured, or when software can be used to bypass the challenge.

An attacker can bypass the CAPTCHA form and spam the website with queries for registration, login, as well as spam support teams with faulty requests.

**Business Impact**

CAPTCHA misconfiguration can lead to reputational damage for the business due to a loss in confidence and trust by users. It can also result in indirect financial loss to the business through the extra workloads placed on internal teams to deal with spam from an attacker.

**Steps to Reproduce**

1. Navigate to the following endpoint with CAPTCHA: {{value}}
1. Use {{software}} to bypass CAPTCHA

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the CAPTCHA bypass:

{{screenshot}}",The configuration of CAPTCHAs should be thoroughly tested for design and implementation flaws to prevent an attacker bypassing the CAPTCHA.,unclassified,"https://cwe.mitre.org/data/definitions/804.html, https://owasp.org/www-project-automated-threats-to-web-applications/assets/oats/EN/OAT-009_CAPTCHA_Defeat"
Server Security Misconfiguration - Captcha - Brute Force,"A Computer Automated Public Turing Test test to tell Computers and Humans Apart (CAPTCHA) allows applications to tell whether a user is a human or a robot. A CAPTCHA can be bypassed when the implementation or its workflow is misconfigured, or when software can be used to bypass the challenge.

An attacker can leverage scripts and tools to bypass the CAPTCHA and make requests to critical functionality without a rate limit. Forms that are often firewalled by a CAPTCHA can also deny service for users when executing multiple read and write functions from the database.

**Business Impact**

CAPTCHA misconfiguration can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Navigate to the following endpoint with CAPTCHA: {{value}}
1. Use {{software}} to bypass CAPTCHA

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the CAPTCHA being bruteforced:

{{screenshot}}",The configuration of CAPTCHAs should be thoroughly tested for design and implementation flaws to prevent an attacker bypassing the CAPTCHA.,unclassified,"https://cwe.mitre.org/data/definitions/804.html, https://owasp.org/www-project-automated-threats-to-web-applications/assets/oats/EN/OAT-009_CAPTCHA_Defeat"
Server Security Misconfiguration - Captcha - Missing,"A Computer Automated Public Turing Test test to tell Computers and Humans Apart (CAPTCHA) allows applications to tell whether a user is a human or a robot. A CAPTCHA can be bypassed when the implementation or its workflow is misconfigured, or when software can be used to bypass the challenge.

Due to the absence of a CAPTCHA, an attacker can leverage scripts and tools to make requests to critical functionality without a rate limit. Forms that are often firewalled by a CAPTCHA can also deny service for users when executing multiple read and write functions from the database.

**Business Impact**

A missing CAPTCHA can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Navigate to the following endpoint with CAPTCHA: {{value}}
1. Observe that CAPTCHA is missing for the following critical functionality: {{value}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the missing CAPTCHA:

{{screenshot}}",A CAPTCHA should be implemented for this page. The configuration of CAPTCHAs should be thoroughly tested for design and implementation flaws to prevent an attacker bypassing the CAPTCHA.,unclassified,"https://cwe.mitre.org/data/definitions/804.html, https://owasp.org/www-project-automated-threats-to-web-applications/assets/oats/EN/OAT-009_CAPTCHA_Defeat"
Server Security Misconfiguration - Captcha - Implementation Vulnerability,"A Computer Automated Public Turing Test test to tell Computers and Humans Apart (CAPTCHA) allows applications to tell whether a user is a human or a robot. A CAPTCHA can be bypassed when the implementation or its workflow is misconfigured, or when software can be used to bypass the challenge.

An attacker can leverage scripts and tools to bypass the CAPTCHA and make requests to critical functionality without a rate limit. Forms that are often firewalled by a CAPTCHA can also deny service for users when executing multiple read and write functions from the database.

**Business Impact**

CAPTCHA misconfiguration can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Navigate to the following endpoint with CAPTCHA: {{value}}
1. Use {{software}} to bypass CAPTCHA

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the CAPTCHA being bypassed:

{{screenshot}}",The configuration of CAPTCHAs should be thoroughly tested for design and implementation flaws to prevent an attacker bypassing the CAPTCHA.,unclassified,"https://cwe.mitre.org/data/definitions/804.html, https://owasp.org/www-project-automated-threats-to-web-applications/assets/oats/EN/OAT-009_CAPTCHA_Defeat"
Server Security Misconfiguration - Misconfigured Dns,"Domain Name System (DNS) misconfigurations can result in internal information being leaked publicly. The DNS misconfiguration identified on the endpoints allows an attacker to view the internal network structure of the domain, or transfer the zone file, for example. From here, the attacker can use this information to form other attacks on the network and its users.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Login to the application at: {{url}}
1. Use {{software}} to gather information about the DNS


**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the misconfigured DNS:

{{screenshot}}","The DNS server should be configured to only reveal a limited amount of information needed to perform necessary tasks. This includes but is not limited to configuring to only accept zone transfers from a trusted list of IP addresses, and enabled appropriate records, such as CAA record. It is also best practice to clearly define and implement standard processes for the provisioning and deprovisioning of hosts. For example, ensure that all steps are performed closely together. When provisioning, claim the virtual host first, and create the DNS records last. When deprovisioning, remove the DNS records first.",unclassified,
Server Security Misconfiguration - Misconfigured Dns - Subdomain Takeover,"A subdomain takeover is when a misconfigured Domain Name System (DNS) record is re-registered to an endpoint owned by an attacker. An attacker is then able to redirect users to the endpoint and capture data such as cookies and credentials, perform Cross-Site Scripting (XSS) attacks, and potentially take over accounts in the legitimate application.

A subdomain takeover vulnerability was identified which could impact the reputation and brand of the business. An attacker can register a subdomain on behalf of the target domain and use it for spamming and phishing attacks.

**Business Impact**

Subdomain takeover can lead to data theft and indirect financial loss through the attacker’s ability to interact with legitimate users. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Browse to the URL `takeover.inscope.com/proof.txt`
1. You will see a Bugcrowd Username which matches the HTML comment in the Proof of Concept

**Proof of Concept (PoC)**

The following screenshot show the success of a subdomain takeover:
>
> {{screenshot}}","There is no single technique to stop subdomain takeover from occurring. However, implementing the right combination of defensive measures will prevent and limit the impact of subdomain takeover. Some best practices include the following:

- Ensure that the business has an inventory of all domains and hosting providers and that this inventory is maintained and updated regularly to prevent dangling records.
- Clearly defined and implemented standard processes for the provisioning and deprovisioning of hosts. For example, ensure that all steps are performed closely together. When provisioning, claim the virtual host first, and create the DNS records last. When deprovisioning, remove the DNS records first.",unclassified,"https://www.bugcrowd.com/glossary/subdomain-takeover/, https://developer.mozilla.org/en-US/docs/Web/Security/Subdomain_takeovers, https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/10-Test_for_Subdomain_Takeover"
Server Security Misconfiguration - Misconfigured Dns - Zone Transfer,"A DNS Zone Transfer exports the contents of the zone file from one DNS to another. A Zone Transfer in {{target}} allows an attacker to uncover hidden attack surfaces such as IP addresses, subdomains, and DNS records.

**Business Impact**

This vulnerability can result in reputational damage and indirect financial loss to the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Use {{software}} to gathering information about the DNS
1. Identify the name server: {{value}}
1. Request a zone transfer for the name server by sending the following command:

{{value}}

**Proof of Concept (PoC)**

The following screenshot show the full exploit:

{{screenshot}}",The DNS server should be configured to only accept zone transfers from a trusted list of IP addresses.,unclassified,
Server Security Misconfiguration - Misconfigured Dns - Missing Caa Record,"Certificate Authority Authorization (CAA) allows an owner or DNS resource holder to specify the types of Certificate Authorities (CA) allowed to issue certificates for the domain. The application is missing a CAA record which can allow an attacker to issue certificates on behalf of the DNS resource owner for their domains.

**Business Impact**

This vulnerability can result in reputational damage and indirect financial loss to the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Use {{software}} to gathering information about the DNS
1. Observe the missing CAA record in the output:

{{value}}

**Proof of Concept (PoC)**

The following screenshot show the DNS resource record and CAA rule:

{{screenshot}}",It is recommended to enable an appropriate CAA record for the DNS server.,unclassified,
Server Security Misconfiguration - Username Enumeration,"Username enumeration is a vulnerability where an attacker is able to confirm or guess correct usernames through a difference in the server’s response to input. It often occurs on login, registration, and password reset pages. This application has a username enumeration vulnerability which allows an attacker to brute force passwords, stuff credentials, or for further attacks such as social engineering.

**Business Impact**

Username enumeration can result in reputational damage for the business through the impact to customers’ trust in the application’s security of user accounts. If an attacker is able to chain this vulnerability with another it can lead to user account compromise and data exfiltration.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Attempt to authenticate
1. Observe the response from the server indicating that the username/email is valid or not

**Proof of Concept (PoC)**

The screenshot below shows the response from the server:

{{screenshot}}","The server should respond to valid and invalid authentication attempts with the same message. For example, `Login failed. Username or Password invalid.`

The server should also take the same amount of time to respond to a valid or invalid request so that an attacker can not use this to distinguish between the two.",unclassified,
Server Security Misconfiguration - Username Enumeration - Brute Force,"The ability to bruteforce usernames in a web service can allow an attacker to gain an insight into the user base of a service, helping them identify accounts and test for password reuse, endangering the users accounts for the service. A malicious attacker can leverage user enumeration to generate a potential list of usernames for use in phishing or brute force campaigns.

**Business Impact**

Username enumeration can result in reputational damage for the business through the impact to customers’ trust in the application’s security of user accounts. If an attacker is able to chain this vulnerability with another it can lead to user account compromise and data exfiltration.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Fill in the form and send the request
1. Intercept request in the HTTP interception proxy
1. Using {{command}} send multiple requests by {{action}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the response from the server:

{{screenshot}}","The server should respond to valid and invalid authentication attempts with the same message. For example, `Login failed. Username or Password invalid.`

The server should also take the same amount of time to respond to a valid or invalid request so that an attacker can not use this to distinguish between the two.",unclassified,
Server Security Misconfiguration - Exposed Admin Portal,"Administrative portals for an application allow Admins to login and modify how the application runs and the content it serves. This can include adding, removing, updating, or creating new content, account provisioning, data manipulation, and other configuration changes.

An attacker who is able to identify an exposed admin portal can then brute force credentials. If they successfully login, they can access the administrative interface and carry out activities with Admin privileges.

**Business Impact**

Exposed admin portals can lead to indirect financial loss due to the attacker’s ability to modify, remove or create data within the admin portal. It can also cause reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Use a browser to navigate to the admin portal via the URL: {{URL}}
1. The following are the functionalities of the admin portal:

{{value}}

1. Execute {{action}} on the admin portal

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the exposed admin portal:

{{screenshot}}","If possible, remove the admin portal from the internet. If remote login is required, place the admin portal behind a firewall and keep software up to date as part of a patch management lifecycle. It is also best practice to use strong passwords and multi-factor authentication for admin portals. To secure admin portals further, limit the amount of login attempts and limit access to a particular set of IP addresses.",unclassified,
Server Security Misconfiguration - Exposed Admin Portal - To Internet,"Administrative portals for an application allow Admins to login and modify how the application runs and the content it serves. This can include adding, removing, updating, or creating new content, account provisioning, data manipulation, and other configuration changes.

An attacker who is able to identify an exposed admin portal can then brute force credentials. If they successfully login, they can access the administrative interface and carry out activities with Admin privileges.

**Business Impact**

Exposed admin portals can lead to indirect financial loss due to the attacker’s ability to modify, remove or create data within the admin portal. It can also cause reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Use a browser to navigate to the admin portal via the URL: {{URL}}
1. The following are the functionalities of the admin portal:

{{value}}

1. Execute {{action}} on the admin portal

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the exposed admin portal:

{{screenshot}}","If possible, remove the admin portal from the internet. If remote login is required, place the admin portal behind a firewall and keep software up to date as part of a patch management lifecycle. It is also best practice to use strong passwords and multi-factor authentication for admin portals. To secure admin portals further, limit the amount of login attempts and limit access to a particular set of IP addresses.",unclassified,
Server Security Misconfiguration - Bitsquatting,"Bitsquatting is the act of registering domains with one bit flipped from the original domain name. This allows an attacker to hijack traffic from known domains via DNS queries from accidental key presses, as well as misconfigurations on hardware processing the queries. Bitflipping domains can allow an attacker to serve malicious content and collect data on behalf of the targeted application in the form of HTTP requests, binary data, and other sensitive data.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Register domain with one bitflipped e.g. Bugcrowd.com -> eugcrowd.com
1. {{action}} to collect data on the bitflipped domain
1. Notice that the following queries are captured by the bitflipped domain:

{{screenshot}}

**Proof of Concept (PoC)**

The screenshot below demonstrates the bitsquatting:

{{screenshot}}",It is recommended to use Subresource Integrity (SRI) to verify that the resources loaded for the client are delivered without alteration. This is achieved by the use of a cryptographic hash.,unclassified,"https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity, https://capec.mitre.org/data/definitions/611.html"
Server Security Misconfiguration - Rfd,"Reflected File Download (RFD) occurs when a user is forced to download a malicious file due to an injection vulnerability in URLs where content between two semi-colons is considered by the browser to be a file name and isn’t properly handled.

An attacker can use RFD within this application to force users to download malicious files on behalf of the domain and execute them to launch commands on their personal computers.

**Business Impact**

RFD can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Append the URL with the following: {{payload}}
1. Observe that it forces a download

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the RFD:

{{screenshot}}",It is recommended to implement security headers for APIs as well as CSRF tokens. All user input should be validated before it is processed by the system.,unclassified,
Server Security Misconfiguration - Path Traversal,"Path traversal uses a server misconfiguration to access hidden files and directories that are stored on the served web application. This can include sensitive operating files, code and data that runs the application, or in some cases, user credentials.

An attacker can leverage the path traversal vulnerability in this application to gain access to system files in a folder of a directory that is not intended for public access.

**Business Impact**

Path traversal can lead to reputational damage for the business due to a loss in confidence and trust by users. It can also result in data theft and indirect financial losses to the business through the costs of notification and rectifying and breached PII data if an attacker can successfully exfiltrate user data.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Browse to the URL {{value}}
1. Change {{parameter}} to {{value}}
1. It’s now possible to view a new directory that is not intended to be viewed

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the path traversal:

{{screenshot}}","It is recommended to not pass user supplied input to filesystems of the application or API. All user input should be validated before it is processed by the system.

For further information, please see the following resource:
<https://owasp.org/www-community/attacks/Path_Traversal>",unclassified,
Server Security Misconfiguration - Lack Of Password Confirmation,"User accounts are more susceptible to account takeover when there is no password confirmation on certain actions. For example, change of email address, change of password, management of Multi-Factor Authentication details, and account deletion. The application lacks password confirmation which could be abused by an attacker who has access to the user’s account (eg. a public computer the user has not logged out of). From here, the attacker could make permanent changes to the user’s account without having to provide a password.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Alter the account
1. Intercept the request in a Web Proxy
1. Adjust and forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe that no password confirmation is required

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the lack of password confirmation:

{{screenshot}}",It’s recommended to include the use of a password confirmation from users upon changes to their account to ensure that the requests are made by the legitimate user.,unclassified,
Server Security Misconfiguration - Lack Of Password Confirmation - Delete Account,"User accounts are more susceptible to account takeover when there is no password confirmation on certain actions. For example, change of email address, change of password, management of Multi-Factor Authentication details, and account deletion.

The application lacks password confirmation on the delete account function which could be abused by an attacker who has access to the user’s account (eg. a public computer the user has not logged out of). From here the attacker could delete a user’s account.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Use delete account functionality
1. Intercept the request in a Web Proxy
1. Adjust and forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe that no password confirmation is required

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the lack of password confirmation when using the delete account function:

{{screenshot}}",It’s recommended to include the use of a password confirmation from users upon changes to their account to ensure that the requests are made by the legitimate user.,unclassified,
Server Security Misconfiguration - Lack Of Password Confirmation - Change Password,"User accounts are more susceptible to account takeover when there is no password confirmation on certain actions. For example, change of email address, change of password, management of Multi-Factor Authentication details, and account deletion.

The application lacks password confirmation on the change password function which could be abused by an attacker who has access to the user’s account (eg. a public computer the user has not logged out of). From here the attacker could change the account password to one they control. This gives the attacker control over functionality of a user’s account.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Use change password functionality
1. Intercept the request in a Web Proxy
1. Adjust and forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe that no password confirmation is required

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the lack of password confirmation when changing the password:

{{screenshot}}","It’s recommended to include the use of a password confirmation from users upon changes to their account, including the change of email address, to ensure that the requests are made by the legitimate user.",unclassified,
Server Security Misconfiguration - Lack Of Password Confirmation - Manage Two Fa,"User accounts are more susceptible to account takeover when there is no password confirmation on certain actions. For example, change of email address, change of password, management of Multi-Factor Authentication (MFA) details, and account deletion.

The application lacks password confirmation on the management of MFA which could be abused by an attacker who has access to the user’s account (eg. a public computer the user has not logged out of). From here the attacker could set up MFA for the account using an email or phone number they control.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Set up MFA
1. Intercept the request in a Web Proxy
1. Adjust and forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe that no password confirmation is required

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the lack of password confirmation when setting up MFA:

{{screenshot}}",It’s recommended to include the use of a password confirmation from users upon changes to their account to ensure that the requests are made by the legitimate user.,unclassified,
Server Security Misconfiguration - Lack Of Password Confirmation - Change Email Address,"User accounts are more susceptible to account takeover when there is no password confirmation on certain actions. For example, change of email address, change of password, management of Multi-Factor Authentication details, and account deletion.

The application lacks password confirmation on the change email function which could be abused by an attacker who has access to the user’s account (eg. a public computer the user has not logged out of). From here the attacker could change the account email to one they control. This gives the attacker control over any functionality that leverages email which they can use to further exploit a user’s account.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Use change email address functionality
1. Intercept the request in a Web Proxy
1. Adjust and forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe that no password confirmation is required

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the lack of password confirmation when changing the email address:

{{screenshot}}","It’s recommended to include the use of a password confirmation from users upon changes to their account, including the change of email address, to ensure that the requests are made by the legitimate user.",unclassified,
Server Security Misconfiguration - Software Package Takeover,"Software package takeover is where an attacker is able to gain control of software packages or dependencies used by an application by hijacking ownership or exploiting weak security controls in package repositories. This control allows the attacker to modify the package, potentially injecting malicious code or making other unauthorized changes. This can in turn have downstream affects on the web application.

**Business Impact**

This vulnerability can lead to the injection of malicious code, unauthorized access, or compromise of the application and its data. It can also result in reputational damage, financial losses, and legal liabilities. The severity of the impact to the business is dependent on the nature of the compromised package, its use within the application, and the attacker's ability to modify or inject code.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
2. Identify the software packages or dependencies used by the application.
3. Observe that the software package has outdated dependencies or unmaintained packages.
4. Demonstrate the ability to inject malicious code or take over the package.
5. Observe the following downstream affects on the target application:

{{screenshot}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","There are a number of best practices recommended to prevent software package takeover, including the following:

- Implement dependency management tools and practices to manage and update software dependencies on a regular basis.
- Implement that package verification mechanisms that ensure the authenticity and integrity of software packages, such as cryptographic signatures used is Subresource integrity checks.
- Ensure that package repositories are monitored regularly for changes to ownership, unusual activities, and security alerts for dependencies.",unclassified,
Server Security Misconfiguration - Directory Listing Enabled,"Web servers can list the contents of directories which do not have an index page. This increases the exposure of data which are not intended to be accessed. An attacker can quickly identify resources of a specific path or gain access to sensitive data stored in the directory.

Vulnerability Specifics to the Application:

Sensitive data was exposed on {{target}} by {{action}}.

**Business Impact**

Depending on the type of data found in the directory listing, exposure of this information could lead to financial loss and reputational damage to the company and their users.

**Steps to Reproduce**

1. Using {{browser-used}}, navigate to the following URL(s) to find the following directory indexing is enabled:

{{value}}


**Proof of Concept (PoC)**

The image(s) below demonstrates the information found:

{{screenshot}","The server should be configured to not enable directory listings by default. Additionally, important directories and files should have strong authorization requirements.

It is recommended that all servers are managed through a repeatable configuration process which covers server hardening, updates, security headers, and segmentation. A regularly scheduled verification process should be utilized to test the effectiveness of the configurations and settings.",unclassified,
Server Security Misconfiguration - Directory Listing Enabled - Sensitive Data Exposure,"Sensitive data can be exposed by web servers which list the contents of directories that do not have an index page, which increases the exposure of files that are not intended to be accessed. Within this application, sensitive data has been exposed through a directory listing being enabled. This allows an attacker to quickly identify resources of a specific path, or gain access to data stored in the directory by browsing to the directory listing.

**Business Impact**

Data exposure could result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in the directory listing.

**Steps to Reproduce**

1. Using a browser, navigate to the following URL to find that directory listing is enabled:

{{URL}}

**Proof of Concept (PoC)**

The screenshot below demonstrates the sensitive data found:

{{screenshot}}","The server should be configured to not enable directory listings by default. Additionally, important directories and files should have strong authorization requirements.

It is recommended that all servers are managed through a repeatable configuration process which covers server hardening, updates, security headers, and segmentation. A regularly scheduled verification process should be utilized to test the effectiveness of the configurations and settings.",unclassified,
Server Security Misconfiguration - Directory Listing Enabled - Non Sensitive Data Exposure,"Web servers can list the contents of directories that do not have an index page, which increases the exposure of data that is not intended to be accessed. There is a directory listing enabled for this application that exposes non-sensitive data. An attacker can quickly identify resources of specific paths and gain access to data stored in the directory that could be used to build further attacks on the application.

**Business Impact**

Depending on the type of data found in the directory listing, exposure of this information could lead to indirect financial loss and reputational damage.

**Steps to Reproduce**

1. Using {{browser-used}}, navigate to the following URL(s) to find the following directory indexing is enabled:

{{value}}

1. The non-sensitive information was discovered by performing {{action}}
1. The following sensitive data was discovered:

{{sensitive-data-type(s)}}

**Proof of Concept (PoC)**

An attacker can leverage this non-sensitive data to {{action}}. The image(s) below demonstrates the information found:

{{screenshot}}","The server should be configured to not enable directory listings by default. Additionally, important directories and files should have strong authorization requirements.

It is recommended that all servers are managed through a repeatable configuration process which covers server hardening, updates, security headers, and segmentation. A regularly scheduled verification process should be utilized to test the effectiveness of the configurations and settings.",unclassified,
Server Security Misconfiguration - Insecure Ssl,"Insecure SSL refers to implementation flaws within the configuration of Secure Socket Layer (SSL)/Transport Layer Security (TLS), the security of the transport layer through encryption.

The insecure configuration of  SSL within this application can lead to the connection between client and server being vulnerable. An attacker can use this weakness to execute a Denial of Service (DoS) attack, or Person-in-The-Middle (PiTM) the connection between the client and server to view or manipulate data in transit.

**Business Impact**

Insecure SSL can lead to reputational damage for the business due to a loss in confidence and trust by users who can see that the transport layer security is insecure. 

**Steps to Reproduce**

1. Run a tool such as SSLScan, TestSLL, or SSLyze to scan the SSL/TLS configuration
1. Observe the results showing that the application is using the following insecure SSL:

{{value}}

**Proof of Concept (PoC)**

The screenshot below demonstrates the insecure SSL:

{{screenshot}}","It is recommended that only strong protocols, such as TLS 1.3, and strong cipher suites are supported. The implementation of TLS should be thoroughly tested once it is set up to ensure a secure connection between client and server.",unclassified,"https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices, https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html, https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security"
Server Security Misconfiguration - Insecure Ssl - Certificate Error,"When a web page is loaded, the browser makes a series of checks against the website’s Secure Socket Layer (SSL) certificate. When these checks fail, the browser blocks the webpage from loading and issues a certificate error. An attacker can leverage this information to identify what caused the certificate error and execute a Person-in-The-Middle (PitM) attack to view and modify information that passes between the vulnerable endpoints.

**Business Impact**

Certificate errors can lead to reputational damage for the business due to a loss in confidence and trust by users who attempt to connect to the webpage and receive a certificate error.

**Steps to Reproduce**

1. Navigate to the following URL to find a certificate error is thrown by the browser: {{URL}}

**Proof of Concept (PoC)**

The screenshot below demonstrates the misconfiguration:

{{screenshot}}","It is recommended that only strong protocols, such as TLS 1.3, and strong cipher suites are supported. The implementation of TLS should be thoroughly tested once it is set up to ensure a secure connection between client and server.",unclassified,"https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices, https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html, https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security"
Server Security Misconfiguration - Insecure Ssl - Insecure Cipher Suite,"Cipher suites are the encryption algorithms used to negotiate the security of the TLS handshake between a client and a server, as well as the transfer of data. There are multiple cipher suites which vary depending on order of use and which TLS protocol is supported. Insecure cipher suites are those with known vulnerabilities which can lead to client and server connection being vulnerable.
An attacker can use the weak cipher suite implementation for this application to break the chain of trust between the client and the server and execute a Denial of Service (DoS) attack, or Person-in-The-Middle (PitM) the connection to view or manipulate data in transit.

**Business Impact**

Insecure cipher suites can lead to reputational damage for the business due to a loss in confidence and trust by users who view the insecure cipher suite.

**Steps to Reproduce**

1. Run a tool such as SSLScan, TestSLL, or SSLyze to scan the SSL/TLS configuration
1. Observe the results showing that the application is using the following insecure cipher suite(s):

{{value}}

**Proof of Concept (PoC)**

The screenshot below demonstrates the insecure cipher suite:

{{screenshot}}","It is recommended that only strong cipher suites are supported. As a guideline, the following cipher suites are recommended:

- Ciphers such as ECDHE and DHE, which use perfect forward secrecy key exchange.
- Ciphers that use SHA256
- AES-GCM is preferred for authentication ciphers. These are only available when TLS1.2 and TLS1.3 are in use.",unclassified,"https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices, https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html"
Server Security Misconfiguration - Insecure Ssl - Lack Of Forward Secrecy,"Forward secrecy uses temporary keys for the exchange of information between two parties. If a server's private key is compromised the session is still secure as it uses ephemeral keys for the exchange. When the application lacks forward secrecy, these security guarantees will rely solely on a public and private key interaction. An attacker will only require a private key to decrypt the data in transit.

**Business Impact**

Lack of forward secrecy can lead to reputational damage for the business due to a loss in confidence and trust by users who identify that there isn’t any forward secrecy.

**Steps to Reproduce**

1. Run a tool such as SSLScan, TestSLL, or SSLyze to scan the SSL/TLS configuration
1. Observe the results showing the lack of forward secrecy:

{{value}}

**Proof of Concept (PoC)**

The screenshot below demonstrates the use of a cipher suite with lack of forward secrecy:

{{screenshot}}","It is recommended that only strong cipher suites are supported. As a guideline, the following cipher suites are recommended:

- Ciphers such as ECDHE and DHE, which use perfect forward secrecy key exchange
- Ciphers that use SHA256
- AES-GCM is preferred for authentication ciphers. These are only available when TLS1.2 and TLS1.3 are in use",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html#perfect-forward-secrecy, https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html"
Server Security Misconfiguration - Request Smuggling,"HTTP request smuggling is a vulnerability that occurs due to the discrepancies between the way two or more servers interprets a sequence of requests, such as there the servers using different mechanisms to determine where the boundaries are between requests.

These misconfigurations can lead to a broad range of issues that result in an attacker bypassing security controls, taking over other user's accounts, or gaining unauthorized access to sensitive content.

**Business Impact**

Depending on the type of misconfiguration found in the server, exposure or manipulation of data from within it could lead to financial loss and reputational damage for the business.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP, to record and intercept web traffic from your browser
1. Use a browser to navigate to: {{URL}}
1. Using the HTTP intercept proxy, alter the HTTP request header as follows: {{HTTP request}}
1. Send the request
1. Observe the response

**Proof of Concept (PoC)**

The screenshots below demonstrates the HTTP request smuggling vulnerability:

{{screenshot}}","There is no single technique to prevent HTTP request smuggling vulnerabilities. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of these vulnerabilities. Some best practices include the following:

- Reduce ambiguities in the interpretation and configuration of server protocols. This includes interpreting HTTP headers consistently across front-end and back-end servers.
- Ensure servers are communicating via the HTTP/2 protocol end-to-end as this reduces the variants of HTTP request smuggling attacks that the servers will be vulnerable to.
- Use a web application firewall (WAF) and configure it to close connections where the Transfer-Encoding or Content-Length headers are different.",unclassified,"https://cwe.mitre.org/data/definitions/444.html, https://capec.mitre.org/data/definitions/33.html"
Server Security Misconfiguration - Race Condition,"A race condition is a queued task executed by an application that is forced to execute multiple functions in parallel. As a result, the application logic can break. An attacker can abuse a race condition in this application to call a function multiple times to break the application’s logic, causing unintended consequences.

**Business Impact**

This race condition vulnerability can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Fill in the form and send the request
1. Intercept the following request in a web proxy:

``` HTTP
{{Request}}
```

1. Use {{program}} to exploit the race condition

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the race condition:

{{screenshot}}","It is recommended to synchronize and control the order in which operations execute. This can be achieved through locking functionality within many programming languages.

For further information, please see the following resource:

- <https://cwe.mitre.org/data/definitions/362.html>
- <https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/08-Testing_for_Session_Puzzling>",unclassified,
Server Security Misconfiguration - Cookie Scoped To Parent Domain,"When a cookie is scoped to a parent domain instead of a specific host it allows any subdomain of that host to access the cookie, increasing the probability of data leakage. If the cookie contains a session token, it could be accessed by other subdomains. An attacker can leverage this misconfiguration to access data.

**Business Impact**

Cookies that are scoped to a parent domain can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Use Web Proxy to intercept the response
1. Observe that the cookie is scoped to the parent domain

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the misconfiguration:

{{screenshot}}","The cookie should be scoped to the application specific domain name using the `Set-Cookie` directive. It is also best practice to include both the `Secure` and  `HTTPOnly` flags. The following example shows the syntax and inclusion of the flags:

`Set-Cookie: <name>=<value>[; <Max-Age>=<age>] [; expires=<date>][; domain=<domain_name>] [; path=<some_path>][; secure][; HttpOnly]`",unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie, https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html, https://www.rfc-editor.org/rfc/rfc6265#section-4.1"
Server Security Misconfiguration - Missing Subresource Integrity,"Subresource Integrity (SRI) is a security feature that helps ensure the integrity and authenticity of externally loaded resources that are included in a web application, such as scripts, stylesheets, or images. While not a vulnerability within itself, missing SRI in a web application can allow an attacker to modify or replace external resources that can lead to the execution of malicious code. An attacker could achieve this by compromising the server hosting the resource, intercepting network traffic, or by leveraging weaknesses in the supply chain.

**Business Impact**

Missing SRI could result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
2. Open Developer Tools and navigate to the Elements tab.
3. Search for `<script>` and `<link>` tags that load external resources.
4. Observe that the following tags are missing an `integrity` attribute:

{{List of tags missing an 'integrity' attribute}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}",It is recommended to implement SRI attributes for all external resources to ensure their integrity and prevent tampering. It is also recommended to ensure that Content Security Policy (CSP) headers  are in place to restrict the sources from which resources can be loaded.,unclassified,
Server Security Misconfiguration - Ssl Attack Breach Poodle Etc,"Browser Reconnaissance & Exfiltration via Adaptive Compression of Hypertext (BREACH) and Padding Oracle On Downgraded Legacy Encryption (POODLE) are vulnerabilities in SSL and TLS that allows a malicious attacker to injection plaintext into a victim's request or force an SSL downgrade to decrypt encrypted data over thousands of requests. This application is vulnerable to a BREACH/POODLE attack as it supports outdated versions of SSL or TLS.

**Business Impact**

SSL attacks can lead to reputational damage for the business due to a loss in confidence and trust by users who identify outdated versions of SSL or TLS. 

**Steps to Reproduce**

1. Run a tool such as SSLScan, TestSLL, or SSLyze to scan the SSL/TLS configuration
1. Observe the results showing the weak SSL/TLS versions:

{{value}}

**Proof of Concept (PoC)**

The screenshot below demonstrates the use of a cipher suite susceptible to a  BREACH or POODLE attack:

{{screenshot}}","It is recommended that only strong protocols, such as TLS 1.3, and strong cipher suites are supported. The implementation of TLS should be thoroughly tested once it is set up to ensure a secure connection between client and server.",unclassified,"https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices, https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html, https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security"
Server Security Misconfiguration - Unsafe Cross Origin Resource Sharing,"The Cross-Origin Resource Sharing (CORS) Policy is a security control implemented by browsers to extend Same-Origin Policy (SOP) to cross domain requests via an allow list. However, misconfigurations can create unsafe CORS instances where cross-domain attacks can occur. An attacker can leverage unsafe CORS policies in the application to break the SOP and exfiltrate data or execute code on users’ browsers.

**Business Impact**

Unsafe CORS can lead to reputational damage for the business due to a loss in confidence from users who are attempting to perform legitimate actions within the application.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP
1. With the HTTP intercept proxy turned on, use a browser to navigate to: {{URL}}
1. In the HTTP intercept proxy, observe the following header:

```HTTP
{{Header}}
```

1. The following request and response pair demonstrates the unsafe CORS:

```HTTP
{{Request}}
```

```HTTP
{{Response}}
```

**Proof of Concept (PoC)**

The screenshot below demonstrates the full exploit:

{{screenshot}}","To prevent CORS attacks the cross-origin requests need to be properly configured. This includes not using `null` and instead using a strict allow list of trusted sites in the `Access-Control-Allow-Origin` header. It is also good practice to not use wildcards (`*`) for internal networks, and include further server-side protections for sensitive data.",unclassified,"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS, https://fetch.spec.whatwg.org/#http-cors-protocol"
Server Security Misconfiguration - No Rate Limiting On Form,"Rate limiting is a strategy to limit the frequency of a repeat action within a particular time frame. This ensures that a service doesn’t become unresponsive or unavailable due to too many requests exhausting the application's resources. A lack of rate limiting on this endpoint allows an attacker to send a large number of requests to the server and potentially cause accelerated service usage for the business or exhaust the application resources.

**Business Impact**

No rate limiting on a form can result in reputational damage to the organization if the rate limiting prevents legitimate form submissions and responses. It also has the potential to cause accelerated service usage, which can incur a direct financial cost in environments with SaaS services or pay on demand systems.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP, to record and intercept web traffic from your browser
1. Using a browser, navigate to {{url}}
1. Fill out the form and submit the form while using the HTTP intercept proxy to intercept the request
1. Using the HTTP intercept proxy, re-issue the captured request 400 times in rapid succession
1. Observe within the HTTP intercept proxy that all 400 of these requests generate a ‘HTTP 200 OK’ response, showing that there is no rate-limiting on the form
1. Perform another, manual form submission in the browser
1. Observe that the form is submitted successfully which shows that there is no silent lockout implemented

#### Proof of Concept

The following screenshots demonstrate a lack of rate limiting on the login form followed by a successful form submission:

{{screenshot}}","It is recommended to implement rate limiting on the form. This could include a CAPTCHA that a user has to solve before submission, or it could be enforcing a limit on the amount of submissions per minute, based on IP address.",unclassified,
Server Security Misconfiguration - No Rate Limiting On Form - Registration,"Rate Limiting prevents an application from becoming unresponsive or unavailable due to too many requests exhausting the application's resources. A lack of rate limiting on a registration form allows an attacker to send a number of requests to the server which registers an account on the service for each request, and will generate a new user. This has the risk of generating a large set of spam accounts with the service, which the attacker can use to spam other users and disrupt the platform.

**Business Impact**

No rate limiting on a registration form can result in reputational damage to the organization if an attacker generates a large amount of accounts for a service and uses it to spam other users, or to disrupt the platform via other means. It also has the potential to cause accelerated service usage, which can incur a direct financial cost in environments with SaaS services or pay on demand systems.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP, to record and intercept web traffic from your browser
1. Using a browser, navigate to {{url}}
1. Fill out the registration form
1. Submit the form while using the HTTP intercept proxy to intercept the request
1. Using the HTTP intercept proxy, re-issue the captured request 400 times in rapid succession
1. Observe within the HTTP intercept proxy that all 400 of these requests successfully generate new accounts, showing that there is no rate-limiting on the form
1. Perform another, manual account registration form submission in the browser without the interception proxy enabled
1. Observe that the form is submitted successfully. This shows that there is no silent lockout implemented

#### Proof of Concept

The following screenshots demonstrate a lack of rate limiting on the registration form, followed by a successful form submission:

{{screenshot}}","It is recommended to implement rate limiting on the form. This could include a CAPTCHA that a user has to solve before submission, or it could be enforcing a limit on the amount of submissions per minute, based on IP address.",unclassified,
Server Security Misconfiguration - No Rate Limiting On Form - Sms Triggering,"Rate Limiting prevents an application from becoming unresponsive or unavailable due to too many requests exhausting the application's resources. A lack of rate limiting on a SMS triggering endpoint was identified. This allows an attacker to create a large amount of messages to any valid mobile number, which they could use to spam a target with SMS messages.

**Business Impact**

No rate limiting on a form which triggers SMS can result in reputational damage for the business as customers’ trust is impacted through receiving large amounts of unwanted and unsolicited SMS messages. This also creates the risk of the business’ phone number being added to a spam list.

Additionally, for systems that use Software-as-a-Service (SaaS) SMS providers, there can be direct financial costs associated with sending large volumes of SMS messages.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP, to record and intercept web traffic from your browser
1. Using a browser, sign into the application and navigate to {{url}}
1. Fill out the form that triggers an SMS, using a phone number that you own as the destination
1. Submit the form while using the HTTP intercept proxy to intercept the request
1. Using the HTTP intercept proxy, re-issue the captured request 400 times in rapid succession
1. Observe within the HTTP intercept proxy that all 400 of these requests triggered an email, showing that there is no rate-limiting on the form
1. Perform another, manual SMS triggering form submission in the browser without the interception proxy enabled
1. Observe that the form is submitted and an SMS is triggered successfully. This shows that there is no silent lockout implemented

#### Proof of Concept

The following screenshots demonstrate a lack of rate limiting on the SMS triggering form, followed by a successful form submission:

{{screenshot}}","It is recommended to implement rate limiting on the form. This could include a CAPTCHA that a user has to solve before submission, or it could be enforcing a limit on the amount of submissions per minute, based on IP address.",unclassified,
Server Security Misconfiguration - No Rate Limiting On Form - Change Password,"Rate Limiting prevents an application from becoming unresponsive or unavailable due to too many requests exhausting the application's resources. A lack of rate limiting on a password change form allows an attacker to send a number of requests to the server which will attempt to change the password of a user with the supplied credentials, even if they are invalid. This has the risk of an attacker being able to attempt to bruteforce credentials for users without any protections, and can be used as a method of credential stuffing and compromising accounts to the service.

**Business Impact**

No rate limiting on a password change form can result in reputational damage to the organization if an attacker successfully takes over an account through guessing valid credentials or preventing legitimate users access to their accounts. It also has the potential to cause accelerated service usage, which can incur a direct financial cost in environments with SaaS services or pay on demand systems.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP, to record and intercept web traffic from your browser
1. Using a browser, sign into the application and navigate to {{url}}
1. Fill out the password change form 
1. Submit the form while using the HTTP intercept proxy to intercept the request
1. Using the HTTP intercept proxy, re-issue the captured request 400 times in rapid succession
1. Observe within the HTTP intercept proxy that all 400 of these requests generate a ‘HTTP 200 OK’ response, showing that there is no rate-limiting on the form
1. Perform another, manual password change form submission in the browser without the interception proxy enabled
1. Observe that the form is submitted successfully which shows that there is no silent lockout implemented

#### Proof of Concept

The following screenshots demonstrate a lack of rate limiting on the password change form, followed by a successful form submission:

{{screenshot}}","It is recommended to implement rate limiting on the form. This could include a CAPTCHA that a user has to solve before submission, or it could be enforcing a limit on the amount of submissions per minute, based on IP address.",unclassified,
Server Security Misconfiguration - No Rate Limiting On Form - Email Triggering,"Rate Limiting prevents an application from becoming unresponsive or unavailable due to too many requests exhausting the application's resources. A lack of rate limiting on an email triggering endpoint was identified. This allows an attacker to create a large amount of emails to any email address, which they could use to spam a target with emails.

**Business Impact**

No rate limiting on a form which triggers email can result in reputational damage for the business as customers’ trust is impacted through receiving large amounts of unwanted and unsolicited emails. This also creates the risk of the email address domain being added to a spam list.

Additionally, for systems that use Software-as-a-Service (SaaS) email providers, there can be direct financial costs associated with sending large volumes of email.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP, to record and intercept web traffic from your browser
1. Using a browser, sign into the application and navigate to {{url}}
1. Fill out the {{insert_form_name_here}} that triggers an email, using an email that you own as the destination
1. Submit the form while using the HTTP intercept proxy to intercept the request
1. Using the HTTP intercept proxy, re-issue the captured request 400 times in rapid succession
1. Observe within the HTTP intercept proxy that all 400 of these requests triggered an email, showing that there is no rate-limiting on the form
1. Perform another, manual email triggering form submission in the browser without the interception proxy enabled
1. Observe that the form is submitted and an email is triggered successfully. This shows that there is no silent lockout implemented

#### Proof of Concept

The following screenshots demonstrate a lack of rate limiting on the email triggering form, followed by a successful form submission after 400 requests:

{{screenshot}}","It is recommended to implement rate limiting on the form. This could include a CAPTCHA that a user has to solve before submission, or it could be enforcing a limit on the amount of submissions per minute, based on IP address.",unclassified,
Server Security Misconfiguration - No Rate Limiting On Form - Login,"Rate Limiting prevents an application from becoming unresponsive or unavailable due to too many requests exhausting the application's resources. A lack of rate limiting on a login form allows an attacker to send a number of requests to the server which will attempt to authenticate a user with the supplied credentials, even if they are invalid. This has the risk of an attacker being able to attempt to bruteforce credentials for users without any protections, and can be used as a method of credential stuffing and compromising accounts to the service.

**Business Impact**

No rate limiting on a login form can result in reputational damage to the organization if an attacker successfully takes over an account through a bruteforce login attempt. It also has the potential to cause accelerated service usage, which can incur a direct financial cost in environments with SaaS services or pay on demand systems.

**Steps to Reproduce**

1. Enable a HTTP intercept proxy, such as Burp Suite or OWASP ZAP, to record and intercept web traffic from your browser
1. Using a browser, navigate to {{url}}
1. Fill out the form with incorrect credentials
1. Submit the login form while using the HTTP intercept proxy to intercept the request
1. Using the HTTP intercept proxy, re-issue the captured request 400 times in rapid succession
1. Observe within the HTTP intercept proxy that all 400 of these requests generate successful login attempts, showing that there is no rate-limiting on the form
1. Login with valid account credentials
1. Observe that a valid login is successful which shows that there is no silent lockout implemented

#### Proof of Concept

The following screenshots demonstrate a lack of rate limiting on the login form followed by a successful login:

{{screenshot}}","It is recommended to implement rate limiting on the form. This could include a CAPTCHA that a user has to solve before submission, or it could be enforcing a limit on the amount of submissions per minute, based on IP address.",unclassified,
Decentralized Application Misconfiguration,"Decentralized Application (dApp) misconfiguration refers to issues in the design or deployment of dApps, such as insecure data storage, improper authorization, or flawed logic. These vulnerabilities can compromise user security, enable unauthorized actions, or disrupt application functionality. An attacker can exploit these misconfigurations to manipulate transactions, exfiltrate data, or cause operational failures.

**Business Impact**

Misconfigured dApps can lead to data breaches, financial losses, and reputational harm. These vulnerabilities may also affect compliance with security standards and regulations.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Analyze the dApp's code and configuration for potential security gaps
1. Test inputs and interactions to identify improper handling or validation  
1. Bypass security mechanisms or access restricted features {{explanation of where + screenshot}}
1. Observe any unintended behavior or unauthorized access 

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Use secure coding practices and conduct regular security audits.  
- Implement robust input validation and access controls.  
- Test the dApp extensively under various scenarios, including edge cases.  
- Use encryption and other security measures for sensitive data.",unclassified,
Decentralized Application Misconfiguration - Marketplace Security,"Marketplace security misconfigurations involve weaknesses in decentralized marketplaces, such as signer account takeover, unauthorized asset transfers, or order manipulation. These flaws can compromise the integrity of transactions and lead to fraudulent activities. An attacker can exploit these misconfigurations to take over accounts, manipulate marketplace orders, or conduct unauthorized trades.

**Business Impact**  

Marketplace misconfigurations can result in user asset theft, operational disruptions, and significant reputational damage. These vulnerabilities may also cause legal and financial liabilities for the platform operators.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Analyze the marketplace dApp’s smart contract logic for security gaps 
1. Test the authorization mechanisms for vulnerabilities in asset transfers 
1. Manipulate order parameters, such as price or quantity, during submission  
1. Observe unauthorized actions, such as account takeovers or malicious offers  

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Implement multi-signature authentication to secure user accounts.  
- Validate and sanitize all input data for marketplace transactions.  
- Use cryptographic integrity checks for order submissions and updates.  
- Regularly monitor and test the marketplace for security vulnerabilities.",unclassified,
Decentralized Application Misconfiguration - Marketplace Security - Malicious Order Offer,"A malicious order offer involves an attacker creating fraudulent or malicious order offers designed to deceive users into accepting terms that favor the attacker. This is often caused by a lack of order verification mechanisms or misleading metadata. Users may accept these malicious offers without realizing they are unfavorable or fraudulent.

**Business Impact**  

Users who fall victim to malicious orders may lose assets or overpay for goods, leading to financial losses and diminished trust in the marketplace. The platform may face legal repercussions for allowing fraudulent activities and could suffer reputational damage as users leave for more secure alternatives.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Create a malicious order offer with deceptive terms
1. Submit the offer to the marketplace
1.  Present the order in a way that conceals the malicious intent
1. Trick a user into accepting the malicious offer {{describe how}}
1. Observe that the transaction executed under fraudulent terms

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Enforce strict validation and verification processes for order offers, ensuring terms are clear and transparent.
- Implement user alerts for unusually high or suspicious order offers.
- Audit the metadata and descriptions associated with each order to prevent deceptive practices.
- Educate users on how to recognize potentially malicious offers and encourage double-checking before acceptance.",unclassified,
Decentralized Application Misconfiguration - Marketplace Security - Unauthorized Asset Transfer,"Unauthorized Asset Transfer occurs when assets (e.g., NFTs, tokens) are transferred without the owner’s consent. This can result from improper access control, flawed smart contract logic, or a lack of authorization checks. Attackers exploit these weaknesses to move assets without proper validation.

**Business Impact**

This type of attack leads to asset theft, eroding user trust in the platform. Financial losses can occur, and the platform may face legal action for failing to safeguard user assets. It can also hurt the platform’s reputation, resulting in reduced user engagement and a decline in marketplace activity.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Identify the targeted asset on the marketplace
1. Bypass or exploit the smart contract responsible for asset transfer to initiate an unauthorized transfer {{describe specifically how you identified it}}
1. Look at the transaction logs to confirm that the asset has been transferred without the owner’s approval
1. Verify the lack of authorization checks in the transaction path
1. Observe that the transferred asset is no longer under the original owner’s control

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Implement strict access control measures and permission systems to verify ownership before allowing asset transfers.
- Introduce multi-signature requirements for high-value asset transfers.
- Regularly audit smart contracts to ensure proper authorization logic is enforced.
- Log and monitor all asset transfer activities, with alerts for suspicious transactions.",unclassified,
Decentralized Application Misconfiguration - Marketplace Security - Orderbook Manipulation,"Orderbook manipulation occurs when an attacker alters the terms of an order after it has been signed by the user but before it is executed by the marketplace. This can happen due to improper order validation, insufficient signature verification, or tampering with transaction data. As a result, the buyer or seller may unknowingly accept manipulated terms.

**Business Impact**  

Order manipulation leads to financial losses for users and undermines trust in the marketplace’s ability to process trades fairly. It can damage the marketplace's reputation and result in disputes or legal issues related to fraudulent orders.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Create a legitimate order on the marketplace and sign it
1. Intercept the transaction data containing the order details
1.  Modify the order terms
1. Submit the tampered order for execution
1. Observe that the manipulated order was executed under different terms than originally agreed upon

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Implement strong cryptographic signature validation on all order submissions to ensure the integrity of the original terms.
- Introduce non-modifiable order hashes or unique order IDs that prevent post-signature modification.
- Regularly audit order processing logic to detect potential manipulation points.
- Provide users with clear confirmation of their orders before execution and alert them to any changes.",unclassified,
Decentralized Application Misconfiguration - Marketplace Security - Ofac Bypass,"Office of Foreign Assets Control (OFAC) bypass refers to the failure of a marketplace to properly enforce OFAC sanctions or restrictions. This can happen due to insufficient compliance mechanisms, such as missing geolocation checks or improper validation of user identities, allowing sanctioned entities to engage in transactions.

**Business Impact**  

Allowing sanctioned entities to use the platform could result in severe legal consequences, including fines, regulatory penalties, and sanctions against the marketplace itself. Additionally, reputational damage can occur if users or regulators perceive the platform as not complying with global laws and standards.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Create a user from a sanctioned country or entity
1.  Bypass geolocation checks or identity verification to register on the platform
1. Execute trades, transfers, or listings as the sanctioned entity
1. Observe that the marketplace does not block or restrict the user based on their location or identity

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Implement strict geolocation checks using IP and blockchain analysis tools to block users from sanctioned jurisdictions.
- Introduce robust Know Your Customer (KYC) procedures to validate user identities before allowing transactions.
- Regularly update the platform’s list of sanctioned entities and cross-reference it with all active users.
- Automate compliance checks to flag and block users violating OFAC restrictions.",unclassified,
Decentralized Application Misconfiguration - Marketplace Security - Price Or Fee Manipulation,"Price or fee manipulation occurs when attackers exploit weaknesses in the pricing or fee structure of a marketplace. This may involve bypassing fee calculations, inflating or deflating prices, or exploiting discrepancies between front-end and back-end price logic. This vulnerability allows attackers to manipulate the system to pay lower fees or unfairly alter trade prices.

**Business Impact**  

This vulnerability can lead to financial losses for the marketplace, as attackers evade fees or game the system for arbitrage. It can also harm users by forcing them to trade at manipulated prices. If unaddressed, the marketplace’s reputation for fair trading can suffer, causing users to leave.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Identify a transaction with a calculated price or fee in the marketplace
1.  Exploit a flaw in the fee or price calculation logic to alter the final amount
1. Submit the transaction with the manipulated price or fee
1. Confirm that the system accepts the manipulated transaction
1. Observe that the fee was reduced or price altered, without detection

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Implement consistent, tamper-proof fee and pricing logic across both the front-end and back-end.
- Regularly audit fee calculation and pricing mechanisms for potential vulnerabilities.
- Use cryptographic proofs to validate that prices and fees are correctly calculated before executing transactions.
- Introduce alerts for unusually low fees or sudden price changes in transactions.",unclassified,
Decentralized Application Misconfiguration - Marketplace Security - Denial Of Service,"Denial of Service (DoS) vulnerabilities occur when attackers overload the marketplace with excessive transactions, requests, or interactions, causing it to become unavailable or unresponsive. This can result from a lack of rate limiting, unoptimized smart contract functions, or exploitable transaction loops. An attacker can overwhelm a marketplace through DoS, preventing legitimate users from accessing services.

**Business Impact**  

A successful DoS attack can render the platform unusable, leading to significant downtime, loss of revenue, and frustrated users. It also exposes the marketplace to reputational damage, as users may seek alternatives if the platform is frequently unavailable due to attacks.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Identify a vulnerable marketplace function that allows unlimited interactions
1. Spam the vulnerable function with excessive requests {{Describe exactly how}}
1. Observe the marketplace’s performance as it becomes unresponsive or crashes
1. Observe that legitimate users are unable to access the marketplace or complete transactions

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Implement rate limiting on all marketplace interactions, including order placements, asset queries, and transactions.
- Optimize smart contract functions to handle large numbers of interactions without degrading performance.
- Use monitoring tools to detect unusual spikes in traffic and throttle malicious activity in real-time.
- Establish backup and failover systems to keep the marketplace operational in the event of an attack.",unclassified,
Decentralized Application Misconfiguration - Marketplace Security - Miscalculated Accounting Logic,"Miscalculated accounting logic refers to errors or flaws in the marketplace’s accounting system that lead to incorrect balance calculations, discrepancies in user funds, or misallocation of assets. This often stems from improper rounding, underflows/overflows, or poor handling of transaction data. Attackers can exploit these weaknesses to alter balances in their favor.

**Business Impact**  

Accounting errors can result in significant financial losses, both for the platform and its users. Users may see incorrect balances, leading to disputes and mistrust in the platform. If left unaddressed, such issues can cause significant reputational and legal damage to the marketplace.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Identify a transaction that involves a balance update
1. Exploit the accounting logic {{Describe exactly how}}
1. Observe that the balance calculations are incorrect as a result
1. Observe that the affected accounts to confirm the accounting error

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Implement safe mathematical operations in smart contracts, including safeguards against integer overflows and underflows.
- Regularly audit and test accounting logic for rounding errors or other flaws.
- Use precise decimal handling to ensure accurate balance calculations across transactions.
- Establish independent validation checks for all balance updates and asset transfers.",unclassified,
Decentralized Application Misconfiguration - Marketplace Security - Signer Account Takeover,"Signer account takeover refers to an attack where an attacker gains unauthorized control over a user's private key or credentials used to sign transactions. This typically stems from insecure key management, phishing attacks, or improper signature validation methods. As a result, the attacker can initiate asset transfers, create orders, or modify listings without the user's consent.

**Business Impact**  

A signer account takeover compromises marketplace integrity, resulting in asset theft, fraudulent listings, and user dissatisfaction. This can lead to reputational damage, legal liabilities, and financial losses as users lose trust in the platform’s ability to secure their assets and personal information.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Identify the private key used to sign marketplace transactions {{or describe specifically how you identified it}}
1. Use the compromised private key to generate a valid signature for a marketplace transaction
1. Submit the signed transaction to the marketplace, initiating an unauthorized asset transfer or listing
1. Verify that the marketplace accepts the transaction without flagging the unauthorized signature
1. Observe the unauthorized changes within the affected user’s account

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Implement multi-factor authentication (MFA) for account access and transaction approvals.
- Use hardware wallets or other secure key management practices for storing private keys.
- Regularly monitor account activities for unusual behavior and provide alerts for unauthorized access attempts.
- Strengthen signature validation mechanisms to detect and prevent compromised keys from initiating transactions.",unclassified,
Decentralized Application Misconfiguration - Marketplace Security - Improper Validation And Checks For Deposits And Withdrawals,"Improper validation and checks for deposits and withdrawals occur when the marketplace fails to adequately verify user deposits or withdrawals, leading to potential double-spending, unauthorized transactions, or incorrect balances. This misconfiguration is caused by poor validation logic or synchronization issues between the marketplace and external wallets.

**Business Impact** 
 
Incorrect validation can lead to financial discrepancies, enabling attackers to withdraw funds without proper deposits or double-spend assets. It may also cause user dissatisfaction due to incorrect balances, damaging the platform’s reputation and leading to potential legal disputes.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Deposit funds into a marketplace account
1. Identify and exploit any inconsistencies in the validation or synchronization logic between the marketplace and the external wallet
1. Trigger a withdrawal request that exceeds the deposited amount or simulate multiple withdrawals in quick succession
1. Observe that the account balances to verify that unauthorized or excess withdrawals were successful

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Implement strict validation mechanisms for deposits and withdrawals, ensuring that transactions are fully confirmed before allowing withdrawals.
- Use decentralized oracles to verify external wallet balances and ensure synchronization with the marketplace.
- Regularly audit the deposit and withdrawal logic for potential vulnerabilities.
- Introduce rate limits and monitoring to prevent multiple withdrawal attempts in a short period.",unclassified,
Decentralized Application Misconfiguration - Improper Authorization,"Improper authorization occurs when a decentralized application (dApp) fails to properly enforce access controls, allowing unauthorized users or entities to access restricted functionalities or resources. This can result from missing checks, weak authentication mechanisms, or flawed logic. An attacker can exploit this to gain unauthorized access, manipulate transactions, or exfiltrate sensitive information.

**Business Impact**  

Improper authorization can lead to financial losses, data breaches, and operational disruptions. Exploits may also result in regulatory non-compliance and reputational damage.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Analyze the authorization mechanisms in the dApp's code  
1. Attempt to bypass access controls using unauthorized accounts or inputs  
1. Test edge cases and logic flaws in the authorization process  
1. Observe that unauthorized actions are successfully executed  

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Use role-based access control (RBAC) and enforce least privilege principles.  
- Regularly test and audit authorization logic for vulnerabilities.  
- Implement robust authentication mechanisms to verify user identities.  
- Use automated tools to detect and prevent authorization bypasses.",unclassified,
Decentralized Application Misconfiguration - Improper Authorization - Insufficient Signature Validation,"This vulnerability occurs when a decentralized application (dApp) implements improper validation of cryptographic signatures, which serve as proof of ownership, authorization or validation. It can occur when a dApp fails to verify the public key against the signature, implements weak checks (or is missing checks) on transaction parameters, or it reuses previously valid signatures. Insufficient signature validation results in an attacker being able to forge or otherwise manipulate signatures to perform unauthorized actions on the blockchain.

**Business Impact**

Improper authorization can result in loss of user trust, and damage to the dApp’s reputation. Additionally, businesses may face legal consequences and regulatory scrutiny which can lead to financial losses and penalties.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Identify an interaction within the dApp that requires a signature for authorization: {{define specific function}}
1. Alter the signature parameters by performing {{action}}
1. Submit the altered request to the dApp
1. Observe that the dApp improperly validates the signature and accepts the request without verifying the correct private key ownership

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Use strict signature verification methods to check that the sender’s public key matches the signature and that no modifications of the transaction details can occur.
- Implement replay protection mechanisms to prevent attackers from reusing valid signatures for unauthorized transactions.
- Use established cryptographic libraries that handle signature verification securely and correctly.
- Conduct regular security audits of smart contracts and their transaction handling mechanisms to identify potential weaknesses in signature validation.
- For high value or sensitive transactions, consider implementing multi-signature authorization that include multiple private keys to sign off on the action before it is executed.",unclassified,
Decentralized Application Misconfiguration - Insecure Data Storage,"Insecure data storage occurs when a decentralized application (dApp) improperly stores sensitive information, such as private keys, personally identifiable information (PII), or protected health information (PHI). This can happen due to plaintext storage, lack of encryption, or improper access controls. An attacker can exploit this to access or exfiltrate sensitive data, leading to privacy violations and security breaches.

**Business Impact**  

Data breaches caused by insecure storage can lead to significant financial losses, regulatory penalties, and reputational harm. Affected users may lose trust in the platform, further damaging its credibility.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Review the storage implementation for sensitive data in the dApp  
1. Analyze the use of encryption and access controls for data protection  
1. Attempt to retrieve sensitive data without authorization
1. Observe any unauthorized access or data exposure

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Encrypt sensitive data using strong encryption standards.  
- Restrict access to data storage systems using robust access controls.  
- Conduct regular audits of data storage practices.  
- Comply with relevant data protection regulations and standards.",unclassified,
Decentralized Application Misconfiguration - Insecure Data Storage - Sensitive Information Exposure,"This vulnerability occurs when a decentralized application (dApp) fails to securely store sensitive information, such as Personally Identifiable Information (PII), or Protected Health Information (PHI). This can stem from improper data security practices, such as storing sensitive data in plaintext, failing to encrypt sensitive information, using insecure client-side storage mechanisms (e.g., `localStorage`), failing to encrypt sensitive data, or neglecting to implement proper access controls. As a result, attackers with access to the storage can easily retrieve and exploit the sensitive information, leading to breaches in the privacy of individual users.

**Business Impact**

The exposure of sensitive information can result in loss of user trust, and reputational damage to the business. Additionally, businesses may face legal consequences and regulatory scrutiny for non-compliance with privacy laws. which can lead to financial losses and penalties.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Access the decentralized application’s storage mechanism: {{define storage mechanism}}
1. Search for the sensitive information by performing {{action}}
1. Observe that the sensitive information is stored in plaintext without encryption

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Use strong encryption algorithms to encrypt sensitive information both at rest and in transit before storing them.
- Only use and store the minimum amount of sensitive information necessary for the function of the application. Remove or anonymise sensitive information when it is no longer needed.
- Use access controls to limit who and what can access the sensitive information.
- Conduct regular security audits to ensure compliance with relevant privacy regulations of your application’s user base.",unclassified,
Decentralized Application Misconfiguration - Insecure Data Storage - Plaintext Private Key,"This vulnerability occurs when a decentralized application (dApp) stores a private key in plaintext within its data storage. This can stem from improper data security practices, such as failing to encrypt sensitive information, using insecure client-side storage mechanisms (e.g., `localStorage` or `sessionStorage`), hardcoding private keys directly into the code, or neglecting to implement proper access controls. As a result, attackers with access to the storage can easily retrieve and misuse the private key, compromising the integrity of the associated blockchain accounts as they are able to access users' blockchain accounts or wallets.

**Business Impact**
The exposure of a plaintext private key can result in loss of user trust, and damage to the dApp’s reputation. Additionally, businesses may face legal consequences and regulatory scrutiny which can lead to financial losses and penalties.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Access the decentralized application’s storage mechanism: {{define storage mechanism}}
1. Search for the private key by performing {{action}}
1. Observe the private key is stored in plaintext without encryption
1. Confirm that the plaintext private key gives access to the associated blockchain account or wallet

**Proof of Concept (PoC)**
The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

-  Avoid storing private keys in the browser’s `localStorage` or other insecure client-side storage mechanisms. Use more secure alternatives, such as session-based tokens or encrypted cookies.
- Use strong encryption algorithms to encrypt private keys before storing them.
- Implement secure key management practices, such as using hardware security modules or key vaults for sensitive key storage.
- Use access controls to limit who and what can access sensitive key storage.",unclassified,
Decentralized Application Misconfiguration - Defi Security,"DeFi security misconfigurations refer to flaws in the design or implementation of decentralized finance (DeFi) protocols, such as flash loan vulnerabilities, oracle manipulation, or improper accounting logic. These issues can compromise the financial integrity and operational stability of the protocol. An attacker can exploit these misconfigurations to manipulate token prices, drain liquidity pools, or execute unauthorized transactions. 

**Business Impact** 

DeFi misconfigurations can lead to substantial financial losses for the protocol and its users, damage to reputation, and a loss of trust in the platform. These vulnerabilities may also result in regulatory scrutiny and legal liabilities for the operators. 

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Analyze the DeFi protocol’s smart contracts and logic for vulnerabilities  
1. Test token price manipulation through oracle inputs or other means.  
1. Attempt to exploit liquidity pools using flash loans or reentrancy methods.  
1. Observe that unauthorized or unintended transactions can be executed.  

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Use decentralized and reliable oracle systems to prevent manipulation.  
- Conduct regular audits of smart contracts and financial logic.  
- Implement failsafes and limits to mitigate abnormal financial activities.  
- Monitor transaction patterns for signs of exploitation and act swiftly to mitigate risks.",unclassified,
Decentralized Application Misconfiguration - Defi Security - Improper Implementation Of Governance,"Governance typically involves token holders voting on protocol changes, such as interest rates or code updates. Improper implementation of governance occurs when a Decentralized Finance (DeFi) protocol’s governance mechanism is flawed, allowing an attacker to manipulate decision making processes. This occurs when governance tokens can be easily manipulated or concentrated (e.g., through flash loans or vote buying) and can result in arbitrary changes to interest rates, fees, or smart contract logic.

**Business Impact**

This vulnerability can destabilize the protocol, leading to reputational damage, loss of user funds, and potential financial instability. Additionally, businesses may face legal consequences and regulatory scrutiny which can lead to financial losses and penalties.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Identify the governance mechanism within the DeFi protocol {{Describe the specific governance protocol}}
1. Acquire a large amount of governance tokens {{Describe the method identified and provide steps to reproduce this}}
1. Propose a governance change or vote on an existing proposal {{screenshot}}
1. Use the acquired tokens to influence the vote {{screenshot}}

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Design governance mechanisms that distribute voting power more evenly to prevent centralization or manipulation.
- Restrict the use of flash-loaned tokens in governance votes to prevent manipulation.
- Introduce a time delay between proposal submission and vote execution to limit flash loan exploitation.
- Require longer token holding periods before tokens can be used in governance decisions to prevent vote buying.
- Regularly perform governance audits to identify and mitigate risks related to governance manipulation.",unclassified,
Decentralized Application Misconfiguration - Defi Security - Flash Loan Attack,"A flash loan allows the borrowing of a large sum of capital without collateral as the loan must be returned to the lending platform at the end of a transaction block. A flash loan attack involves  an attacker borrowing large amounts to manipulate asset prices in liquidity pools or decentralized exchanges, arbitraging between manipulated prices across protocols, or exploiting vulnerabilities in smart contracts to drain liquidity. Through these methods an attacker is able to manipulate the logic of asset bonding curves and destabilize market prices.

**Business Impact**

Flash loan attacks can result in significant financial losses as well as a loss of user trust, and damage to the platform’s reputation. Additionally, businesses may face legal consequences and regulatory scrutiny which can lead to financial losses and penalties.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. I  Identify a Decentralized Finance (DeFi) protocol that offers flash loans with unsecured capital: {{define specific protocol}}
1. Borrow a large flash loan from a liquidity pool without collateral

1. Perform the following actions which show the manipulated asset prices, arbitrage strategies or exploits to extra value from the manipulated prices or protocol: {{list additional actions}}

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Ensure that there are checks on price and liquidity changes to prevent sudden manipulation caused by flash loans.
- Implement replay auditing of smart contracts to detect vulnerabilities exploitable by flash loans.
- Ensure accurate, real-time price feeds from decentralized oracles to mitigate manipulation.
- Enable circuit breakers to pause the system in the event of large, suspicious transactions.",unclassified,
Decentralized Application Misconfiguration - Defi Security - Function Level Accounting Error,"A function-level accounting error occurs when a smart contract in a Decentralized Finance (DeFi) protocol improperly calculates balances, interests, or other transactional values due to a coding flaw. This vulnerability typically arises from incorrect implementation of financial functions, such as rounding errors, incorrect updating of balance variables, or failing to account for edge cases in transactions. An attacker can exploit a function-level accounting error in a function responsible for updating user balances, allowing them to withdraw more funds than they are entitled to.

**Business Impact**

Function-level accounting errors can lead to significant financial discrepancies, resulting in loss of funds, misallocation of rewards, or improper liquidation of assets. This can cause reputational harm to the DeFi platform, as users may lose trust in the platform's integrity and security. Furthermore, if the error is exploited at scale, it could drain liquidity or destabilize the entire protocol.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Review the DeFi protocol's smart contract code for financial functions
1. Identify an edge case or flaw in the logic {{Describe the specific underflow, overflow, or rounding issue identified}}
1. Manipulate the inputs to the vulnerable function to trigger the flaw  
1. Observe that the protocol fails to update balances properly which results in an incorrect payout {{screenshot}}

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Implement checks and balances to ensure user withdrawals or payouts are only processed if they align with their actual balance.
- Ensure all arithmetic operations (addition, subtraction) are performed using SafeMath or similar libraries to avoid overflow and underflow errors.
- Perform rigorous code audits to identify and fix accounting logic vulnerabilities before deploying smart contracts.
-  Conduct extensive testing of smart contracts, including edge cases, to ensure the integrity of all financial operations.
- Use precise rounding mechanisms in financial calculations to avoid discrepancies in user balances.",unclassified,
Decentralized Application Misconfiguration - Defi Security - Pricing Oracle Manipulation,"A pricing oracle manipulation attack occurs when an attacker manipulates the data provided by price oracles to distort the prices of assets within a Decentralized Finance (DeFi) protocol. The vulnerability stems from the reliance on price oracles to determine asset values, particularly when these oracles draw data from a single or few external sources. Attackers may, for example, provide false liquidity to a decentralized exchange to artificially inflate or deflate the price of an asset, or target oracles with delayed price updates to profit from manipulated pricing.

**Business Impact** 

Manipulation of price oracles can destabilize the platform by causing false valuations of assets, resulting in unfair liquidations, arbitrage, or financial loss for users. This can harm the integrity of the DeFi protocol, eroding user trust, and causing significant financial losses. Additionally, legal risks arise if manipulated pricing leads to large-scale market instability or fraud within the platform.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Identify a DeFi platform relying on a price oracle for asset valuation: {{define specific platform}}
1. Determine that the price oracle uses a centralized or single-source price feed {{screenshot}}
1. Manipulate the liquidity on the platform or provide false data to the oracle
1. Observe price distortions and execute trades based on the manipulated prices to profit {{screenshot}}
1. Liquidate positions or perform arbitrage before the oracle updates or corrects the prices

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures in the decentralized application can prevent and limit the impact of the vulnerability:

- Use failsafes to detect abnormal pricing shifts and pause the protocol if manipulation is detected. Set thresholds for price volatility ranges for all assets within the dApp (these can be based on historical data, statistical models, and normal market activity). 
- Ensure that accurate and real-time price feeds are used from decentralized oracles.
- Use time weighted average price or volume weighted average price to smooth short-term volatility.
- Enable circuit breakers to pause the system in the event of large, suspicious transactions.
- Continuously monitor for sudden spikes or reductions in liquidity or trading volumes that might signal manipulation.",unclassified,
Decentralized Application Misconfiguration - Protocol Security Misconfiguration,"Protocol security misconfigurations refer to design or configuration errors in blockchain protocols that underpin dApps, such as staking logic flaws, frontrunning vulnerabilities, or improper validation of state transitions. These issues can disrupt protocol operations and compromise its security. An attacker can exploit these misconfigurations to manipulate consensus, disrupt staking rewards, or conduct unauthorized state changes.

**Business Impact**  

Protocol misconfigurations can undermine network stability, result in financial losses, and harm the ecosystem relying on the protocol. Exploits may also lead to legal challenges and erode stakeholder confidence in the system.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Examine the protocol’s design and configuration for logical flaws 
1. Test the staking mechanism for vulnerabilities, such as reward manipulation
1. Attempt frontrunning attacks to exploit timing issues in transactions 
1. Analyze state transition validation logic for missing checks or weak points

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Conduct thorough audits of the protocol’s design and implementation.  
- Implement measures to mitigate timing-based attacks, such as transaction sequencing.  
- Use cryptographic methods to validate state transitions securely.  
- Regularly test the protocol under stress conditions to identify weaknesses.",unclassified,
Decentralized Application Misconfiguration - Protocol Security Misconfiguration - Node Level Denial Of Service,"Node-Level Denial of Service (DoS) vulnerabilities occur when a protocol’s nodes are susceptible to overload or disruption from excessive requests, inefficient resource management, or lack of rate limiting. Through this misconfiguration, an attacker can flood nodes with requests, causing network disruptions or temporary downtime. A node-level DoS attack can also prevent legitimate users from accessing the protocol, disrupting operations, and degrading the service's reliability.

**Business Impact**  

A DoS attack can impact availability, causing loss of trust and a potential decline in user engagement. Frequent disruptions could also affect the protocol’s revenue, especially if the network relies on transaction fees. In competitive markets, such reliability issues may damage the protocol’s reputation, causing long-term losses.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Identify the network nodes used by the protocol
1. Use {{ tool}} to send a high volume of requests to a specific node
1. Observe the node’s response to see if it slows or becomes unresponsive
1. Observe that the node lacks rate-limiting mechanisms

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Implement rate limiting on all nodes to restrict excessive requests from a single source.
- Use load balancers to distribute requests across nodes efficiently.
- Monitor node health in real-time, and automatically scale resources in response to increased demand.
- Establish alerting mechanisms for abnormal traffic patterns and implement automated mitigation strategies.",unclassified,
Algorithmic Biases,"Algorithmic bias occurs in an AI model when the algorithms used to develop the model produce biased outcomes as a result of inherent flaws or limitations in their design. This bias originates from assumptions made during algorithm development, selection of inappropriate models, or the way data is processed and weighted. This results in AI models that make unfair, skewed, or discriminatory decisions.

**Business Impact**

Aggregation bias in this AI model can result in reputational damage and indirect financial loss due to the loss of customer trust in the output of the model.

**Steps to Reproduce**

1. Select an AI algorithm known to have potential biases
1. Train the algorithm on a dataset that may amplify these biases
1. Test the algorithm's decisions or predictions on a diverse dataset
1. Identify and document instances where the algorithm's output is biased

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","Establish practices and policies that ensure responsible data collection and training. This can include:

- Conducting a comprehensive review of the training data to find and remediate biases. This includes re-sampling underrepresented groups and adjusting the model parameters to promote fairness.
- Business processes that index ethical frameworks, best practices, and concerns should be developed, monitored, and evaluated.
- Clearly define the desired outcomes of the AI model, then frame the key variables to capture.
- Ensuring that the data collected and used to train the AI model illustrates the environment that it will be deployed in and contains diverse and representative data.
- Design and develop algorithms that are sensitive to fairness considerations, and audit these regularly.
- Practice data collection principles that do not disadvantage specific groups.
- Document the development of the AI model, including all datasets, variables identified, and decisions made throughout the development cycle.",unclassified,
Algorithmic Biases - Aggregation Bias,"Aggregation bias occurs in an AI model when systematic favoritism is displayed when processing data from different demographic groups. This bias originates from training data that is skewed, or that has an under representation of certain groups. Outputs from AI models that have an aggregation bias can result in unequal treatment of users based on demographic characteristics, which can lead to unfair and discriminatory outcomes.

**Business Impact**

Aggregation bias in this AI model can result in reputational damage and indirect financial loss due to the loss of customer trust in the output of the model.

**Steps to Reproduce**

1. Obtain a diverse dataset containing demographic information
1. Feed the dataset into the AI model
1. Record the model's predictions and decisions
1. Compare outcomes across different demographic groups
1. Observe the systematic favoritism displayed by the model toward one or more specific groups

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","Establish practices and policies that ensure responsible data collection and training. This can include:

- Conducting a comprehensive review of the training data to find and remediate biases. This includes re-sampling underrepresented groups and adjusting the model parameters to promote fairness.
- Business processes that index ethical frameworks, best practices, and concerns should be developed, monitored, and evaluated.
- Clearly define the desired outcomes of the AI model, then frame the key variables to capture.
- Ensuring that the data collected and used to train the AI model illustrates the environment that it will be deployed in and contains diverse and representative data.
- Design and develop algorithms that are sensitive to fairness considerations, and audit these regularly.
- Practice data collection principles that do not disadvantage specific groups.
- Document the development of the AI model, including all datasets, variables identified, and decisions made throughout the development cycle.",unclassified,
Algorithmic Biases - Processing Bias,"Processing bias occurs when AI algorithms make biased decisions, or predictions, due to the way that they process data. This can be a result of the algorithm's design or the training data it has been trained on. Outputs from AI models that have a processing bias can result in discrimination, reinforcement of stereotypes, and unintended consequences such as amplification or polarization of viewpoints that disadvantage certain groups.

**Business Impact**

Processing bias in this AI model can result in reputational damage and indirect monetary loss due to the loss of customer trust in the output of the model.

**Steps to Reproduce**

1. Input the following benchmark dataset into the AI model: {{Benchmark data set}}
1. Split the dataset into two sets. One is to act as the training dataset and the other as the testing dataset.
1. Examine the model's predictions and note the following disparity exists: {{Disparity between Group A and Group B}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","Establish practices and policies that ensure responsible data collection and training. This can include:

- Conducting a comprehensive review of the training data to find and remediate biases. This includes re-sampling underrepresented groups and adjusting the model parameters to promote fairness.
- Business processes that index ethical frameworks, best practices, and concerns should be developed, monitored, and evaluated.
- Clearly define the desired outcomes of the AI model, then frame the key variables to capture.
- Ensuring that the data collected and used to train the AI model illustrates the environment that it will be deployed in and contains diverse and representative data.
- Design and develop algorithms that are sensitive to fairness considerations, and audit these regularly.
- Practice data collection principles that do not disadvantage specific groups.
- Document the development of the AI model, including all datasets, variables identified, and decisions made throughout the development cycle.",unclassified,
Protocol Specific Misconfiguration,"Protocol specific misconfiguration refers to errors in the implementation or configuration of a blockchain protocol, such as consensus mechanisms, staking logic, or bridge validation. These flaws can disrupt network operations or compromise security. An attacker can exploit these misconfigurations to cause denial of service, manipulate consensus, or conduct unauthorized transactions.

**Business Impact**  

Protocol misconfigurations can destabilize the network, cause financial losses, and erode trust in the blockchain ecosystem. These issues can also impact dependent decentralized applications and associated stakeholders.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Analyze the protocol design and configuration for missing checks or weaknesses  {{explanation of where + screenshot}}
1. Interact with the protocol using malformed inputs or transactions 
1. Test the behavior of consensus and state transitions under stress conditions  
1. Exploit identified weaknesses to gain unauthorized control or disrupt operations

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Conduct formal verification of protocol logic and consensus rules.  
- Regularly audit and test protocol configurations under various conditions.  
- Implement failsafes to detect and mitigate abnormal behaviors.  
- Use robust cryptographic primitives to secure protocol operations.",unclassified,
Protocol Specific Misconfiguration - Improper Validation And Finalization Logic,"Improper validation and finalization logic vulnerabilities arise when a protocol fails to enforce finality, or confirm transactions accurately, allowing for these unconfirmed or incorrect states to be exploited. An attacker can abuse this flaw to execute unauthorized operations or manipulate state data, leading to inconsistent data states, and allowing for unauthorized asset transfers or double-spending. 

**Business Impact**

This misconfiguration can cause data discrepancies, asset losses, and conflicts within the protocol. If such issues persist, they erode trust in the platform’s reliability and security, driving away users and damaging the platform's credibility. 

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Identify a transaction or process that involves finalization
1. Perform {{action}} to interact with the system before the transaction is finalized
1. Observe that the transaction finalizes with errors or fails to validate correctly

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Apply strict transaction validation checks to ensure each step is completed before proceeding.
- Implement multi-layered confirmation processes to verify asset transfers and state changes.
- Regularly perform audits of the transaction finalization logic for potential vulnerabilities.
- Use tools for real-time monitoring of transaction consistency to detect and flag irregularities.",unclassified,
Protocol Specific Misconfiguration - Sandwich Enabled Attack,"A Sandwich-enabled attack involves a misconfiguration that allows an attacker to observe a pending transaction, submit a transaction before it (front-running), and another transaction after it (back-running), effectively ""sandwiching"" the victim’s transaction. An attacker can exploit this vulnerability to profit by manipulating the market price of assets between their transactions, which can result in inflated transaction costs for users, market distortions, and potential financial losses.

**Business Impact**  

Sandwich attacks degrade user trust, as legitimate users bear higher transaction costs and potential asset price slippage. This can drive users away from the protocol and tarnish the platform’s reputation in the decentralized finance space.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Identify a transaction or function where price changes affect the outcome.
1. Submit a transaction before the target transaction to influence the price.
1. Submit a transaction after the target to capture the profit from the price change.
1. Observe the increased cost or asset price distortion resulting from the sandwiching technique.

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Use algorithms or tools that detect and prevent sandwich attacks by adjusting transaction execution parameters.
- Implement a time-lock feature that delays transaction execution, making it harder to sandwich transactions.
- Apply techniques like randomized transaction fees or batch processing to reduce the predictability of transaction execution.
- Establish educational materials to alert users of potential sandwich attack risks and preventive measures.",unclassified,
Protocol Specific Misconfiguration - Misconfigured Staking Logic,"Misconfigured staking logic occurs when the staking protocol does not adequately secure the staking and reward distribution mechanisms. These misconfigurations can allow an attacker to manipulate stake allocation, bypass staking requirements, or withdraw rewards without fulfilling conditions. This can result in a skewed reward distribution, allowing an attacker to unfairly increase their earnings or disrupt the staking pool.

**Business Impact**  

A compromised staking system leads to an uneven distribution of rewards, undermining user trust and reducing engagement in staking activities. The platform’s reputation is affected if users perceive the staking logic as unfair or exploitable, impacting revenue and user retention.

**Steps to Reproduce** 
 
1. Navigate to the following URL: {{URL}}
1. Stake tokens in the protocol and monitor reward distribution
1. Attempt to manipulate staking rules by performing {{action}}
1. Track if rewards are distributed inaccurately or disproportionately
1. Observe conditions such as minimum staking time or penalties are bypassed

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Enforce strict staking conditions, such as minimum staking time and penalties for early withdrawals.
- Regularly audit staking functions for proper reward calculations and accurate token transfers.
- Implement user authentication mechanisms to ensure only legitimate stakers earn rewards.
- Use a multi-signature contract for reward distributions to verify all staking transactions.",unclassified,
Protocol Specific Misconfiguration - Frontrunning-Enabled Attack,"Frontrunning-enabled attacks occur when transactions within the protocol are susceptible to being observed and prioritized by third parties, allowing attackers to insert their own transactions before the original transaction. An attacker can leverage this misconfiguration to profit by manipulating transaction ordering to their advantage. The manipulation of transaction sequences can lead to financial loss for users and disrupt market fairness.

**Business Impact**  

Frontrunning undermines user trust by creating an unfair environment in a financial application. It leads to financial losses for users and damages the protocol's reputation, as users might switch to other platforms with more transparent transaction processing.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Identify a function where transaction ordering could affect outcomes:
{{Function}}
1. Submit a transaction with specific parameters and track its order
1. Submit a similar transaction immediately afterward with modified parameters
1. Manipulate a transaction by {{action}} and observe that it can consistently be reordered to occur before other transactions

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Implement privacy-preserving techniques such as transaction encryption to prevent frontrunning.
- Use batch processing to make transaction ordering less predictable.
- Explore fair ordering mechanisms, like the use of a commit-reveal scheme, to ensure transparent transaction sequencing.
- Regularly audit and monitor transaction ordering to detect signs of frontrunning.",unclassified,
Cross Site Scripting Xss,"Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript is injected into a website. When a user visits the affected web page, the JavaScript executes within that user’s browser in the context of the domain.

From here, an attacker could carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session.
  
**Business Impact**

XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Log into an account and navigate to URL which contains the payload
1. Observe the JavaScript payload being executed

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

- All user input fields should be sanitized based on what the field is likely to contain. For example, a date field (01/01/2001) should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.
- Use appropriate HTTP response headers to ensure the browser correctly interprets responses. These should be customized specific to the application and its environment. For example:

    ``` HTTP
    X-Content-Type-Options: nosniff
    Content-Security-Policy: default-src ‘self’; script-src ‘self’
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, https://owasp.org/www-community/attacks/xss/"
Cross Site Scripting Xss - Off Domain,"Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript is injected into a website. When a user visits the affected web page, the JavaScript executes within that user’s browser in the context of the domain. XSS can be found in this application which allows an attacker to control code that is executed within a user’s browser in the context of a domain which is off the primary domain.

This carries the risk of an attacker being able to trigger an exploit on a separate domain, where only cookies scoped for that domain are at risk. By controlling code that is executed within a user’s browser, an attacker could carry out any action that the user is able to perform. This could include accessing any of the user's data and modifying information within the user’s permissions, assuming that there is a misconfiguration of the scoping for cookies and Cross-Origin Resource Sharing (CORS).
  
**Business Impact**

XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Log into an account and navigate to: {{URL}}
1. Observe the JavaScript payload being executed

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

- All user input fields should be sanitized based on what the field is likely to contain. For example, a date field (01/01/2001) should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.
- Use appropriate HTTP response headers to ensure the browser correctly interprets responses. These should be customized specific to the application and its environment. For example:

``` HTTP
X-Content-Type-Options: nosniff
Content-Security-Policy: default-src ‘self’; script-src ‘self’
```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, https://owasp.org/www-community/attacks/xss/"
Cross Site Scripting Xss - Off Domain - Data Uri,"Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript is injected into a website. When a user visits the affected web page, the JavaScript executes within that user’s browser in the context of the domain. XSS can be found in this application which allows an attacker to input data into the URL that can be interpreted as a JavaScript payload. The data is then executed in the context of a domain which is off the primary domain. 

This carries the risk of an attacker being able to trigger an exploit on a seperate domain. By controlling code that is executed within a user’s browser, an attacker could carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions.
  
**Business Impact**

XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Observe that a data URI is being used to request data
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Log into an account and navigate to URL which contains the payload
1. Observe the JavaScript payload being executed

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing:

{{screenshot}}","# Recommendations

All user input fields should be sanitized based on what the field is likely to contain. For example, a date of birth field should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.

Encode outputs of HTTP responses to prevent them from being interpreted as active content.

Use appropriate HTTP response headers to ensure the browser correctly interprets responses. For example:

``` bash

 x-content-type-options: nosniff
 Content-Security-Policy: default-src ‘self’; script-src ‘self’

```

Ensure access controls are managed on the principle of least privilege, and are routinely audited for unnecessary access.",unclassified,https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
Cross Site Scripting Xss - Referer,"Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript is injected into a website. When a user visits the affected web page, the JavaScript executes within that user’s browser in the context of the domain. Referer-based XSS can be found on this domain which allows an attacker to control code that is executed within a user’s browser. This occurs as the referer HTTP header is vulnerable to manipulation.

From here, an attacker could carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session.
  
**Business Impact**

XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Append the following JavaScript payload to the end of the Referrer header and forward the following request:

```HTTP
{{request}}
```

1. Log into an account and navigate to URL which contains the payload
1. Observe the JavaScript payload being executed

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

- All user input fields should be sanitized based on what the field is likely to contain. For example, a date field (01/01/2001) should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.
- Use appropriate HTTP response headers to ensure the browser correctly interprets responses. These should be customized specific to the application and its environment. For example:

``` HTTP
X-Content-Type-Options: nosniff
Content-Security-Policy: default-src ‘self’; script-src ‘self’
```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, https://owasp.org/www-community/attacks/xss/"
Cross Site Scripting Xss - Universal Uxss,"Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript is injected into a website. When a user visits the affected web page, the JavaScript executes within that user’s browser in the context of the domain. An instance of Universal XSS can be found on this domain, this allows an attacker to create a crafted URL, which when opened by a user, executes arbitrary JavaScript within that user’s browser affecting any user session opened or cached in the browser.

From here, an attacker could carry out any actions that the user is able to perform in the context of the domain for this application, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session.
  
**Business Impact**

XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Log into an account and navigate to URL which contains the payload
1. Observe the JavaScript payload being executed

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

- All user input fields should be sanitized based on what the field is likely to contain. For example, a date field (01/01/2001) should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.
- Use appropriate HTTP response headers to ensure the browser correctly interprets responses. These should be customized specific to the application and its environment. For example:

``` HTTP
X-Content-Type-Options: nosniff
Content-Security-Policy: default-src ‘self’; script-src ‘self’
```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, https://owasp.org/www-community/attacks/xss/"
Cross Site Scripting Xss - Flash Based,"Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript is injected into a website. When a user visits the affected web page, the JavaScript executes within that user’s browser in the context of the domain. Flash-based XSS can be found on this domain which allows an attacker to control code that is executed within a user’s browser.

From here, an attacker could carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session.
  
**Business Impact**

Flash-based XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to the following URL and login: {{URL}}
1. Upload the following flash file: {{.SWF}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Refresh the page and observe the JavaScript payload being executed

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

- Update to a technology stack that is not Flash (such as HTML5, JavaScript, and CSS3). Flash is now a depreciated technology that is no longer supported by many browsers. There are multiple security risks and performance issues related to Flash.
- All user input fields should be sanitized based on what the field is likely to contain. For example, a date field (01/01/2001) should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.
- Implement a Content Security Policy (CSP) to ensure the browser correctly interprets responses and restricts which sources can be used to execute scripts. This should be customized specific to the application and its environment. For example:

    ``` HTTP
    X-Content-Type-Options: nosniff
    Content-Security-Policy: default-src ‘self’; script-src ‘self’
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, https://owasp.org/www-community/attacks/xss/"
Cross Site Scripting Xss - Reflected,"Reflected Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript code is injected into a website. When a user visits the affected web page, the JavaScript code executes and its input is reflected in the user’s browser. Reflected XSS can be found on this domain which allows an attacker to create a crafted URL. When opened by a user,  this URL will execute arbitrary JavaScript within that user’s browser in the context of the domain.

When an attacker can control code that is executed within a user’s browser, they are able to carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session.

**Business Impact**

Reflected XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe the JavaScript payload being executed

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing at the vulnerable endpoint:

{{screenshot}}

This XSS vulnerability could be further abused by using the following JavaScript payload:

```JavaScript
{{payload}}
```

Here is a screenshot of the full exploit taking place:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

- All user input fields should be sanitized based on what the field is likely to contain. For example, a date field (01/01/2001) should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.
- Use appropriate HTTP response headers to ensure the browser correctly interprets responses. These should be customized specific to the application and its environment. For example:

```HTTP
X-Content-Type-Options: nosniff
Content-Security-Policy: default-src ‘self’; script-src ‘self’
```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, https://owasp.org/www-community/attacks/xss/"
Cross Site Scripting Xss - Reflected - Self,"Reflected Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript code is injected into a website. When a user visits the affected web page, the JavaScript code executes and its input is reflected in the user’s browser. Self-reflected XSS can be found on this domain which allows an attacker to create crafted JavaScript payload. Additionally, the attacker needs to socially engineer the user to paste the JavaScript payload into the user’s browser. If successful, the JavaScript will execute temporarily within that user’s browser in the context of the domain.

When an attacker can control code that is executed within a user’s browser, they are able to carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session.

**Business Impact**

Self-reflected XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Login as a user
1. Insert the following JavaScript payload:

```JavaScript
{{payload}}
```

1. Observe the JavaScript payload being executed

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing at the vulnerable endpoint:

{{screenshot}}","# Recommendations

All user input fields should be validated and sanitized based on what the field is likely to contain. For example, a date of birth field should only contain a maximum of 10 characters consisting of numbers and forward slashes. Drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server. Similarly, output encoding should be used to properly escape user input and dynamic content when it is displayed on a page.

Additionally, use appropriate HTTP response headers to ensure the browser correctly interprets responses. For example:

``` HTTP

 x-content-type-options: nosniff
 Content-Security-Policy: default-src ‘self’; script-src ‘self’

```",unclassified,https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
Cross Site Scripting Xss - Reflected - Non Self,"Reflected Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript code is injected into a website. When a user visits the affected web page, the JavaScript code executes and its input is reflected in the user's browser. Reflected XSS can be found on this domain which allows an attacker to create a crafted URL which when opened by a user will execute arbitrary JavaScript within that user's browser in the context of this domain.

When an attacker can control code that is executed within a user’s browser, they are able to carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session.

**Business Impact**

Reflected XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Forward the following request to the endpoint:

```HTTP Request
{{request}}
```

1. Observe the JavaScript payload being executed

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing at the vulnerable endpoint:

{{screenshot}}

This XSS vulnerability could be further abused by using the following JavaScript payload:

```JavaScript
{{payload}}
```

Here is a screenshot of the full exploit taking place:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

Where sources of information (input) are available, input should be sanitised to ensure only the desired information (and no special characters, or HTML) are being stored.  All user input fields should be sanitized based on what the field is likely to contain. For example, a date field `(01/01/2001)` should be stored using the appropriate data type, and not in a string based format.

Additionally, where sinks of information (output) are being presented in the application, the output should be appropriately encoded to ensure that HTML or Javascript isn't able to be rendered, should it have been stored via an input source.

It is also best practice to use appropriate HTTP response headers to ensure the browser correctly interprets responses. These should be customized specific to the application, and its environment. For example:

```
X-Content-Type-Options: nosniff
Content-Security-Policy: default-src ‘self’; script-src ‘self’
```",unclassified,
Cross Site Scripting Xss - Ie Only,"Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript is injected into a website. When a user visits the affected web page, the JavaScript executes within that user’s browser in the context of the domain. This instance of XSS can be found on the domain which allows an attacker to control code that is executed within a user’s Internet Explorer browser. From here, an attacker could carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions.
  
**Business Impact**

XSS could result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use an Internet Explorer browser to navigate to: {{URL}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Log into an account and navigate to URL which contains the payload
1. Observe the JavaScript payload being executed

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

- All user input fields should be sanitized based on what the field is likely to contain. For example, a date field (01/01/2001) should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.
- Use appropriate HTTP response headers to ensure the browser correctly interprets responses. These should be customized specific to the application and its environment. For example:

``` HTTP
X-Content-Type-Options: nosniff
Content-Security-Policy: default-src ‘self’; script-src ‘self’
```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, https://owasp.org/www-community/attacks/xss/"
Cross Site Scripting Xss - Stored,"Stored Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript is injected into a website. When a user visits the affected web page, the JavaScript executes within that user’s browser in the context of this domain. Stored XSS can be found on this domain which allows an attacker to control code that is executed within a user’s browser.

From here, an attacker could carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session.
  
**Business Impact**

Stored XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Log into an account and navigate to URL which contains the payload
1. Observe the JavaScript payload being executed

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

- All user input fields should be sanitized based on what the field is likely to contain. For example, a date field (01/01/2001) should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.
- Use appropriate HTTP response headers to ensure the browser correctly interprets responses. These should be customized specific to the application and its environment. For example:

    ``` HTTP
    X-Content-Type-Options: nosniff
    Content-Security-Policy: default-src ‘self’; script-src ‘self’
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, https://owasp.org/www-community/attacks/xss/"
Cross Site Scripting Xss - Stored - Privileged User To Privilege Elevation,"Stored Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript is injected into a website. When a user visits the affected web page, the JavaScript executes within that user’s browser in the context of this domain. Stored XSS can be found on this domain which allows an attacker to submit data to a form and escalate from a privileged user to a higher privileged user, which could include an Administrator level user. 

When an attacker can control code that is executed within a user’s browser, they are able to carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session.
  
**Business Impact**

Stored XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Log into the application at with the privileged user account (User B)
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe the JavaScript payload being executed
1. Log out of the privileged account (User B)
1. Log into a higher-privileged account (User A) and navigate to {{url}} which contains the payload
1. Log out of the higher-privileged account (User A) and log into the privileged account (User B)
1. Observe the privileged account (User B) has gained escalated privileges

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing at the vulnerable endpoint, {{URL}}:

{{screenshot}}","# Recommendations

All user input fields should be sanitized based on what the field is likely to contain. For example, a date of birth field should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.

Encode outputs of HTTP responses to prevent them from being interpreted as active content.

Use appropriate HTTP response headers to ensure the browser correctly interprets responses. For example:

``` bash
 x-content-type-options: nosniff
 Content-Security-Policy: default-src ‘self’; script-src ‘self’
```

Ensure access controls are managed on the principle of least privilege, and are routinely audited for unnecessary access.",unclassified,https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
Cross Site Scripting Xss - Stored - Non Admin To Anyone,"Stored Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript is injected into a website. When a user visits the affected web page, the JavaScript executes within that user’s browser in the context of this domain. Stored XSS can be found on this domain which allows an attacker to submit data to a form and escalate from no privileges to any user type, which could include an Administrator level user.

When an attacker can control code that is executed within a user’s browser, they are able to carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session.

to create a crafted JavaScript payload. When a user navigates to the page,  the arbitrary JavaScript executes within that user’s browser in the context of this domain.

**Business Impact**

Stored XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Navigate to {{URL}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Log into a privileged account (User A) and navigate to {{url}} which contains the payload
1. Observe the JavaScript payload being executed, capturing the cookies of User A
1. Logout of User A’s account

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing at the vulnerable endpoint, {{URL}}:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

- All user input fields should be sanitized based on what the field is likely to contain. For example, a date field (01/01/2001) should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.
- Use appropriate HTTP response headers to ensure the browser correctly interprets responses. These should be customized specific to the application and its environment. For example:

``` HTTP
X-Content-Type-Options: nosniff
Content-Security-Policy: default-src ‘self’; script-src ‘self’
```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, https://owasp.org/www-community/attacks/xss/"
Cross Site Scripting Xss - Stored - Url Based,"Stored Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript is injected into a website. When a user visits the affected web page, the JavaScript executes within that user’s browser in the context of this domain. Stored XSS that is based inside the URL can be found on this domain which allows an attacker to control code that is executed within a user’s browser.

From here, an attacker could carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session.
  
**Business Impact**

Stored XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Log into an account and navigate to URL which contains the payload
1. Observe the JavaScript payload being executed

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

- All user input fields should be sanitized based on what the field is likely to contain. For example, a date field (01/01/2001) should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.
- Use appropriate HTTP response headers to ensure the browser correctly interprets responses. These should be customized specific to the application and its environment. For example:

    ``` HTTP
    X-Content-Type-Options: nosniff
    Content-Security-Policy: default-src ‘self’; script-src ‘self’
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, https://owasp.org/www-community/attacks/xss/"
Cross Site Scripting Xss - Stored - Self,"Stored Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript is injected into a website. When a user visits the affected web page, the JavaScript executes within that user’s browser in the context of this domain. Self-stored XSS can be found on this domain which allows an attacker to create crafted JavaScript payload. Additionally, the attacker needs to socially engineer the user to paste the JavaScript payload into the user’s browser. If successful, the JavaScript will execute within that user’s browser in the context of this domain.

When an attacker can control code that is executed within a user’s browser, they are able to carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session.

**Business Impact**

Self-stored XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Login as a user
1. Insert the following JavaScript payload:

```JavaScript
{{payload}}
```

1. Observe the JavaScript payload being executed

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing at the vulnerable endpoint:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

- All user input fields should be sanitized based on what the field is likely to contain. For example, a date field (01/01/2001) should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.
- Implement a Content Security Policy (CSP) to ensure the browser correctly interprets responses and restricts which sources can be used to execute scripts. This should be customized specific to the application and its environment. For example:

    ``` HTTP
    Content-Security-Policy: default-src ‘self’; script-src ‘self’
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, https://owasp.org/www-community/attacks/xss/"
Cross Site Scripting Xss - Stored - Privileged User To No Privilege Elevation,"Stored Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript is injected into a website. When a user visits the affected web page, the JavaScript executes within that user’s browser in the context of this domain. Stored XSS can be found on this domain which allows an attacker to submit data to a form and gain access to an account of a user with the same privilege level.

When an attacker can control code that is executed within a user’s browser, they are able to carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session.
  
**Business Impact**

Stored XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Log into the application at with an account (User A)
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe the JavaScript payload being executed
1. Log out of the account for User A
1. Log into another account (User B) and navigate to {{url}} which contains the payload
1. Log out of User B and log into the account of User A
1. Observe the account for User A has access to account information of User B

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing at the vulnerable endpoint, {{URL}}:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

- All user input fields should be sanitized based on what the field is likely to contain. For example, a date field (01/01/2001) should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.
- Use appropriate HTTP response headers to ensure the browser correctly interprets responses. These should be customized specific to the application and its environment. For example:

    ``` HTTP
    X-Content-Type-Options: nosniff
    Content-Security-Policy: default-src ‘self’; script-src ‘self’
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, https://owasp.org/www-community/attacks/xss/"
Cross Site Scripting Xss - Trace Method,"Cross-Site Scripting (XSS) is a type of injection attack where malicious JavaScript is injected into a website. When a user visits the affected web page, the JavaScript executes within that user’s browser in the context of the domain. XSS can be found on this domain which allows an attacker to control code that is executed within a user’s browser. This is possible in legacy browsers as an attacker is able to use the TRACE HTTP method to bypass the `HttpOnly` flag set on the authorisation cookie.

From here, an attacker could hijack a user’s session and carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files.
  
**Business Impact**

XSS could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Log into an account and navigate to URL which contains the payload
1. Observe the JavaScript payload being executed

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

- Disable the use of the TRACE method to prevent attacks through this method. This can be achieved by configuring the web server or through WAF rules.
- All user input fields should be sanitized based on what the field is likely to contain. For example, a date field (01/01/2001) should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.
- Use appropriate HTTP response headers to ensure the browser correctly interprets responses. These should be customized specific to the application and its environment. For example:

``` HTTP
X-Content-Type-Options: nosniff
Content-Security-Policy: default-src ‘self’; script-src ‘self’
```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, https://owasp.org/www-community/attacks/xss/"
Lack Of Binary Hardening,"A lack of binary hardening of an application increases its attack surface and leaves it open to code analysis, reverse engineering, or modification of the application. An attacker with access to the code of an application with a lack of binary hardening can reverse engineer it and perform unauthorized code modification. From here, the attacker can access sensitive data stored, transmitted or processed by the application and perform further attacks on the application, the business, or its users.

**Business Impact**

This vulnerability can lead to indirect financial loss to the company due to data theft, application manipulation and corruption, or Denial of Service to customers and users of the application. It can also lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Navigate to the source code files of the application
1. Observe that there is no binary hardening for the application

**Proof of Concept (PoC)**

The screenshot below shows the lack of binary hardening:

{{screenshot}}","It is recommended that the application have binary hardening controls which prevent an attacker from analyzing, reverse engineering, or performing unauthorized code modifications. This can include jailbreak detections, source-code obfuscation, exploit mitigations, and runtime detection.

For further information, please refer to:
<https://owasp.org/www-project-mobile-top-10/2014-risks/m10-lack-of-binary-protections>",unclassified,
Lack Of Binary Hardening - Runtime Instrumentation Based,"A lack of runtime instrumentation-based binary hardening of an application increases its attack surface and leaves it open to code analysis, reverse engineering, or modification of the application. When an application cannot detect changes in the code base at runtime compared to known integrity checks, the application can react in unpredictable ways. An attacker can take advantage of this lack of checks at runtime and alter the performance of the application, then also perform further attacks on the application, the business, or its users.

**Business Impact**

This vulnerability can lead to indirect financial loss to the company due to data theft, application manipulation and corruption, or Denial of Service to customers and users of the application. It can also lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Navigate to the source code files of the application
1. Observe that there is no integrity checking in the source code at runtime

**Proof of Concept (PoC)**

The screenshot below shows the lack of binary hardening:

{{screenshot}}","It is recommended that the application have exploit mitigation controls which prevent an attacker from analyzing, reverse engineering, or performing unauthorized code modifications. This can include jailbreak detections, source-code obfuscation, binary hardening, and runtime detection.

For further information, please refer to:
<https://owasp.org/www-project-mobile-top-10/2014-risks/m10-lack-of-binary-protections>",unclassified,
Lack Of Binary Hardening - Lack Of Obfuscation,"A lack of obfuscation of the source code of an application increases its attack surface and leaves it open to code analysis, reverse engineering, or modification of the application. An attacker could abuse non-obfuscated source code of the application, read source code without any hindrances and perform  further attacks on the application, the business, or its users.

**Business Impact**

This vulnerability can lead to indirect financial loss to the company due to data theft, application manipulation and corruption, or Denial of Service to customers and users of the application. It can also lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Navigate to the source code files of the application
1. Observe that there is no obfuscation in the source code

**Proof of Concept (PoC)**

The screenshot below shows the lack of obfuscation:

{{screenshot}}","It is recommended to implement exploit mitigation controls within the application that prevent an attacker from analyzing, reverse engineering, or performing unauthorized code modifications. This can include source-code obfuscation, and tuning of the obfuscation to balance performance impacts.

For further information, please refer to:
<https://owasp.org/www-project-mobile-top-10/2014-risks/m10-lack-of-binary-protections>",unclassified,
Lack Of Binary Hardening - Lack Of Jailbreak Detection,"A lack of jailbreak (iOS) or root access (Android) detections in an application increases its attack surface and leaves it open to code analysis, reverse engineering, or modification of the application. An attacker could abuse the lack of jailbreak (iOS) or root access (Android) detections to access the internal file system of the application, or inject unauthorized code into the application.

**Business Impact**

This vulnerability can lead to indirect financial loss to the company due to data theft, application manipulation and corruption, or Denial of Service to customers and users of the application. It can also lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Jailbreak (iOS) or gain root access (Android) to a mobile device
1. Install the application on the mobile device
1. Open the application and observe that the application does not prevent access or acknowledge that the mobile device has been jailbroken (iOS) or that root access (Android) has been gained, indicating it lacks a detection mechanism

**Proof of Concept (PoC)**

The screenshot below shows the lack of jailbreak (iOS) or root access (Android) detections:

{{screenshot}}","It is recommended to implement exploit mitigation controls within the application that prevent an attacker from analyzing, reverse engineering, or performing unauthorized code modifications. This can include leveraging jailbreak detection frameworks and libraries specifically designed to identify jailbroken (or rooted Android) devices. A good framework will monitor the runtime environment and check for the presence of known jailbreak files and directories. 

For further information, please refer to:
<https://owasp.org/www-project-mobile-top-10/2014-risks/m10-lack-of-binary-protections>",unclassified,
Lack Of Binary Hardening - Lack Of Exploit Mitigations,"A lack of exploit mitigations in an application increases its attack surface and leaves it open to code analysis, reverse engineering, or modification of the application. An attacker could abuse the lack of exploit mitigations in order to run known exploits on the application. From here, the attacker can access sensitive data stored, transmitted or processed by the application and perform further attacks on the application, the business, or its users.

**Business Impact**

This vulnerability can lead to indirect financial loss to the company due to data theft, application manipulation and corruption, or Denial of Service to customers and users of the application. It can also lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Navigate to the source code files of the application
1. Run the following known exploit: {{payload}}
1. Observe that the application does not contain any mitigations to prevent this exploit

**Proof of Concept (PoC)**

The screenshot below shows the lack of exploit mitigation:

{{screenshot}}","It is recommended to implement exploit mitigation controls within the application that prevent an attacker from analyzing, reverse engineering, or performing unauthorized code modifications. This can include jailbreak detections, source-code obfuscation, binary hardening, and runtime detection.

For further information, please refer to:
<https://owasp.org/www-project-mobile-top-10/2014-risks/m10-lack-of-binary-protections>",unclassified,
Insufficient Security Configurability,"Insufficient security configurability refers to the lack of options or flexibility in configuring security settings within a system or application. This vulnerability may arise from hardcoded security configurations, limited options for customization, or inadequate documentation. Due to this, an attacker can manipulate data and perform actions that appear to originate from a legitimate user.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Login to the application at: {{url}}
2. Perform {{action}} and observe that the security configuration is weak

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the vulnerability:

{{screenshot}}",,unclassified,https://owasp.org/Top10/A05_2021-Security_Misconfiguration/
Insufficient Security Configurability - Weak Two Fa Implementation,"Two Factor Authentication (2FA) adds an extra layer of security to user accounts by prompting them to enter a uniquely generated one-time password (OTP) after they have successfully inputted their username and password. The application’s implementation of 2FA is weak which makes user accounts more susceptible to compromise. An attacker can take advantage of this weak 2FA implementation and potentially take over user accounts.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Login to the application at: {{url}}
1. When the two factor authentication step of the login is reached, request a code
1. Perform {{action}} and observe that the 2FA implementation is weak

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the weak implementation of 2FA:

{{screenshot}}","There is no single technique to implement 2FA securely. However, the following best practices should be adhered to:

- The 2FA code should be invalidated each time a new code is requested
- 2FA should be implemented for users upon sensitive actions such as login, change of password or security questions, elevation of user session, change of email address or phone number, and disabling of 2FA.
- The uniquely generated OTP should expire
- The page behind the 2FA step should not be able to be accessed directly by manipulating the URL
- 2FA should not be automatically disabled during the password recovery process
- The 2FA procedure should not disclose any sensitive information. For example, do not disclose the unredacted phone number of a user
- The 2FA process cannot depend on client-side modifiable header or status codes",unclassified,
Insufficient Security Configurability - Weak Two Fa Implementation - Two Fa Code Is Not Updated After New Code Is Requested,"Two Factor Authentication (2FA) adds an extra layer of security to user accounts by prompting them to enter a uniquely generated one-time password (OTP) after they have successfully inputted their username and password. A 2FA code is not updated when a new code is requested in the application which does not follow best practice for 2FA implementation. An attacker can take advantage of this weak 2FA implementation and potentially take over user accounts.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Login to the application at: {{url}}
1. When the 2FA step of the login is reached, request a code
1. When the first code is received, request a new code and verify that the second code is also received
1. Observe that the first and second code are identical, demonstrating that the 2FA code is not updated when a new code is requested

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates that the 2FA code is not updated when a new code is requested:

{{screenshot}}","It is recommended to update the 2FA code each time a new code is requested so that there is only one valid and unique code at a time.
Additionally, the following best practices should be adhered to for secure 2FA implementation:

- Users should have access to a failsafe login method if they don’t have access to their 2FA implementation
- 2FA should be implemented for users upon sensitive actions such as login, change of password or security questions, elevation of user session, change of email address or phone number, and disabling of 2FA.
- The uniquely generated OTP should expire
- The page behind the 2FA step should not be able to be accessed directly by manipulating the URL
- 2FA should not be automatically disabled during the password recovery process
- The 2FA procedure should not disclose any sensitive information. For example, do not disclose the unredacted phone number of a user
- The 2FA process cannot depend on client-side modifiable header or status codes",unclassified,
Insufficient Security Configurability - Weak Two Fa Implementation - Two Fa Secret Remains Obtainable After Two Fa Is Enabled,"Two Factor Authentication (2FA) adds an extra layer of security to user accounts by prompting them to enter a uniquely generated one-time password (OTP) after they have successfully inputted their username and password. The 2FA secret remains obtainable after initial setup in the application. This could allow an attacker with account access or physical access to bypass the 2FA system.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Login to the application at: {{url}}
1. Setup two factor authentication
1. After initial setup, observe that the two factor authentication secret is still obtainable at: {{url}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the full exploit:

{{screenshot}}","There is no single technique to implement 2FA securely. However, the following best practices should be adhered to:

- The 2FA code should be invalidated each time a new code is requested
- Users should have access to a failsafe login method if they don’t have access to their 2FA implementation
- 2FA should be implemented for users upon sensitive actions such as login, change of password or security questions, elevation of user session, change of email address or phone number, and disabling of 2FA.
- The uniquely generated OTP should expire
- The page behind the 2FA step should not be able to be accessed directly by manipulating the URL
- 2FA should not be automatically disabled during the password recovery process
- The 2FA procedure should not disclose any sensitive information. For example, do not disclose the unredacted phone number of a user
- The 2FA process cannot depend on client-side modifiable header or status codes",unclassified,
Insufficient Security Configurability - Weak Two Fa Implementation - Old Two Fa Code Is Not Invalidated After New Code Is Generated,"Two Factor Authentication (2FA) adds an extra layer of security to user accounts by prompting them to enter a uniquely generated one-time password (OTP) after they have successfully inputted their username and password. An older 2FA code is not invalidated when a new code is generated in the application. This could allow an attacker to perform a replay attack. In this kind of attack, an attacker can use older unused 2FA codes to bypass the 2FA implementation of the application.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Login to the application at: {{url}}
1. When the 2FA step of the login is reached, request a code
1. When the first code is received, request a new code and verify that the second code is also received
1. Input the first, older code into the 2FA input
1. Observe that the application allows the use of the first code after the second was generated, meaning it was not invalidated

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the old 2FA code not being invalidated:

{{screenshot}}","There is no single technique to implement 2FA securely. However, the following best practices should be adhered to:

- The 2FA code should be invalidated each time a new code is requested
- Users should have access to a failsafe login method if they don’t have access to their 2FA implementation
- 2FA should be implemented for users upon sensitive actions such as login, change of password or security questions, elevation of user session, change of email address or phone number, and disabling of 2FA.
- The uniquely generated OTP should expire
- The page behind the 2FA step should not be able to be accessed directly by manipulating the URL
- 2FA should not be automatically disabled during the password recovery process
- The 2FA procedure should not disclose any sensitive information. For example, do not disclose the unredacted phone number of a user
- The 2FA process cannot depend on client-side modifiable header or status codes",unclassified,
Insufficient Security Configurability - Weak Two Fa Implementation - Two Fa Secret Cannot Be Rotated,"Two Factor Authentication (2FA) adds an extra layer of security to user accounts by prompting them to enter a uniquely generated one-time password (OTP) after they have successfully inputted their username and password. The 2FA secret cannot be rotated in the application which does not follow best practice for 2FA implementation.If an attacker were able to compromise a user's 2FA system, the user would not be able to invalidate their 2FA secret.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Login to the application at: {{url}}
1. Setup two factor authentication
1. After the 2FA secret is created, observe that there is no way in which the secret can be rotated

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates that the 2FA code can’t be rotated:

{{screenshot}}","There is no single technique to implement 2FA securely. However, the following best practices should be adhered to:

- The 2FA code should be invalidated each time a new code is requested
- Users should have access to a failsafe login method if they don’t have access to their 2FA implementation
- 2FA should be implemented for users upon sensitive actions such as login, change of password or security questions, elevation of user session, change of email address or phone number, and disabling of 2FA.
- The uniquely generated OTP should expire
- The page behind the 2FA step should not be able to be accessed directly by manipulating the URL
- 2FA should not be automatically disabled during the password recovery process
- The 2FA procedure should not disclose any sensitive information. For example, do not disclose the unredacted phone number of a user
- The 2FA process cannot depend on client-side modifiable header or status codes",unclassified,
Insufficient Security Configurability - Weak Two Fa Implementation - Missing Failsafe,"Two Factor Authentication (2FA) adds an extra layer of security to user accounts by prompting them to enter a uniquely generated one-time password (OTP) after they have successfully inputted their username and password. Not providing a failsafe in the 2FA implementation in the application could prevent a user who has lost their 2FA device to an attacker from resetting the password of their account. An attacker can take advantage of this and potentially take over user accounts.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Login to the application at: {{url}}
1. Navigate to the 2FA registration page at: {{url}}
1. Register for 2FA, and observe that the implementation provides no failsafe login methods, such as offline backup codes

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the missing 2FA failsafe:

{{screenshot}}","It is recommended to implement a failsafe login method for users who don’t have access to their 2FA method.

Additionally, the following best practices should be adhered to for secure 2FA implementation:

- The 2FA code should be invalidated each time a new code is requested
- 2FA should be implemented for users upon sensitive actions such as login, change of password or security questions, elevation of user session, change of email address or phone number, and disabling of 2FA.
- The uniquely generated OTP should expire
- The page behind the 2FA step should not be able to be accessed directly by manipulating the URL
- 2FA should not be automatically disabled during the password recovery process
- The 2FA procedure should not disclose any sensitive information. For example, do not disclose the unredacted phone number of a user
- The 2FA process cannot depend on client-side modifiable header or status codes",unclassified,
Insufficient Security Configurability - Weak Registration Implementation,"When the registration implementation for an application is weak, it diminishes the integrity of the overall authentication process. An application's registration process can be weakened by a connection over HTTP, or by allowing users to submit a disposable or alias email address to register an account, for example.The weak registration implementation for this application could allow an attacker to abuse the registration process and bulk register fake user profiles to launch spam campaigns.

**Business Impact**

Having a weak registration implementation can result in reputational damage for the business through the impact to customers’ trust as they could believe that the business doesn’t take their account security seriously or trust that their data within will remain secure.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Register an account
1. {{action}} and observe that the registration implementation is weak

**Proof of Concept (PoC)**

The following screenshot shows the weak registration implementation:

{{screenshot}}","The application should only accept valid email addresses for all user accounts to minimize account abuse. Additionally, registration should occur over an HTTP connection to ensure that the network traffic cannot be sniffed by a local attacker.",unclassified,
Insufficient Security Configurability - Weak Registration Implementation - Allows Disposable Email Addresses,"When the registration implementation for an application is weak, it diminishes the integrity of the overall authentication process. The application allows users to submit a disposable or alias email address to register an account. An attacker can abuse this weakness to bulk register fake user profiles and use them to launch spam campaigns.

**Business Impact**

Having a weak registration implementation can result in reputational damage for the business through the impact to customers’ trust as they could believe that the business doesn’t take their account security seriously or trust that their data within will remain secure.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Register an account using a disposable email service
1. Observe that the account is created

**Proof of Concept (PoC)**

The following screenshot shows the weak registration implementation:

{{screenshot}}",The application should only accept valid email addresses for all user accounts to minimize account abuse. Email addresses can be validated by sending a validation email with a link that the user needs to click to finalize registration of their account. It is also recommended to maintain a comprehensive and regularly updated list of known disposable email providers. This list should be used to check against the email domain used during the registration process and block any registrations using disposable email addresses.,unclassified,
Insufficient Security Configurability - Weak Password Policy,"When the password policy for an application is weak, the strength of the overall authentication process for the application is diminished. Not having complexity requirements for passwords, password history checks, or enforcing account lockouts, all weaken the password policy. This application’s weak password policy decreases the time it takes an attacker to successfully guess account passwords through manual or automated processes. This can lead to account take over for accounts with weak passwords set.

**Business Impact**

Having a weak password policy can result in reputational damage for the business through the impact to customers’ trust as they could believe that the business doesn’t take their account security seriously or trust that their data within will remain secure.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Attempt to login
1. Observe that the application allows the use of weak passwords

**Proof of Concept (PoC)**

The following screenshot shows the weak password policy:

{{screenshot}}","The password policy should be sufficiently robust and contain the following guidelines for users:

- Have a minimum password length of eight characters and no maximum limit
- Require at least three different character types such as, upper and lower case letters, numbers, and special characters.
- Have a deny list of commonly used words and poor passwords such as, `password`, `password123`, the company’s name, or a user’s email address or username.
- When a user resets their password, they should not be able to use a previous password or increment a previous password in any way. For example, a user should not be able to change their password from `Correct-h0rse-1` to `Correct-h0rse-2`

Additionally, implementation of Multi-Factor Authentication (MFA) should be considered to provide an extra layer of security.",unclassified,
Insufficient Security Configurability - Weak Password Reset Implementation - Token Has Long Timed Expiry,"The password reset implementation needs to involve a unique, temporary high-entropy token that has a short expiry and can only be used once. When these conditions are not met, the password reset implementation is  considered weak. This diminishes the strength of the overall authentication process for the application and can lead to account takeover. The application’s password reset implementation is weak as it has a long timed expiry, giving an attacker more time to discover an unexpired reset password token and use it to take over its account.

**Business Impact**

Weak password reset implementation can result in reputational damage for the business through the impact to customers’ trust as they could believe that the business doesn’t take their account security seriously or trust that their data within will remain secure.

If an attacker successfully takes over an account by capturing a password reset token, it can lead to data theft from the business. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the level of access gained by an attacker.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Initiate a password reset
1. Observe within the HTTP interception proxy that the password reset token has a long timed expiry

**Proof of Concept (PoC)**

The following screenshot specifies the long timed expiry of the password reset token below:

{{screenshot}}","The password reset token expiry time should be shortened to reduce the attack surface. Overall, the password reset implementation should conform to the following guidelines:

A secure password policy should be in place for the user to create a strong new password
Password reset tokens should be long to protect against brute force guessinging attacks, linked to an individual, invalidated after use, and have a short expiry time
Passwords should be stored and transmitted securely
Once a user’s password has been reset, they should be prompted to login in again through the usual login portal and not automatically signed in",unclassified,
Insufficient Security Configurability - Weak Password Reset Implementation - Token Is Not Invalidated After New Token Is Requested,"The password reset implementation needs to involve a unique, temporary high-entropy token that has a short expiry and can only be used once. When these conditions are not met, the password reset implementation is  considered weak. This diminishes the strength of the overall authentication process for the application and can lead to account takeover.

The application does not invalidate the password reset token after a new token is requested. If an attacker were to gain access to the system used to store the reset token, they could use this unused token to reset the user's password and gain access to the account.

**Business Impact**

Weak password reset implementation can result in reputational damage for the business through the impact to customers’ trust as they could believe that the business doesn’t take their account security seriously or trust that their data within will remain secure.

If an attacker successfully takes over an account by capturing a password reset token, it can lead to data theft from the business. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the level of access gained by an attacker.

**Steps to Reproduce**

1. Use a browser to login and navigate to: {{URL}}
1. Initiate a password reset (request_1)
1. Initiate a password reset (request_2)
1. Open the received request_1 and observe that the password reset token is still valid

**Proof of Concept (PoC)**

The following screenshot shows that the password reset token is not invalidated after a subsequent request for a password reset:

{{screenshot}}","The password reset token should be invalidated after each subsequent request for a password rest from a user. Overall, the password reset implementation should conform to the following guidelines:

A secure password policy should be in place for the user to create a strong new password
Password reset tokens should be long to protect against brute force guessing attacks, linked to an individual, invalidated after use, and have a short expiry time
Passwords should be stored and transmitted securely
Once a user’s password has been reset, they should be prompted to login in again through the usual login portal and not automatically signed in",unclassified,
Insufficient Security Configurability - Weak Password Reset Implementation - Token Is Not Invalidated After Login,"The password reset implementation needs to involve a unique, temporary high-entropy token that has a short expiry and can only be used once. When these conditions are not met, the password reset implementation is  considered weak. This diminishes the strength of the overall authentication process for the application and can lead to account takeover.

The application does not invalidate the password reset token after the user successfully resets their password and login to the application. If an attacker were to gain access to the system used to store the reset token, they could use this unused token to reset the user's password and gain access to the account.

**Business Impact**

Weak password reset implementation can result in reputational damage for the business through the impact to customers’ trust as they could believe that the business doesn’t take their account security seriously or trust that their data within will remain secure.

If an attacker successfully takes over an account by capturing a password reset token, it can lead to data theft from the business. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the level of access gained by an attacker.

**Steps to Reproduce**

1. Use a browser to login and navigate to: {{URL}}
1. Initiate a password reset
1. Login to the application with the new password
1. Observe that the password reset token that was received in the earlier step is still valid

**Proof of Concept (PoC)**

The following screenshot shows that the password reset token is not invalidated after login below:

{{screenshot}}","The password reset token should be invalidated after a user successfully resets their password and logs into the application. Overall, the password reset implementation should conform to the following guidelines:

A secure password policy should be in place for the user to create a strong new password
Password reset tokens should be long to protect against brute force guessing attacks, linked to an individual, invalidated after use, and have a short expiry time
Passwords should be stored and transmitted securely
Once a user’s password has been reset, they should be prompted to login in again through the usual login portal and not automatically signed in",unclassified,
Insufficient Security Configurability - Weak Password Reset Implementation - Token Is Not Invalidated After Use,"The password reset implementation needs to involve a unique, temporary high-entropy token that has a short expiry and can only be used once. When these conditions are not met, the password reset implementation is  considered weak. This diminishes the strength of the overall authentication process for the application and can lead to account takeover.

The application does not invalidate the password reset token after its use. If an attacker were to gain access to the system used to store the reset token, or the email of the user, they could reset the users password again.

**Business Impact**

Weak password reset implementation can result in reputational damage for the business through the impact to customers’ trust as they could believe that the business doesn’t take their account security seriously or trust that their data within will remain secure.

If an attacker successfully takes over an account by capturing a password reset token, it can lead to data theft from the business. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the level of access gained by an attacker.

**Steps to Reproduce**

1. Use a browser to login and navigate to: {{URL}}
1. Initiate a password reset
1. Utilize the password reset token received to reset the password
1. Observe that the password reset token received earlier is still valid after being used

**Proof of Concept (PoC)**

The following screenshot shows that the password reset token is not invalidated after use:
{{screenshot}}","The password reset token should be invalidated after it has been used. Overall, the password reset implementation should conform to the following guidelines:

A secure password policy should be in place for the user to create a strong new password
Password reset tokens should be long to protect against brute force guessing attacks, linked to an individual, invalidated after use, and have a short expiry time
Passwords should be stored and transmitted securely
Once a user’s password has been reset, they should be prompted to login in again through the usual login portal and not automatically signed in",unclassified,
Insufficient Security Configurability - Weak Password Reset Implementation - Token Is Not Invalidated After Email Change,"The password reset implementation needs to involve a unique, temporary high-entropy token that has a short expiry and can only be used once. When these conditions are not met, the password reset implementation is  considered weak. This diminishes the strength of the overall authentication process for the application and can lead to account takeover. The application’s password reset implementation is weak as it allows an email that is no longer associated with the account to perform a password reset.

**Business Impact**

Weak password reset implementation can result in reputational damage for the business through the impact to customers’ trust as they could believe that the business doesn’t take their account security seriously or trust that their data within will remain secure.

If an attacker successfully takes over an account by capturing a password reset token, it can lead to data theft from the business. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the level of access gained by an attacker.

**Steps to Reproduce**

1. Use a browser to login and navigate to: {{URL}}
1. Initiate a password reset
1. Navigate to the following URL and modify the account email address
1. Observe that the password reset token that was received in the earlier step is still valid

**Proof of Concept (PoC)**

The following screenshot shows that the password reset token is not invalidated after email change below:

{{screenshot}}","The password reset token should be invalidated if the account email changes. Overall, the password reset implementation should conform to the following guidelines:

A secure password policy should be in place for the user to create a strong new password
Password reset tokens should be long to protect against brute force guessinging attacks, linked to an individual, invalidated after use, and have a short expiry time
Passwords should be stored and transmitted securely
Once a user’s password has been reset, they should be prompted to login in again through the usual login portal and not automatically signed in",unclassified,
Insufficient Security Configurability - Weak Password Reset Implementation - Token Is Not Invalidated After Password Change,"The password reset implementation needs to involve a unique, temporary high-entropy token that has a short expiry and can only be used once. When these conditions are not met, the password reset implementation is  considered weak. This diminishes the strength of the overall authentication process for the application and can lead to account takeover.

The application does not invalidate the password reset token after a password change. If an attacker were to gain access to the system used to store the reset token, they could use this unused token to reset the user's password and gain access to the account.

**Business Impact**

Weak password reset implementation can result in reputational damage for the business through the impact to customers’ trust as they could believe that the business doesn’t take their account security seriously or trust that their data within will remain secure.

If an attacker successfully takes over an account by capturing a password reset token, it can lead to data theft from the business. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the level of access gained by an attacker.

**Steps to Reproduce**

1. Use a browser to login and navigate to: {{URL}}
1. Initiate a password reset
1. Modify the password for the account
1. Observe that the password reset token received earlier is still valid

**Proof of Concept (PoC)**

The following screenshot shows that the password reset token is not invalidated after a password change:

{{screenshot}}","The password reset token should be invalidated once a user changes their password. Overall, the password reset implementation should conform to the following guidelines:

A secure password policy should be in place for the user to create a strong new password
Password reset tokens should be long to protect against brute force guessing attacks, linked to an individual, invalidated after use, and have a short expiry time
Passwords should be stored and transmitted securely
Once a user’s password has been reset, they should be prompted to login in again through the usual login portal and not automatically signed in",unclassified,
Insufficient Security Configurability - Password Policy Bypass,"When there is no password policy set, or the password policy can be bypassed, the overall strength of the authentication process for an application is diminished. A password policy bypass is present within this web application, allowing for weak passwords to be used by any user. This makes it easy for an attacker to use password spraying or brute forcing methods to guess users passwords, with minimal effort required to compromise multiple users’ accounts.

**Business Impact**

Having a password policy bypass present within the application can result in reputational damage for the business through the impact to customers’ trust as they could believe that the business doesn’t take their account security seriously or trust that their data within will remain secure.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Attempt to login
1. Observe that modifying the following parameter allows a user to bypass the password policy of the application:

​​{{parameter}}

**Proof of Concept (PoC)**

The following screenshot shows the bypass of the password policy:

{{screenshot}}","It is recommended to conduct a thorough assessment of the underlying issue that is causing the password policy to be bypassed. This should include a thorough code review. Once the underlying issue has been identified, prioritize its remediation.

A password policy should be set and thoroughly tested in a UAT environment before being pushed to a production environment to ensure that it is sufficiently robust. Overall, the password policy should contain the following guidelines for users:

- Have a minimum password length of eight characters and no maximum limit
- Require at least three different character types such as, upper and lower case letters, numbers, and special characters.
- Have a deny list of commonly used words and poor passwords such as, `password`, `password123`, the company’s name, or a user’s email address or username.
- When a user resets their password, they should not be able to use a previous password or increment a previous password in any way. For example, a user should not be able to change their password from `Correct-h0rse-1` to `Correct-h0rse-2`",unclassified,
Insufficient Security Configurability - No Password Policy,"When there is no password policy set, the strength of the overall authentication process for an application is diminished. No password policy is present within this web application, allowing for weak passwords to be used by any user, including Administrator accounts. This makes it relatively easy for an attacker to use password spraying or brute forcing methods to guess users passwords, with minimal effort required to compromise multiple users’ accounts.

**Business Impact**

Having no password policy can result in reputational damage for the business through the impact to customers’ trust as they could believe that the business doesn’t take their account security seriously or trust that their data within will remain secure.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Attempt to login
1. Observe that the application allows the use of weak passwords, such as `a`

**Proof of Concept (PoC)**

The following screenshot shows that there is no password policy:

{{screenshot}}","A password policy should be set and be sufficiently robust, containing the following guidelines for users:

Have a minimum password length of eight characters and no maximum limit
Require at least three different character types such as, upper and lower case letters, numbers, and special characters.
Have a deny list of commonly used words and poor passwords such as, `password`, `password123`, the company’s name, or a user’s email address or username.
When a user resets their password, they should not be able to use a previous password or increment a previous password in any way. For example, a user should not be able to change their password from `Correct-h0rse-1` to `Correct-h0rse-2`",unclassified,
Application Level Denial Of Service Dos,"Application-level Denial of Service (DoS) attacks are designed to deny service to users of an application by flooding it with many HTTP requests. This makes it impossible for the server to respond to legitimate requests in any practical time frame.

There is an application-level DoS vulnerability within this application that an attacker can use to exhaust resources, making the application unavailable for its designed purpose to legitimate users.

**Business Impact**

Application-level DoS can result in indirect financial loss for the business through the attacker’s ability to DoS the application. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Use the following payload:

{{payload}}

1. In the URL, insert the payload into the following parameter:

{{parameter}}

1. Observe that the payload causes a Denial of Service

**Proof of Concept (PoC)**

The screenshot below demonstrates the Denial of Service:

{{screenshot}}","It is recommended to perform input validation to limit the total request size, and file upload and extension sizes. and, It’s also important to prevent any user input based function or threading interaction. These preventative measures help against application-level DoS attacks.",unclassified,"https://www.bugcrowd.com/glossary/application-level-denial-of-service-dos/, https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html"
Application Level Denial Of Service Dos - Excessive Resource Consumption,"Application-level Denial of Service (DoS) attacks are designed to deny service to users of an application by flooding it with many HTTP requests. This makes it impossible for the server to respond to legitimate requests in any practical time frame.

There is an application-level DoS vulnerability within this application that an attacker can use to exhaust resources, making the application unavailable for its designed purpose to legitimate users.

**Business Impact**

Application-level DoS can result in indirect financial loss for the business through the attacker’s ability to DoS the application. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Use the following payload:

{{payload}}

1. In the URL, insert the payload into the following parameter:

{{parameter}}

1. Observe that the payload causes a DoS condition

**Proof of Concept (PoC)**

The screenshot below demonstrates the vulnerability:

{{screenshot}}","It is recommended to perform input validation to limit the total request size, and file upload and extension sizes. and, It’s also important to prevent any user input based function or threading interaction. These preventative measures help against application-level DoS attacks.",unclassified,"https://www.bugcrowd.com/glossary/application-level-denial-of-service-dos/, https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html"
Application Level Denial Of Service Dos - Excessive Resource Consumption - Injection Prompt,"Injection occurs when an attacker provides inputs to a Large Language Model (LLM) which causes a large amount of resources to be consumed. This can result in a Denial of Service (DoS) to users, incur large amounts of computational resource costs, or slow response times of the LLM.

**Business Impact**

This vulnerability can lead to reputational and financial damage of the company due an attacker incurring computational resource costs or denying service to other users, which would also impact customers' trust.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Inject the following prompt into the LLM:

```prompt
  {malicious prompt}
```

1. Observe that the LLM is slow to return a response

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","There is no single technique to prevent injection from occurring. Implementing the following defensive measures in the LLM can prevent and limit the impact of the vulnerability:

- Validate, sanitize, and treat any user or external inputs as untrusted input sources.
- Establish input limits using the LLM's context window to prevent resource exhaustion.
- Enforce API rate limits that restrict the number of requests that can be made in a specific time frame.
- Limit computational resource use per request.",unclassified,"https://owasp.org/www-project-top-10-for-large-language-model-applications/, https://owasp.org/www-community/attacks/Denial_of_Service"
Application Level Denial Of Service Dos - App Crash,"Application-level Denial of Service (DoS) attacks are designed to deny service to users of an application by flooding it with many HTTP requests. This makes it impossible for the server to respond to legitimate requests in any practical time frame.

There is an application-level DoS vulnerability within this iOS or Android application that causes it to crash. An attacker can use this vulnerability to exhaust resources, making the application unavailable for its designed purpose to legitimate users.

**Business Impact**

Application-level DoS can result in indirect financial loss for the business through the attacker’s ability to DoS the application. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Use the following payload:

{{payload}}

1. In the URL, insert the payload into the following parameter:

{{parameter}}

1. Observe that the payload causes a Denial of Service that has high impact or medium difficulty to be performed

**Proof of Concept (PoC)**

The screenshot below demonstrates the Denial of Service:

{{screenshot}}","It is recommended to perform input validation to limit the total request size, and file upload and extension sizes. and, It’s also important to prevent any user input based function or threading interaction. These preventative measures help against application-level DoS attacks.",unclassified,"https://www.bugcrowd.com/glossary/application-level-denial-of-service-dos/, https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html"
Application Level Denial Of Service Dos - App Crash - Malformed Ios Url Schemes,"Application-level Denial of Service (DoS) attacks are designed to deny service to users of an application by flooding it with many HTTP requests. This makes it impossible for the server to respond to legitimate requests in any practical time frame.

There is a local application-level DoS vulnerability within this iOS application that causes it to crash. An attacker can use this vulnerability to provide empty, malformed, or irregular data via a URL scheme, crashing the application and making it unavailable for its designed purpose to legitimate users.

**Business Impact**

Application-level DoS can result in indirect financial loss for the business through the attacker’s ability to DoS the application. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Use the following payload:

{{payload}}

1. In the URL, insert the payload into the following parameter:

{{parameter}}

1. Observe that the payload causes a Denial of Service

**Proof of Concept (PoC)**

The screenshot below demonstrates the Denial of Service:

{{screenshot}}","It is recommended to perform input validation to ensure that all inputs, including the URL Schemes sent to your application, meet the expected format and content while rejecting any malformed inputs. This can include limiting URL Schemes to ones that are expected or known in order to prevent attackers from using other URL Schemes to trigger crashes. It’s also important to implement exception handling so that the application gracefully handles errors without crashing.",unclassified,"https://www.bugcrowd.com/glossary/application-level-denial-of-service-dos/, https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html"
Application Level Denial Of Service Dos - App Crash - Malformed Android Intents,"Application-level Denial of Service (DoS) attacks are designed to deny service to users of an application by flooding it with many HTTP requests. This makes it impossible for the server to respond to legitimate requests in any practical time frame.

There is a local application-level DoS vulnerability within this Android application that causes it to crash. An attacker can use this vulnerability to provide empty, malformed, or irregular data via the Intent binding mechanism, crashing the application and making it unavailable for its designed purpose to legitimate users.

**Business Impact**

Application-level DoS can result in indirect financial loss for the business through the attacker’s ability to DoS the application. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Use the following payload:

{{payload}}

1. In the URL, insert the payload into the following parameter:

{{parameter}}

1. Observe that the payload causes a Denial of Service

**Proof of Concept (PoC)**

The screenshot below demonstrates the Denial of Service:

{{screenshot}}","It is recommended to perform input validation to limit the total request size, and file upload and extension sizes. and, It’s also important to prevent any user input based function or threading interaction. These preventative measures help against application-level DoS attacks.",unclassified,"https://www.bugcrowd.com/glossary/application-level-denial-of-service-dos/, https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html"
Application Level Denial Of Service Dos - High Impact And Or Medium Difficulty,"Application-level Denial of Service (DoS) attacks are designed to deny service to users of an application by flooding it with many HTTP requests. This makes it impossible for the server to respond to legitimate requests in any practical time frame.

There is an application-level DoS vulnerability within this application that has high impact or medium difficulty to be performed. An attacker can use this vulnerability to exhaust resources, making the application unavailable for its designed purpose to legitimate users, but not take down the application for all users.

**Business Impact**

Application-level DoS can result in indirect financial loss for the business through the attacker’s ability to DoS the application. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Navigate to the following URL: {{url}}
1. Use the following payload:

{{payload}}

1. In the URL, insert the payload into the following parameter:

{{parameter}}

1. Observe that the payload causes a Denial of Service that has high impact or medium difficulty to be performed

**Proof of Concept (PoC)**

The screenshot below demonstrates proof of the vulnerability:

{{screenshot}}","It is recommended to perform input validation to limit the total request size, and file upload and extension sizes. and, It’s also important to prevent any user input based function or threading interaction. These preventative measures help against application-level DoS attacks.",unclassified,"https://www.bugcrowd.com/glossary/application-level-denial-of-service-dos/, https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html"
Application Level Denial Of Service Dos - Critical Impact And Or Easy Difficulty,"Application-level Denial of Service (DoS) attacks are designed to deny service to users of an application by flooding it with many HTTP requests. This makes it impossible for the server to respond to legitimate requests in any practical time frame.

There is an application-level DoS vulnerability within this application that has critical impact or is easily performed. An attacker can use this vulnerability to exhaust resources, making the application unavailable for its designed purpose to legitimate users.

**Business Impact**

Application-level DoS can result in indirect financial loss for the business through the attacker’s ability to DoS the application. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Navigate to the following URL: {{url}}
1. Use the following payload:

{{payload}}

1. In the URL, insert the payload into the following parameter:

{{parameter}}

1. Observe that the payload causes a Denial of Service that has critical impact or is easy to perform

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) proof of the vulnerability:

{{screenshot}}","It is recommended to perform input validation to limit the total request size, and file upload and extension sizes. and, It’s also important to prevent any user input based function or threading interaction. These preventative measures help against application-level DoS attacks.",unclassified,"https://www.bugcrowd.com/glossary/application-level-denial-of-service-dos/, https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html"
Zero Knowledge Security Misconfiguration,"Zero knowledge security misconfiguration refers to issues in the implementation of zero-knowledge proofs, such as incorrect proof validation, weak cryptographic parameters, or improper handling of proof data. These misconfigurations can undermine the privacy and security guarantees of the system. An attacker can exploit this to compromise user anonymity, bypass constraints, or manipulate system behavior.

**Business Impact**

Misconfigurations in zero-knowledge systems can lead to breaches of sensitive data, loss of user trust, and financial exploitation. Such vulnerabilities may compromise the privacy features of the application and affect compliance with regulatory requirements.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Identify the incorrect logic or missing checks the zero-knowledge proof implementation {{explanation of where + screenshot}}  
1. Generate or manipulate proofs with invalid or weak parameters 
1. Submit these proofs to the system to test if they pass verification  
1. Observe unauthorized access, privacy violations, or data leaks  

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Regularly audit zero-knowledge implementations and parameter settings.  
- Use well-established cryptographic libraries for proof generation and validation.  
- Implement rigorous input validation to detect malformed proofs.  
- Employ formal verification to ensure proof logic integrity.",unclassified,
Zero Knowledge Security Misconfiguration - Improper Proof Validation And Finalization Logic,"This misconfiguration occurs when a zero-knowledge proof system fails to adequately validate or finalize proofs submitted to the protocol. This misconfiguration can arise from incorrect implementation of proof verification algorithms, missing integrity checks, or inconsistent finalization processes. An attacker can exploit this vulnerability to submit invalid or fraudulent proofs, compromising the integrity of the system and potentially enabling unauthorized actions such as fund withdrawals or state alterations.

**Business Impact**

Improper validation of proofs can lead to financial losses, protocol instability, and erosion of user trust. The system may become vulnerable to exploits that undermine its cryptographic guarantees, which could have severe reputational and operational consequences.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}} 
1. Submit a zero-knowledge proof that does not adhere to the expected structure or validity criteria  
1. Observe that the system accepts the invalid proof without detecting inconsistencies
1. Attempt to finalize the proof and trigger subsequent actions, such as withdrawals or state changes  
1. Observe that the system fails to reject the invalid proof or reverts the transaction

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Implement rigorous validation checks for all submitted proofs.  
- Use well-tested and widely adopted cryptographic libraries for proof verification.  
- Regularly audit the proof finalization and validation logic to ensure consistency.  
- Incorporate fallback mechanisms to reject or halt processing of suspicious proofs.",unclassified,
Zero Knowledge Security Misconfiguration - Mismatching Bit Lengths,"This misconfiguration occurs when the system misaligns bit lengths during cryptographic operations, data encoding, or protocol interactions due to inconsistent implementation of data structures, or the improper handling of variable bit lengths. An attacker can exploit mismatching bit lengths to cause errors, bypass cryptographic guarantees, or inject malformed data.

**Business Impact** 

Mismatched bit lengths can lead to operational failures, security vulnerabilities, and protocol instability. Exploits may disrupt cryptographic processes, compromise data integrity, and expose the system to Denial of Service (DoS) or other attacks.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Identify a cryptographic operation or protocol process that rely on specific bit lengths 
1. Submit data with mismatched bit lengths to test the system's handling of the input  
1. Observe if the system processes or errors on invalid inputs  

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Standardize bit lengths across all cryptographic operations and data structures.  
- Implement validation checks for bit length alignment during input processing.  
- Use widely adopted cryptographic libraries that enforce consistent bit lengths.  
- Test the system for edge cases and malformed inputs to detect vulnerabilities.",unclassified,
Zero Knowledge Security Misconfiguration - Missing Constraint,"This misconfiguration occurs when a smart contract omits necessary transaction constraints in its computational logic or cryptographic circuits. Without proper constraints, invalid or malicious inputs can pass verification processes. An attacker can exploit a lack of constraint type to bypass rules, commit fraudulent transactions, or gain unauthorized access to system functions.

**Business Impact** 
 
The absence of constraints can compromise the integrity of the blockchain protocol, leading to financial losses, reduced system reliability, and reputational damage. Exploits may allow attackers to manipulate on-chain state or bypass critical security measures.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Analyze the constraint logic in the relevant protocol or smart contract  
1. Identify {{specific operations or inputs}} is missing necessary validations  
1. Submit invalid data or transactions designed to exploit the missing constraint  
1. Observe that the system processes these invalid operations without errors

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Define and implement comprehensive constraint logic during protocol and contract development.  
- Perform rigorous code reviews and formal verification of cryptographic circuits.  
- Test the system with edge cases and malicious inputs to identify missing constraints.  
- Conduct periodic audits of validation rules and update them as necessary.",unclassified,
Zero Knowledge Security Misconfiguration - Misconfigured Trusted Setup,"This misconfiguration occurs when the initialization phase of a zero-knowledge proof system or cryptographic protocol is improperly implemented. This includes issues like insecure generation of parameters, insufficient randomness, or reliance on untrustworthy parties. An attacker can exploit this misconfiguration to manipulate the trusted setup, compromising the system's security guarantees and enabling unauthorized actions.

**Business Impact**  

A misconfigured trusted setup undermines the cryptographic integrity of the system, potentially leading to financial fraud, privacy breaches, and loss of user confidence. The damage may extend to the entire ecosystem relying on the misconfigured protocol.




**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Analyze the trusted setup process and parameter generation logic  
1. Identify the point of vulnerability:
{{e.g.insufficient randomness, or insecure key generation}}  
1. Tamper with the setup process or manipulate input parameters  
1. Observe that the misconfiguration allows for unauthorized actions, or data exposure

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Use secure and well-audited processes for trusted setup parameter generation.  
- Incorporate multi-party computation (MPC) techniques to minimize reliance on single trusted entities.  
- Regularly verify the integrity of the trusted setup through independent audits.  
- Design the protocol to minimize reliance on trusted setups where feasible.",unclassified,
Zero Knowledge Security Misconfiguration - Missing Range Check,"This misconfiguration occurs when a blockchain protocol or smart contract fails to validate that input values fall within acceptable ranges. Without range checks, an attacker can provide extreme or invalid values, leading to overflow errors, bypassed constraints, manipulation of system behavior, Denial of Service (DoS), or unauthorized extraction of funds.

**Business Impact**  

Missing range checks can result in operational failures, financial losses, and protocol vulnerabilities. Exploits may undermine user trust, damage reputations, and lead to cascading issues across the system.

**Steps to Reproduce** 

1. Navigate to the following URL: {{URL}}
1. Inspect the input validation logic for arithmetic and cryptographic operations 
1. Submit values that exceed the expected range 
1. Observe that the system processes these inputs without detecting errors  

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Define and enforce range checks for all relevant inputs during system design.  
- Use libraries and frameworks with built-in range validation.  
- Test the system with edge-case and extreme values to identify missing range checks.  
- Conduct regular security audits to ensure input validation integrity.",unclassified,
Zero Knowledge Security Misconfiguration - Deanonymization Of Data,"This misconfiguration in zero-knowledge systems occurs when sensitive information or user identities can be inferred through patterns, metadata, or insufficient cryptographic safeguards. It often stems from poor design of the zero-knowledge circuit or improper handling of metadata. An attacker can exploit this by analyzing on-chain transactions, metadata, or computational patterns to reveal private user data.

**Business Impact**

Deanonymization undermines the privacy guarantees of zero-knowledge systems, potentially exposing users to surveillance, identity theft, or targeted attacks. This can harm user trust, lead to legal ramifications, and damage the platform's reputation.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Analyze the metadata or patterns of zero-knowledge transactions on-chain
1. Attempt to correlate transaction details with external information sources
1. Identify that there are  inconsistencies or leaks in the cryptographic implementation
1. Test if specific data inputs produce identifiable patterns in the proof output  
1. Observe the ability to infer private data or user identities from transaction analysis

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Employ secure cryptographic designs that minimize metadata exposure.  
- Regularly audit zero-knowledge circuits for information leakage risks.  
- Use cryptographic techniques such as oblivious transfer or secure shuffling to obscure patterns.  
- Conduct privacy stress tests to ensure that data remains fully anonymized.",unclassified,
Insecure Data Storage,"Insecure data storage can occur in both the client and server sides of an application. When data from the application is stored insecurely it is susceptible to being identified and used maliciously. An attacker with access to the insecurely stored data of this application can leverage the data to gather further information on users and the application, and use it to perform further attacks.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Login to the application and input data so that it is stored by the application
1. Navigate to where the application stores the gathered information
1. Navigate to the following URL: {{URL}}
1. Observe the application data that is stored unencrypted

**Proof of Concept (PoC)**

The screenshots below demonstrate the insecure data storage:

{{screenshot}}","Where possible, do not store sensitive data. If sensitive data needs to be stored, it should be encrypted while it is being stored and transmitted to and from the application.",unclassified,
Insecure Data Storage - Screen Caching Enabled,"Screen caching occurs when an application is sent to the background and a screenshot is taken in order to make it appear that the application is shrinking while moving between applications on the mobile screen. Personal information can be unknowingly captured in this screen cache and stored unencrypted on the phone. An attacker could abuse this screen caching being enabled to steal sensitive information that is captured and stored unencrypted when a user exits the application.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Log in to the mobile application and access a screen where sensitive information is displayed
1. Click the home button, and navigate to where the mobile operating system stores cached application screenshots
1. Observe the screenshot taken that captures sensitive information when the home button was clicked

**Proof of Concept (PoC)**

The screenshots below demonstrate the screen caching displaying sensitive information:

{{screenshot}}","For any application pages that contain sensitive information, it is recommended to blur or hide the contents of the screen when it is sent to the background.",unclassified,
Insecure Data Storage - Server Side Credentials Storage,"When sensitive application data is stored insecurely in server-side storage it is susceptible to being identified and used maliciously. An attacker can abuse server-side credential storage by using another vulnerability to gain access to the server of the application and exfiltrating all the credentials. With these plaintext credentials, an attacker can take over user accounts or impersonate users within the application.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust. If an attacker is successful in exfiltrating user credentials from the server it can lead to fraud and data loss for the company.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Register an account in the application and create credentials for the account
1. Use a browser to navigate to: {{URL}}
1. Using the HTTP interception proxy, observe that the application is storing user credentials on their server

**Proof of Concept (PoC)**

The screenshots below demonstrate the insecure data storage:

{{screenshot}}","Where possible, do not store sensitive data. If sensitive data needs to be stored, it should be encrypted while it is being stored and transmitted to and from the application.",unclassified,
Insecure Data Storage - Server Side Credentials Storage - Plaintext,"When sensitive application data is stored insecurely in server-side storage it is susceptible to being identified and used maliciously. An attacker can abuse server-side credential storage by using another vulnerability to gain access to the server of the application and exfiltrating all the plaintext credentials. With these plaintext credentials, an attacker can take over user accounts or impersonate users within the application.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust. If an attacker is successful in exfiltrating user credentials from the server it can lead to fraud and data loss for the company.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Register an account in the application and create credentials for the account
1. Use a browser to navigate to: {{URL}}
1. Using the HTTP interception proxy, observe that the application is storing user credentials on their server in plaintext

**Proof of Concept (PoC)**

The screenshots below demonstrate the insecure data storage:

{{screenshot}}","Where possible, do not store sensitive data. If sensitive data needs to be stored, it should be encrypted while it is being stored and transmitted to and from the application.",unclassified,
Insecure Data Storage - Sensitive Application Data Stored Unencrypted,"Insecure data storage can occur in both the client and server sides of an application. When sensitive application data is stored insecurely it is susceptible to being identified and used maliciously. An attacker could abuse this unencrypted data storage to steal sensitive information that a user inputted. With this sensitive information, a malicious attacker could perform further attacks on the application or impersonate the user.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Login to the application and input personal, sensitive data so that it is stored by the application
1. Navigate to where the application stores the gathered information
1. Observe the sensitive application data that is stored unencrypted

**Proof of Concept (PoC)**

The screenshots below demonstrate the insecure data storage:

{{screenshot}}","It is recommended to implement strong encryption for sensitive data before it is stored. Alongside this, secure key management and secure file permission practices should be in use to minimize access to authorized persons only.",unclassified,
Insecure Data Storage - Sensitive Application Data Stored Unencrypted - On External Storage,"When sensitive application data is stored insecurely on external storage  it is susceptible to being identified and used maliciously. An attacker could abuse this unencrypted data storage to steal sensitive information that a user inputted. With this sensitive information, a malicious attacker could perform further attacks on the application or impersonate the user.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Login to the application and input personal, sensitive data so that it is stored by the application
1. Navigate to where the application stores the gathered information
1. Observe the sensitive application data that is stored unencrypted

**Proof of Concept (PoC)**

The screenshots below demonstrate the insecure data storage:

{{screenshot}}","It is recommended to implement strong encryption for sensitive data before it is stored in external storage. Alongside this, secure key management and secure file permission practices should be in use to minimize access to authorized persons only.",unclassified,
Insecure Data Storage - Sensitive Application Data Stored Unencrypted - On Internal Storage,"When sensitive application data is stored insecurely on internal storage it is susceptible to being identified and used maliciously. An attacker could abuse this unencrypted data storage to steal sensitive information that a user inputted. With this sensitive information, a malicious attacker could perform further attacks on the application or impersonate the user.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Login to the application and input personal, sensitive data so that it is stored by the application
1. Navigate to where the application stores the gathered information
1. Observe the sensitive application data that is stored unencrypted

**Proof of Concept (PoC)**

The screenshots below demonstrate the insecure data storage:

{{screenshot}}","It is recommended to implement strong encryption for sensitive data before it is stored in internal storage. Alongside this, secure key management and secure file permission practices should be in use to minimize access to authorized persons only.",unclassified,
Insecure Data Storage - Non Sensitive Application Data Stored Unencrypted,"Insecure data storage can occur in both the client and server sides of an application. Non-sensitive data from the application is stored unencrypted and is susceptible to being identified and used maliciously. An attacker with access to the unencrypted non-sensitive data can leverage the data to gather further information on users and the application, and use it to perform further attacks.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Login to the application and input data so that it is stored by the application
1. Navigate to where the application stores the gathered information
1. Navigate to the following URL: {{URL}}
1. Observe the application data that is stored unencrypted

**Proof of Concept (PoC)**

The screenshots below demonstrate the insecure data storage:

{{screenshot}}","It is recommended to implement strong encryption for data before it is stored. Alongside this, secure key management and secure file permission practices should be in use to minimize access to authorized persons only. All data should be encrypted while it is being transmitted to and from the application.",unclassified,
Server Side Injection,"Server-side injection allows attackers to inject malicious code into server-side scripts. As a result, an attacker is able to manipulate the application to include a malicious script which is executed by the server. This can lead to unauthorized access or manipulation of data.

**Business Impact**

The vulnerability can result in data theft and manipulation, and reputational damage for the business as customers' trust is negatively impacted by an attacker’s ability to access and modify data on a server.

**Steps to Reproduce**

1. In a browser, navigate to the URL: {{url}}
1. Identify that the following input field that is vulnerable to injection: {{vulnerable input field}}
1. Inject the following code into the vulnerable input:
{{code}}
1. Submit the form or input data containing the injected code
1. Observe the response from the server, noticing any unexpected behavior or error messages

#### Proof of Concept

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","All user input should be sanitized using allow lists (valid characters and code strings), disallow lists ( invalid characters and code strings), and escape sanitizing (elimination of invalid data requests). It is best practice that all user input goes through a validation process which only allows content to be processed by the server if it passes validation.",unclassified,https://owasp.org/www-project-proactive-controls/v3/en/c5-validate-inputs
Server Side Injection - Remote Code Execution Rce,"Remote Code Execution (RCE) is a vulnerability that allows commands to be executed remotely on a target machine by crafting a request within the application where there should be no context to access or execute code.

A RCE vulnerability in this application allows a malicious attacker to remotely execute code on the server, enabling an attacker to extract passwords, reconfigure running services, move laterally into attached networks, and potentially take over the server.

**Business Impact**

RCE could lead to data theft through the attacker's ability to manipulate data through their access to the application server. These malicious actions could also result in reputational damage for the business through the impact to customers' trust.

**Steps to Reproduce**

Example:

1. Using a Machine with access to `curl`, run the command `curl {{url}}/cmd?=ping%20192.168.1.1;cat%20/etc/hostname`
1. In the terminal, you will see the output of the ping command, then the hostname of the server hosting this website.

#### Proof of Concept

The screenshot below demonstrates the RCE in the application through the specified parameter:

{{screenshot}}","All user inputs should be sanitized using allow lists (valid characters and code strings), disallow ( invalid characters and code strings), and escape sanitizing (elimination of invalid data requests). It is best practice that all user input goes through a validation process which only allows content to be processed by the database if it passes validation.

It is also important to keep all systems, software and operating systems up-to-date with a repeatable patch management process, as RCE vulnerabilities can exist within 3rd party components.",unclassified,
Server Side Injection - Xml External Entity Injection Xxe,"External Entity Injection via XML (XXE) is a vulnerability within XML logic that allows a user to insert XML that references an external file or system. The XXE vulnerability identified in this application can be used by an attacker to scan underlying systems for open ports, request confidential files, and access functionality of the connected systems that wouldn't otherwise be available. From here, the attacker may be able to exfiltrate data, interact with underlying systems, and deny service to systems via XML injections.

**Business Impact**

XXE can lead to reputational damage for the business due to a loss in confidence and trust by users. It can also result in data theft and indirect financial losses to the business through the costs of notification and rectifying and breached PII data.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. {{action}} and intercept the request in a the HTTP interception proxy
1. Replace/append {{parameter}} value with {{value}} to {{action}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the XXE:

{{screenshot}}","XXE vulnerabilities can be reduced through secure coding practices while disallowing declared DTD inclusion in the XML documents.

For further information, please see the following resource:
<https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html>",unclassified,
Server Side Injection - Http Response Manipulation,"HTTP response manipulation is a vulnerability that exploits the way HTTP headers parse certain characters. Appending characters to HTTP headers or otherwise altering the content of a HTTP header, can allow the insertion of payloads into a header which can result in the manipulation of cookies, server information, and status codes.

This application is vulnerable to HTTP response manipulation, which an attacker can abuse to write data into the HTTP response body. From here, an attacker could insert their own session cookies to user session, append HTML to run code within a user's browser, or possibly cause a redirect to a website under their control.

**Business Impact**

HTTP response manipulation can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. {{action}} and intercept the request in a the HTTP interception proxy
1. Insert the following payload to {{parameter}}: {{value}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the HTTP response manipulation:

{{screenshot}}",It is recommended to properly sanitize the `Location` header and deny characters such as `\r` and `\n`.,unclassified,"https://owasp.org/www-community/attacks/HTTP_Response_Splitting, https://cwe.mitre.org/data/definitions/113.html, https://capec.mitre.org/data/definitions/34.html"
Server Side Injection - Http Response Manipulation - Response Splitting Crlf,"Response splitting via Carriage Return Line Feed (CRLF) is a vulnerability that exploits the way HTTP headers parse certain characters such as `\r`and `\n`. Appending these characters to HTTP headers can allow the insertion of payloads into a header which can result in the manipulation of cookies, server information, and status codes.

This application is vulnerable to response splitting, which an attacker can abuse to write data into the HTTP response body. From here, an attacker could insert their own session cookies to user session, append HTML to run code within a user's browser, or possibly cause a redirect to a website under their control.

**Business Impact**

Response splitting can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. {{action}} and intercept the request in a the HTTP interception proxy
1. Insert the following payload to {{parameter}}: {{value}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the response splitting:

{{screenshot}}",It is recommended to properly sanitize the `Location` header and deny characters such as `\r` and `\n`.,unclassified,"https://owasp.org/www-community/attacks/HTTP_Response_Splitting, https://cwe.mitre.org/data/definitions/113.html, https://capec.mitre.org/data/definitions/34.html"
Server Side Injection - Parameter Pollution,"Parameter pollution is an attack which exploits the application logic that parses the same parameter when multiple are included in a request. This application has a HTTP parameter pollution flaw which allows an attacker to process a parameter multiple times. This is achieved via crafting a request with multiple instances of the same parameter in the request. As a result, the attacker may be able to trigger application errors or bypass input validation on forms.

**Business Impact**

Parameter pollution can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. {{action}} and intercept the request in a the HTTP interception proxy
1. Insert the following payload after {{parameter}}: {{value}}
1. Replay, or forward, the request to see: {{action}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the parameter pollution:

{{screenshot}}","For parameter delimiters, ensure all user input is properly sanitized.",unclassified,"https://owasp.org/www-community/attacks/Web_Parameter_Tampering, https://capec.mitre.org/data/definitions/460.html, https://cwe.mitre.org/data/definitions/233.html"
Server Side Injection - Parameter Pollution - Social Media Sharing Buttons,"Parameter pollution is an attack which exploits the application logic that parses the same parameter when multiple are included in a request. This application has a HTTP parameter pollution flaw which allows an attacker to process a parameter multiple times. This is achieved via crafting a request with multiple instances of the same parameter in the request. As a result, the attacker may be able to trigger application errors or bypass input validation on forms.

**Business Impact**

Parameter pollution can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. {{action}} and intercept the request in a the HTTP interception proxy
1. Insert the following payload after {{parameter}}: {{value}}
1. Replay, or forward, the request to see: {{action}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the parameter pollution:

{{screenshot}}","For parameter delimiters, ensure all user input is properly sanitized.",unclassified,"https://owasp.org/www-community/attacks/Web_Parameter_Tampering, https://capec.mitre.org/data/definitions/460.html, https://cwe.mitre.org/data/definitions/233.html"
Server Side Injection - File Inclusion,"Developers often include external files to incorporate images and external code libraries into applications. File inclusion vulnerabilities can occur when there are no limits placed around the type of files, or how an application allows files to be included. As a result, an attacker is able to manipulate the application to include a malicious file which is executed by the application or server. In doing so, an attacker can expose sensitive data, and in some instances gain Remote Code Execution (RCE).

**Business Impact**

File inclusion can result in data theft and manipulation, and reputational damage for the business as customers' trust is negatively impacted by an attacker’s ability to access and modify data on a server.

**Steps to Reproduce**

1. In a browser, navigate to the URL: `{{url}}viewer.php?filename=a\./../../etc/hostname`
1. You will see the hostname of the server running this request in the browser

**Proof of Concept (PoC)**

The screenshot below demonstrates the file inclusion:

{{screenshot}}","# Recommendations(s)

All user input including file uploads should be inspected and validated File upload extension types should be limited to those needed only for business functionality. File names should be limited in character length and be generated by the application, not by users.",unclassified,
Server Side Injection - File Inclusion - Local,"Developers often include external files to incorporate images and external code libraries into applications. Local file inclusion vulnerabilities can occur when an application allows files to be included in an unsafe way on a local machine, but the inclusion of remote files is denied. As a result, an attacker is able to manipulate the application by including a malicious file on the local machine, which is executed by the application or server. In doing so, an attacker can expose sensitive data, and in some instances gain Remote Code Execution (RCE).

**Business Impact**

Local file inclusion can result in data theft and manipulation, and reputational damage for the business as customers' trust is negatively impacted by an attacker’s ability to access and modify data on a server.

**Steps to Reproduce**

1. Using a browser, navigate to: `{{url}}/../../etc/hostname`
1. You will see the hostname of the server running this website

**Proof of Concept (PoC)**

The screenshot below demonstrates the local file inclusion:

{{screenshot}}","# Recommendations(s)

All user input including file uploads should be inspected and validated File upload extension types should be limited to those needed only for business functionality. File names should be limited in character length and be generated by the application, not by users.",unclassified,
Server Side Injection - Ssti,"Server-Side Template Injection (SSTI) is a vulnerability within application templating engines where user input is improperly handled and is embedded into the template, possibly leading code being executed.

An attacker can use SSTI to execute code on the underlying system by manipulating values within the embedded template. When code is executed within the underlying system, it can allow an attacker to run permissioned commands under the exploited process, or exploit Cross-Site Scripting (XSS) to run code within the user's browser.

**Business Impact**

SSTI can lead to reputational damage for the business due to a loss in confidence and trust by users. If an attacker successfully executes code within the underlying system, it can result in data theft and indirect financial losses.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. {{action}} and intercept the request in a the HTTP interception proxy
1. Replay, or forward, the request to see: {{action}}
1. Replace {{parameter}} value with {{value}} to {{action}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the SSTI:

{{screenshot}}",All user controlled input should be properly sanitized and passed through to the template via template parameters.,unclassified,
Server Side Injection - Ssti - Basic,"Server-Side Template Injection (SSTI) is a vulnerability within application templating engines where user input is improperly handled and is embedded into the template, possibly leading code being executed.

An attacker can use SSTI to execute code on the underlying system by manipulating values within the embedded template. When code is executed within the underlying system, it can allow an attacker to run permissioned commands under the exploited process, or exploit Cross-Site Scripting (XSS) to run code within the user's browser.

**Business Impact**

SSTI can lead to reputational damage for the business due to a loss in confidence and trust by users. If an attacker successfully executes code within the underlying system, it can result in data theft and indirect financial losses.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. {{action}} and intercept the request in a the HTTP interception proxy
1. Replay, or forward, the request to see: {{action}}
1. Replace {{parameter}} value with {{value}} to {{action}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the SSTI:

{{screenshot}}",All user controlled input should be properly sanitized and passed through to the template via template parameters.,unclassified,
Server Side Injection - Ssti - Custom,"Server-Side Template Injection (SSTI) is a vulnerability within application templating engines where user input is improperly handled and is embedded into the template, possibly leading code being executed. Applications will sometimes run their own custom templating engine which are prone to vulnerabilities.

An attacker can use SSTI to execute code on the underlying system by manipulating values within the embedded template. When code is executed within the underlying system, it can allow an attacker to run permissioned commands under the exploited process, or exploit Cross-Site Scripting (XSS) to run code within the user's browser.

**Business Impact**

SSTI can lead to reputational damage for the business due to a loss in confidence and trust by users. If an attacker successfully executes code within the underlying system, it can result in data theft and indirect financial losses.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. {{action}} and intercept the request in a the HTTP interception proxy
1. Replay, or forward, the request to see: {{action}}
1. Replace {{parameter}} value with {{value}} to {{action}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the SSTI:

{{screenshot}}",All user controlled input should be properly sanitized and passed through to the template via template parameters.,unclassified,
Server Side Injection - Ldap Injection,"**Business Impact**

LDAP injection vulnerabilities can lead to reputational damage through the impact to customers’ trust, or to regulatory fines due to an attacker’s unauthorized access to data. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Using a browser, log into the webpage: {{URL}}
1. In the request to URI modify the token XYZ by appending a quote ``` and you'll see an error return
1. Replace this with the payload below and you'll see a response indicating an injection occuring:

```
{{payload}}
```

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","To prevent LDAP injection attacks, it is recommended to validate all untrusted input. Properly encoding and sanitizing all input in the application layer minimizes the possibilities of the threats posed by LDAP injection. The following secure coding practices are recommended:

- Whitelist input validation
- Escape all variables using the correct encoding functions
- Index fields containing sensitive information, such as user passwords
- Conduct output regulation
- Perform dynamic checks
- Perform static source code analysis

Additionally, it is important to ensure that the LDAP environment is safely configured. Safeguard sensitive information in the LDAP directory by configuring user permissions. This is especially important for directories used for logging purposes on mobile and web applications.",unclassified,https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
Server Side Injection - Sql Injection,"SQL injection (SQLi) is a vulnerability in which an application accepts input into an SQL statement and treats this input as part of the statement. Typically, SQLi allows a malicious attacker to view, modify or delete data that should not be able to be retrieved. An SQLi vulnerability was found for this host which allows an attacker to execute code and view data from the SQL service by submitting SQL queries.

An attacker could exploit this lack of input sanitization to exfiltrate database data and files, tamper with the data, or perform resource exhaustion. Depending on the database and how it is configured, an attacker could potentially remotely execute code on the server running the database.

**Business Impact**

Data exfiltration through a SQLi attack could lead to reputational damage or regulatory fines for the business due to an attacker’s unauthorized access to data. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Using a browser, login to in-scope asset at: {{URL}}
1. Browse to account page
1. Modify ID token to add single quote
1. View error which states 'SQL Syntax Error'
1. Replace ID value with the following payload:

```SQL
{{payload}}
```

**Proof of Concept (PoC)**

The screenshot below demonstrates the SQLi being executed:

{{screenshot}}

The following database name and database user have been retrieved to demonstrate that the PoC exfiltrates valid database information:

{{database name/database user}}","To prevent SQL injection attacks, it is recommended that queries use parameterized queries instead of string concatenation. For example, the following is a good statement:

```SQL
txtUserId = getRequestString(""UserId"");
txtSQL = ""SELECT * FROM Users WHERE UserId = @0"";
```

Whereas the following is a bad statement:

```SQL
txtSQL = ""SELECT * FROM Users WHERE getRequestString(""UserId"") = @0"";
```

Using parameterized queries allows for code and data to be distinguished by the database regardless of input. However, all inputs should go through a validation process which only allows content to be processed by the database if it passes validation.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html, https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html, https://www.w3schools.com/sql/sql_injection.asp"
Server Side Injection - Content Spoofing,"Content spoofing is a common attack where plaintext or HTML content is injected into a web page that can be rendered in a client. Due to this injection vulnerability in the application, users are often socially engineered to perform an action due to the inherent trust they have in the business and its brand.

A successful content spoof in this application can allow an attacker to social engineer users to navigate to another website and have them enter information, such as their user credentials.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Perform {{action}} and capture the request in the HTTP interception proxy
1. Insert {{payload}} in {{parameter}} and forward or replay the following request to the endpoint:

```HTTP
{{request}}
```

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the content spoofing:

{{screenshot}}","There is no single technique to protect from content spoofing. However, the following best practices should be adhered to:

- Validate all input data, including that which is reflected by a request parameter
- Refrain from passing HTML data via request parameters. Properly encode the HTML before passing it through a request parameter if there is no other way.
- Refrain from displaying messages via request parameter. It is best practice to use temporary sessions instead.",unclassified,"https://capec.mitre.org/data/definitions/148.html, https://owasp.org/www-community/attacks/Content_Spoofing, https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#output-encoding"
Server Side Injection - Content Spoofing - Email Hyperlink Injection Based On Email Provider,"Content spoofing is a common attack where plaintext or HTML content is injected into a web page that can be rendered in a client. Due to this injection vulnerability in the application, users are often socially engineered to perform an action due to the inherent trust they have in the business and its brand.

A successful hyperlink injection can allow an attacker to social engineer users to navigate to another website and have them enter information, such as their user credentials.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Perform {{action}} and capture the request in the HTTP interception proxy
1. Insert {{payload}} in {{parameter}} and forward or replay the following request to the endpoint:

```HTTP
{{request}}
```

1. Check email to see rendered hyperlink

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the content spoofing:

{{screenshot}}","There is no single technique to protect from content spoofing. However, the following best practices should be adhered to:

- Validate all input data, including that which is reflected by a request parameter
- Refrain from passing HTML data via request parameters. Properly encode the HTML before passing it through a request parameter if there is no other way.
- Refrain from displaying messages via request parameter. It is best practice to use temporary sessions instead.",unclassified,"https://capec.mitre.org/data/definitions/148.html, https://owasp.org/www-community/attacks/Content_Spoofing, https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#output-encoding"
Server Side Injection - Content Spoofing - Html Content Injection,"HTML content injection is a common attack where plaintext or HTML content is injected into a web page that can be rendered in a client. Due to this injection vulnerability in the application, users are often socially engineered to perform an action due to the inherent trust they have in the business and its brand. An attacker to social engineer users to navigate to another website and have them enter information, such as their user credentials.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Perform {{action}} and capture the request in the HTTP interception proxy
1. Insert {{payload}} in {{parameter}} and forward or replay the following request to the endpoint:

```HTTP
{{request}}
```

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to protect from HTML content injection. However, the following best practices should be adhered to:

- Validate all input data, including that which is reflected by a request parameter
- Refrain from passing HTML data via request parameters. Properly encode the HTML before passing it through a request parameter if there is no other way.
- Refrain from displaying messages via request parameter. It is best practice to use temporary sessions instead.",unclassified,"https://capec.mitre.org/data/definitions/148.html, https://owasp.org/www-community/attacks/Content_Spoofing, https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#output-encoding"
Server Side Injection - Content Spoofing - Iframe Injection,"Content spoofing via iFrame injection is a common attack where plaintext or HTML content is injected into a web page that can be rendered in a client. Due to this injection vulnerability in the application, users are often socially engineered to perform an action due to the inherent trust they have in the business and its brand.

A successful iFrame injection can allow a malicious attacker to break Same Origin Policy (SOP) and allow for code execution within a user's browser.

**Business Impact**

This vulnerability could lead to data theft and indirect financial loss through the attacker’s ability to manipulate data through their ability to execute code in a user’s browser. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Perform {{action}} and capture the request in the HTTP interception proxy
1. Insert {{payload}} in {{parameter}} and forward or replay the following request to the endpoint:

```HTTP
{{request}}
```

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the iFrame injection attack:

{{screenshot}}","There is no single technique to protect from content spoofing. However, the following best practices should be adhered to:

Validate all input data, including that which is reflected by a request parameter
Refrain from passing HTML data via request parameters. Properly encode the HTML before passing it through a request parameter if there is no other way.
Refrain from displaying messages via request parameter. It is best practice to use temporary sessions instead.",unclassified,"https://capec.mitre.org/data/definitions/148.html, https://owasp.org/www-community/attacks/Content_Spoofing, https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#output-encoding"
Server Side Injection - Content Spoofing - External Authentication Injection,"Content spoofing is a common attack where plaintext or HTML content is injected into a web page that can be rendered in a client. Due to this injection vulnerability in the application, users are often socially engineered to perform an action due to the inherent trust they have in the business and its brand.

A successful external authentication injection can allow an attacker to social engineer users to navigate to another website and have them enter information, such as their user credentials.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Perform {{action}} and capture the request in the HTTP interception proxy
1. Insert {{payload}} in {{parameter}} and forward or replay the following request to the endpoint:

```HTTP
{{request}}
```

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the content spoofing:

{{screenshot}}","There is no single technique to protect from content spoofing. However, the following best practices should be adhered to:

- Validate all input data, including that which is reflected by a request parameter
- Refrain from passing HTML data via request parameters. Properly encode the HTML before passing it through a request parameter if there is no other way.
- Refrain from displaying messages via request parameter. It is best practice to use temporary sessions instead.",unclassified,"https://capec.mitre.org/data/definitions/148.html, https://owasp.org/www-community/attacks/Content_Spoofing, https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#output-encoding"
Server Side Injection - Content Spoofing - Email Html Injection,"Content spoofing is a common attack where plaintext or HTML content is injected into a web page that can be rendered in a client. Due to this injection vulnerability in the application, users are often socially engineered to perform an action due to the inherent trust they have in the business and its brand.

A successful HTML content spoof on emails can allow an attacker to social engineer users to navigate to another website and have them enter information, such as their user credentials.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Perform {{action}} and capture the request in the HTTP interception proxy

1. Insert {{payload}} in {{parameter}} and forward or replay the following request to the endpoint:

```HTTP
{{request}}
```

1. Check email to see rendered HTML

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the content spoofing:

{{screenshot}}","There is no single technique to protect from Content Spoofing. However, the following best practices should be adhered to:

- Validate all input data, including that which is reflected by a request parameter
- Refrain from passing HTML data via request parameters. Properly encode the HTML before passing it through a request parameter if there is no other way.
- Refrain from displaying messages via request parameter. It is best practice to use temporary sessions instead.",unclassified,"https://capec.mitre.org/data/definitions/148.html, https://owasp.org/www-community/attacks/Content_Spoofing, https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#output-encoding"
Server Side Injection - Content Spoofing - Homograph Idn Based,"Internationalized Domain Name (IDN) homograph attack is a type of typosquatting attack that spoofs the name of a known domain by using homoglyph characters that mimic the actual letter. Through this type of attack, users are often socially engineered to perform an action due to the inherent trust they have in the business and its brand.

A successful IDN Homograph attack can allow an attacker to social engineer users to navigate to a malicious website where the attacker can use the trust of the credible domain name to phish users for their credentials.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Perform {{action}} and capture the request in the HTTP interception proxy
1. Insert {{payload}} in {{parameter}} and forward or replay the following request to the endpoint:

```HTTP
{{request}}
```

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the IDN Homograph attack:

{{screenshot}}","There is no single technique to protect from content spoofing. However, the following best practices should be adhered to:

Validate all input data, including that which is reflected by a request parameter
Refrain from passing HTML data via request parameters. Properly encode the HTML before passing it through a request parameter if there is no other way.
Refrain from displaying messages via request parameter. It is best practice to use temporary sessions instead.",unclassified,"https://capec.mitre.org/data/definitions/148.html, https://owasp.org/www-community/attacks/Content_Spoofing, https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#output-encoding"
Server Side Injection - Content Spoofing - Rtlo,"A Right to Left Override (RLO) character is a unicode character, denoted as `U+202E`, in systems that can understand unicode. Whenever an RLO character is rendered, all unicode text afterwards will be reversed. An RLO attack in the application allows a malicious attacker to spoof content in a way where it can potentially socially engineer users into disclosing data such as usernames, passwords or other sources of sensitive information.

A successful exploit of an RLO character can trick users to downloading or clicking on files they otherwise would not. These files can include malware or an executable that requires user interaction to successfully infect systems.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Perform {{action}} and capture the request in the HTTP interception proxy
1. Append/add an RLO unicode character to: {{parameter}}
1. Forward or replay the following request to the endpoint:

```HTTP
{{request}}
```

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the RLO:

{{screenshot}}","There is no single technique to protect from content spoofing. However, the following best practices should be adhered to:

Validate all input data, including that which is reflected by a request parameter
Refrain from passing HTML data via request parameters. Properly encode the HTML before passing it through a request parameter if there is no other way.
Refrain from displaying messages via request parameter. It is best practice to use temporary sessions instead.",unclassified,"https://capec.mitre.org/data/definitions/148.html, https://owasp.org/www-community/attacks/Content_Spoofing, https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#output-encoding"
Server Side Injection - Content Spoofing - Text Injection,"Content spoofing is a common attack where plaintext or HTML content is injected into a web page that can be rendered in a client. Due to this injection vulnerability in the application, users are often socially engineered to perform an action due to the inherent trust they have in the business and its brand.

Text injection in this application allows an attacker to insert any message into a web page that can trick users to navigate to another website, call a certain number, or start an email chain to a malicious address.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Perform {{action}} and capture the request in the HTTP interception proxy
1. Insert/Append the following payload to {{parameter}}:

{{Payload}}

1. Forward or replay the following request to the endpoint:

```HTTP
{{request}}
```

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the text injection:

{{screenshot}}","There is no single technique to protect from content spoofing. However, the following best practices should be adhered to:

Validate all input data, including that which is reflected by a request parameter
Refrain from passing HTML data via request parameters. Properly encode the HTML before passing it through a request parameter if there is no other way.
Refrain from displaying messages via request parameter. It is best practice to use temporary sessions instead.",unclassified,"https://capec.mitre.org/data/definitions/148.html, https://owasp.org/www-community/attacks/Content_Spoofing, https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#output-encoding"
Server Side Injection - Content Spoofing - Flash Based External Authentication Injection,"Content spoofing is a common attack where plaintext or HTML content is injected into a web page that can be rendered in a client. Due to this injection vulnerability in the application, users are often socially engineered to perform an action due to the inherent trust they have in the business and its brand.

A successful flash based external authentication injection can allow an attacker to social engineer users to navigate to another website and have them enter information, such as their user credentials.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Perform {{action}} and capture the request in the HTTP interception proxy
1. Insert {{payload}} in {{parameter}} and forward or replay the following request to the endpoint:

```HTTP
{{request}}
```

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the content spoofing:

{{screenshot}}","There is no single technique to protect from content spoofing. However, the following best practices should be adhered to:

- Validate all input data, including that which is reflected by a request parameter
- Refrain from passing HTML data via request parameters. Properly encode the HTML before passing it through a request parameter if there is no other way.
- Refrain from displaying messages via request parameter. It is best practice to use temporary sessions instead.",unclassified,"https://capec.mitre.org/data/definitions/148.html, https://owasp.org/www-community/attacks/Content_Spoofing, https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#output-encoding"
Server Side Injection - Content Spoofing - Impersonation Via Broken Link Hijacking,"Content spoofing via Broken Link Hijacking is when a malicious attacker can register a link on behalf of the original owner due to a change in the original link. Due to the inherent trust a user has in the business and its brand, a malicious attacker is able to impersonate a credible target or domain to social engineer the user into disclosing data such as usernames, passwords or other sources of sensitive information.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Click on {{value}}
1. Observe that the link is redirected to an impersonate domain owned by the attacker

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the broken link hijack attack:

{{screenshot}}","There is no single technique to protect from content spoofing. However, the following best practices should be adhered to:

Validate all input data, including that which is reflected by a request parameter
Refrain from passing HTML data via request parameters. Properly encode the HTML before passing it through a request parameter if there is no other way.
Refrain from displaying messages via request parameter. It is best practice to use temporary sessions instead.",unclassified,"https://capec.mitre.org/data/definitions/148.html, https://owasp.org/www-community/attacks/Content_Spoofing, https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#output-encoding"
Cross Site Request Forgery Csrf,"Cross-Site Request Forgery (CSRF) occurs when requests to the application are submitted on behalf of an authenticated user without their knowledge via crafted, malicious code which can be in the form of a link the user clicks. The application is unable to distinguish between the malicious request and a legitimate request from the user.

CSRF is possible for this application, allowing an attacker to submit requests to the application on behalf of an authenticated user. Additionally, the attacker needs to socially engineer the user to click on a link, or paste the malicious code into the user’s browser. If successful, the code will execute within that user’s browser in the context of this domain.

When an attacker can control code that is executed within a user’s browser, they are able to carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session. The attacker’s actions are limited by the privileges of the user, as well as the application’s capabilities and the data stored within it.

**Business Impact**

CSRF could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to sign into the application at: {{URL}}
1. Navigate to the following URL and submit the form: {{URL}}
1. Use the HTTP interception proxy to intercept the request triggered by the form
1. Modify the request with the following CSRF POC code:

```HTML
{{CSRF POC}}
```

 and forward the request to the endpoint:

```HTTP
{{request}}
```

1. Navigate to the following URL and observe the action taken by the CSRF POC code was successful: {{URL}}

**Proof of Concept (PoC)**

Please view the proof of concept CSRF HTML code below:

{{screenshot}}

Please view the evidence showing an action that is vulnerable to CSRF below:

{{screenshot}}","There is no single technique to stop CSRF from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of CSRF. Some best practices include the following:

- All state changing requests should include CSRF tokens which are validated on the backend of the application. This token should be tied to the user’s session, strictly validated before an action is executed, and be unpredictable with high entropy.
- Ensure that the framework is using built-in or existing CSRF prevention protections that exist within most major frameworks
- Use the `SameSite` cookie attribute, which can have the values of `Lax`, `Strict`, or `None`. For example:

    ``` HTTP
    Set-Cookie: JSESSIONID=xxxxx; SameSite=Strict
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#token-based-mitigation, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#use-built-in-or-existing-csrf-implementations-for-csrf-protection, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#samesite-cookie-attribute"
Cross Site Request Forgery Csrf - Action Specific,"Cross-Site Request Forgery (CSRF) occurs when requests to the application are submitted on behalf of an authenticated user without their knowledge via crafted, malicious code which can be in the form of a link the user clicks. The application is unable to distinguish between the malicious request and a legitimate request from the user.

CSRF is possible for this application for a specific action, such as a logout, login, or other specific user action, allowing an attacker to submit requests to the application on behalf of an authenticated user. Additionally, the attacker needs to socially engineer the user to click on a link, or paste the malicious code into the user’s browser. If successful, the code will execute within that user’s browser in the context of this domain.

When an attacker can control code that is executed within a user’s browser, they are able to carry out any actions that the user is able to perform, including accessing any of the user's data and modifying information within the user’s permissions. This can result in modification, deletion, or theft of data, including accessing or deleting files, or stealing session cookies which an attacker could use to hijack a user’s session. The attacker’s actions are limited by the privileges of the user, as well as the application’s capabilities and the data stored within it.

**Business Impact**

CSRF could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login to the application at: {{URL}}
1. Navigate to the following URL and submit the form: {{URL}}
1. Use the HTTP interception proxy to intercept the request triggered by the form
1. Modify the request with the following CSRF POC code:

```HTML
{{CSRF POC}}
```

 and forward the request to the endpoint:

```HTTP
{{request}}
```

1. Navigate to the following URL and observe the action taken by the CSRF POC code was successful: {{URL}}

**Proof of Concept (PoC)**

Please view the proof of concept CSRF HTML code below:

{{screenshot}}

Please view the evidence showing an action that is vulnerable to CSRF below:

{{screenshot}}","There is no single technique to stop CSRF from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of CSRF. Some best practices include the following:

- All state changing requests should include CSRF tokens which are validated on the backend of the application. This token should be tied to the user’s session, strictly validated before an action is executed, and be unpredictable with high entropy.
- Ensure that the framework is using built-in or existing CSRF prevention protections that exist within most major frameworks
- Use the `SameSite` cookie attribute, which can have the values of `Lax`, `Strict`, or `None`. For example:

    ``` HTTP
    Set-Cookie: JSESSIONID=xxxxx; SameSite=Strict
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#token-based-mitigation, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#use-built-in-or-existing-csrf-implementations-for-csrf-protection, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#samesite-cookie-attribute"
Cross Site Request Forgery Csrf - Action Specific - Authenticated Action,"Cross-Site Request Forgery (CSRF) occurs when requests to the application are submitted on behalf of an authenticated user without their knowledge via crafted, malicious code which can be in the form of a link the user clicks. The application is unable to distinguish between the malicious request and a legitimate request from the user.

CSRF is possible for this application for an authenticated user action, allowing an attacker to submit requests to the application on behalf of an authenticated user. Additionally, the attacker needs to socially engineer the user to click on a link, or paste the malicious code into the user’s browser. If successful, the code will execute within that user’s browser in the context of this domain.

**Business Impact**

CSRF could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Modify the request with the following CSRF POC code:

```HTML
{{CSRF POC}}
```

 and forward the request to the endpoint:

```HTTP
{{request}}
```

1. Navigate to the following URL and observe the action taken by the CSRF POC code was successful: {{URL}}

**Proof of Concept (PoC)**

Please view the proof of concept CSRF HTML code below:

{{screenshot}}

Please view the evidence showing an action that is vulnerable to CSRF below:

{{screenshot}}","There is no single technique to stop CSRF from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of CSRF. Some best practices include the following:

- All state changing requests should include CSRF tokens which are validated on the backend of the application. This token should be tied to the user’s session, strictly validated before an action is executed, and be unpredictable with high entropy.
- Ensure that the framework is using built-in or existing CSRF prevention protections that exist within most major frameworks
- Use the `SameSite` cookie attribute, which can have the values of `Lax`, `Strict`, or `None`. For example:

    ``` HTTP
    Set-Cookie: JSESSIONID=xxxxx; SameSite=Strict
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#token-based-mitigation, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#use-built-in-or-existing-csrf-implementations-for-csrf-protection, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#samesite-cookie-attribute"
Cross Site Request Forgery Csrf - Action Specific - Logout,"Cross-Site Request Forgery (CSRF) occurs when requests to the application are submitted on behalf of an authenticated user without their knowledge via crafted, malicious code which can be in the form of a link the user clicks. The application is unable to distinguish between the malicious request and a legitimate request from the user.

CSRF is possible within this application, allowing an attacker to log-out a valid user. Additionally, the attacker needs to socially engineer the user to click on a link, or paste the malicious code into the user’s browser. If successful, the code will execute within that user’s browser in the context of this domain, logging the user out of their session. An attacker can deny service to users using this CSRF vector to prevent access to the application and constantly logging users out.

**Business Impact**

CSRF could lead to reputational damage for the business through the impact to customers’ trust due to not being able to reliably access the application. This could also cause indirect financial impacts to the business.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Modify the request with the following CSRF POC code:

```HTML
{{CSRF POC}}
```

and forward the request to the endpoint:

```HTTP
{{request}}
```

1. Observe the user was logged out, proving that the CSRF POC code was successful

**Proof of Concept (PoC)**

Please view the proof of concept CSRF HTML code below:

{{screenshot}}

Below is a screenshot showing that the logout functionality is vulnerable to CSRF:

{{screenshot}}","There is no single technique to stop CSRF from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of CSRF. Some best practices include the following:

- All state changing requests should include CSRF tokens which are validated on the backend of the application. This token should be tied to the user’s session, strictly validated before an action is executed, and be unpredictable with high entropy.
- Ensure that the framework is using built-in or existing CSRF prevention protections that exist within most major frameworks
- Use the `SameSite` cookie attribute, which can have the values of `Lax`, `Strict`, or `None`. For example:

    ``` HTTP
    Set-Cookie: JSESSIONID=xxxxx; SameSite=Strict
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#token-based-mitigation, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#use-built-in-or-existing-csrf-implementations-for-csrf-protection, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#samesite-cookie-attribute"
Cross Site Request Forgery Csrf - Action Specific - Unauthenticated Action,"Cross-Site Request Forgery (CSRF) occurs when requests to the application are submitted on behalf of a user without their knowledge via crafted, malicious code which can be in the form of a link the user clicks. The application is unable to distinguish between the malicious request and a legitimate request from the user. Additionally, the attacker needs to socially engineer the user to click on a link, or paste the malicious code into the user’s browser. If successful, the code will execute within that user’s browser in the context of this domain.

CSRF is possible for this application for an unauthenticated user action, allowing an attacker to submit requests to the application on behalf of an unauthenticated user. This can include actions such as registration which can result in multiple fake accounts, or a login action which can login accounts uneccisarily.

**Business Impact**

CSRF could lead to reputational damage for the business through the impact to customers’ trust in the application. Not having CSRF protection on unauthenticated actions means the application is more susceptible to XSS attacks which can involve an attacker gaining access to user data.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Modify the request with the following CSRF POC code:

```HTML
{{CSRF POC}}
```

 and forward the request to the endpoint:

```HTTP
{{request}}
```

1. Navigate to the following URL and observe within the HTTP interception proxy that the action taken by the CSRF POC code was successful: {{URL}}

**Proof of Concept (PoC)**

Please view the proof of concept CSRF HTML code below:

{{screenshot}}

Please view the evidence showing an action that is vulnerable to CSRF below:

{{screenshot}}","There is no single technique to stop CSRF from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of CSRF. Some best practices include the following:

- All state changing requests should include CSRF tokens which are validated on the backend of the application. This token should be tied to the user’s session, strictly validated before an action is executed, and be unpredictable with high entropy.
- Ensure that the framework is using built-in or existing CSRF prevention protections that exist within most major frameworks
- Use the `SameSite` cookie attribute, which can have the values of `Lax`, `Strict`, or `None`. For example:

    ``` HTTP
    Set-Cookie: JSESSIONID=xxxxx; SameSite=Strict
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#token-based-mitigation, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#use-built-in-or-existing-csrf-implementations-for-csrf-protection, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#samesite-cookie-attribute"
Cross Site Request Forgery Csrf - Csrf Token Not Unique Per Request,"Cross-Site Request Forgery (CSRF) occurs when requests to the application are submitted on behalf of an authenticated user without their knowledge via crafted, malicious code which can be in the form of a link the user clicks. The application is unable to distinguish between the malicious request and a legitimate request from the user.

CSRF is possible for this application as the CSRF token is not unique per request, allowing an attacker to submit requests to the application on behalf of an authenticated user. Additionally, the attacker needs to socially engineer the user to click on a link, or paste the malicious code into the user’s browser. If successful, the code will execute within that user’s browser in the context of this domain.

**Business Impact**

CSRF could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to sign into the application at: {{URL}}
1. Navigate to the following URL and submit the form: {{URL}}
1. Use the HTTP interception proxy to intercept the request triggered by the form
1. Modify the request with the following CSRF POC code:

```HTML
{{CSRF POC}}
```

 and forward the request to the endpoint:

```HTTP
{{request}}
```

1. Navigate to the following URL and observe the action taken by the CSRF POC code was successful: {{URL}}

**Proof of Concept (PoC)**

Please view the proof of concept CSRF HTML code below:

{{screenshot}}

Please view the evidence showing an action that is vulnerable to CSRF below:

{{screenshot}}","# Recommendations

A Cross-Site Request Forgery (CSRF) token should be included within all relevant requests. The CSRF token needs to be unpredictable, tied to a user's session, strictly validated before actions are executed, and not be stored within cookies.

CSRF tokens can be used to prevent CSRF attacks by making it near impossible for a malicious attacker to predict and construct a valid HTTP request of a user because they don't know the value of the CSRF token. Therefore, any request that a malicious attacker attempts to construct will not have all of the necessary parameters for the application to validate and execute the request.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#synchronizer-token-pattern"
Cross Site Request Forgery Csrf - Application Wide,"Cross-Site Request Forgery (CSRF) occurs when requests to the application are submitted on behalf of an authenticated user without their knowledge via crafted, malicious code which can be in the form of a link the user clicks. The application is unable to distinguish between the malicious request and a legitimate request from the user. Additionally, the attacker needs to socially engineer the user to click on a link, or paste the malicious code into the user’s browser. If successful, the code will execute within that user’s browser in the context of this domain.

Application-wide CSRF is possible for this application, allowing an attacker to submit requests to the application on behalf of an authenticated user on multiple endpoints. This can include changing the password and email associated with the account, or deleting the user account. These actions can severely disrupt a user's experience and lead to account takeover.

**Business Impact**

CSRF could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Modify the request with the following CSRF POC code:

```HTML
{{CSRF POC}}
```

 and forward the request to the endpoint:

```HTTP
{{request}}
```

1. Navigate to the following URL and observe within the HTTP interception proxy that the action taken by the CSRF POC code was successful: {{URL}}
1. Repeat the above steps for every user action on the application, demonstrating that the lack of CSRF protection is an application-wide issue

**Proof of Concept (PoC)**

Please view the proof of concept CSRF HTML code below:

{{screenshot}}

Please view the evidence showing that multiple actions are vulnerable to CSRF below:

{{screenshot}}","There is no single technique to stop CSRF from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of CSRF. Some best practices include the following:

- All state changing requests should include CSRF tokens which are validated on the backend of the application. This token should be tied to the user’s session, strictly validated before an action is executed, and be unpredictable with high entropy.
- Ensure that the framework is using built-in or existing CSRF prevention protections that exist within most major frameworks
- Use the `SameSite` cookie attribute, which can have the values of `Lax`, `Strict`, or `None`. For example:

    ``` HTTP
    Set-Cookie: JSESSIONID=xxxxx; SameSite=Strict
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#token-based-mitigation, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#use-built-in-or-existing-csrf-implementations-for-csrf-protection, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#samesite-cookie-attribute"
Cross Site Request Forgery Csrf - Flash Based,"Cross-Site Request Forgery (CSRF) occurs when requests to the application are submitted on behalf of an authenticated user without their knowledge via crafted, malicious code which can be in the form of a link the user clicks. The application is unable to distinguish between the malicious request and a legitimate request from the user.

Flash-based CSRF is possible for this application, allowing an attacker to submit requests to the application on behalf of an authenticated user. Additionally, the attacker needs to socially engineer the user to click on a link, or paste the malicious code into the user’s browser. If successful, the code will execute within that user’s browser in the context of this domain.

**Business Impact**

CSRF could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Modify the request with the following CSRF POC code which uses a `.SWF` file:

```HTML
{{CSRF POC}}
```

 and forward the request to the endpoint:

```HTTP
{{request}}
```

1. Navigate to the following URL and observe within the HTTP interception proxy that the action taken by the CSRF POC code was successful: {{URL}}

**Proof of Concept (PoC)**

Please view the proof of concept CSRF HTML code below:

{{screenshot}}

Please view the evidence showing an action that is vulnerable to CSRF below:

{{screenshot}}","There is no single technique to stop CSRF from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of CSRF. Some best practices include the following:

- All state changing requests should include CSRF tokens which are validated on the backend of the application. This token should be tied to the user’s session, strictly validated before an action is executed, and be unpredictable with high entropy.
- Ensure that the framework is using built-in or existing CSRF prevention protections that exist within most major frameworks
- Use the `SameSite` cookie attribute, which can have the values of `Lax`, `Strict`, or `None`. For example:

    ``` HTTP
    Set-Cookie: JSESSIONID=xxxxx; SameSite=Strict
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#token-based-mitigation, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#use-built-in-or-existing-csrf-implementations-for-csrf-protection, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#samesite-cookie-attribute"
Cross Site Request Forgery Csrf - Flash Based - High Impact,"Cross-Site Request Forgery (CSRF) occurs when requests to the application are submitted on behalf of an authenticated user without their knowledge via crafted, malicious code which can be in the form of a link the user clicks. The application is unable to distinguish between the malicious request and a legitimate request from the user.

A high impact flash-based CSRF is possible for this application allowing an attacker to submit requests to the application on behalf of an authenticated privileged user. An attacker is able to perform the actions of a privileged user through their account. This could include modifying, adding, or removing data from the application. Additionally, the attacker needs to socially engineer the user to click on a link, or paste the malicious code into the user’s browser. If successful, the code will execute within that user’s browser in the context of this domain.

**Business Impact**

High impact CSRF could lead to data modification or theft leading to indirect financial impact to the business. An attacker is also able to interact with other users, including performing other malicious attacks which would appear to originate from a legitimate privileged user. These malicious actions could result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Modify the request with the following CSRF POC code which uses a `.SWF` file:

```HTML
{{CSRF POC}}
```

 and forward the request to the endpoint:

```HTTP
{{request}}
```

1. Navigate to the following URL and observe within the HTTP interception proxy that the action taken by the CSRF POC code was successful: {{URL}}

**Proof of Concept (PoC)**

Please view the proof of concept CSRF HTML code below:

{{screenshot}}

Please view the evidence showing an action that is vulnerable to CSRF below:

{{screenshot}}","There is no single technique to stop CSRF from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of CSRF. Some best practices include the following:

- All state changing requests should include CSRF tokens which are validated on the backend of the application. This token should be tied to the user’s session, strictly validated before an action is executed, and be unpredictable with high entropy.
- Ensure that the framework is using built-in or existing CSRF prevention protections that exist within most major frameworks
- Use the `SameSite` cookie attribute, which can have the values of `Lax`, `Strict`, or `None`. For example:

    ``` HTTP
    Set-Cookie: JSESSIONID=xxxxx; SameSite=Strict
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#token-based-mitigation, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#use-built-in-or-existing-csrf-implementations-for-csrf-protection, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#samesite-cookie-attribute"
Cross Site Request Forgery Csrf - Flash Based - Low Impact,"Cross-Site Request Forgery (CSRF) occurs when requests to the application are submitted on behalf of an authenticated user without their knowledge via crafted, malicious code which can be in the form of a link the user clicks. The application is unable to distinguish between the malicious request and a legitimate request from the user.

A low impact flash-based CSRF is possible for this application, allowing an attacker to submit requests to the application for non-sensitive actions on behalf of an authenticated user. Additionally, the attacker needs to socially engineer the user to click on a link, or paste the malicious code into the user’s browser. If successful, the code will execute within that user’s browser in the context of this domain.

**Business Impact**

CSRF could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Modify the request with the following CSRF POC code which uses a `.SWF` file:

```HTML
{{CSRF POC}}
```

 and forward the request to the endpoint:

```HTTP
{{request}}
```

1. Navigate to the following URL and observe within the HTTP interception proxy that the action taken by the CSRF POC code was successful: {{URL}}

**Proof of Concept (PoC)**

Please view the proof of concept CSRF HTML code below:

{{screenshot}}

Please view the evidence showing an action that is vulnerable to CSRF below:

{{screenshot}}","There is no single technique to stop CSRF from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of CSRF. Some best practices include the following:

- All state changing requests should include CSRF tokens which are validated on the backend of the application. This token should be tied to the user’s session, strictly validated before an action is executed, and be unpredictable with high entropy.
- Ensure that the framework is using built-in or existing CSRF prevention protections that exist within most major frameworks
- Use the `SameSite` cookie attribute, which can have the values of `Lax`, `Strict`, or `None`. For example:

    ``` HTTP
    Set-Cookie: JSESSIONID=xxxxx; SameSite=Strict
    ```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#token-based-mitigation, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#use-built-in-or-existing-csrf-implementations-for-csrf-protection, https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#samesite-cookie-attribute"
Insecure Data Transport,"When data is transmitted over unencrypted channels, it can be intercepted via a Person-in-the-Middle (PitM) attack. An attacker can then gather user data and potentially send requests to the server pretending to be the legitimate user, or otherwise collect sensitive user data.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure. It can also lead to data theft via an attacker’s ability to manipulate data through their ability to make requests to the server using a legitimate session token.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Observe data in transit does not enforce TLS for all pages
1. Monitor the network traffic and intercept user session cookies
1. Replay the cookie and hijack the authenticated session
1. Modify user's personal identifiable information (PII)

**Proof of Concept (PoC)**

The screenshots below show sensitive data being transmitted insecurely:

{{screenshot}}",All sensitive data should be encrypted while it is being transmitted to and from the application.,unclassified,
Insecure Data Transport - Cleartext Transmission Of Sensitive Data,"When sensitive data is transmitted in cleartext over an unencrypted channel, it can be intercepted via a Person-in-the-Middle (PitM) attack. An attacker can send requests to the server pretending to be the legitimate user by using a PitM attack to access the sensitive data.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure. It can also lead to data theft via an attacker’s ability to manipulate data through their ability to make requests to the server using a legitimate session token.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Observe data in transit does not enforce TLS for all pages
1. Monitor the network traffic and intercept user session cookies
1. Replay the cookie and hijack the authenticated session
1. Modify user's personal identifiable information (PII)

**Proof of Concept (PoC)**

The screenshots below show sensitive data being transmitted via cleartext:

{{screenshot}}",All sensitive data should be encrypted while it is being transmitted to and from the application.,unclassified,
Insecure Data Transport - Executable Download,"Risk levels for an application are raised when executable files are able to be downloaded as it increases the chances of malicious files being downloaded and executing in the system, or on an end user’s device. An executable file can be downloaded within this application, enabling an attacker to observe the contents of the downloaded file through a network sniffing or Person-in-the-Middle (PitM) attack. An attacker could also download a malicious executable instead of the intended file. If the downloaded file contains sensitive information, the attacker could use this to perform further attacks on the application or impersonate a user.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure. It can also lead to data theft depending on the content on the downloadable executable files in the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Route all application traffic through a HTTP interception proxy
1. Use a browser to navigate to: {{URL}}
1. Observe within the HTTP interception proxy that an executable file is downloaded

**Proof of Concept (PoC)**

The screenshot below shows that an executable file can be downloaded:

{{screenshot}}","It is recommended to reduce the need for downloadable executable files for the application. If they are needed for users to perform business as usual functions within the application, all downloadable files should go through an integrity check and be stored and transmitted across an encrypted network. Additionally, it’s recommended that files with `.bat`, `.cmd`, and `.exe` extensions undergo additional scrutiny and be assessed for both business need and overall security check of the files.",unclassified,
Insecure Data Transport - Executable Download - Secure Integrity Check,"Risk levels for an application are raised when executable files are able to be downloaded as it increases the chances of malicious files downloaded and executing in the system, or on an end user’s device. An executable file can be downloaded within this application without encryption, enabling an attacker to observe the contents of the downloaded file through a network sniffing or Person-in-the-Middle (PitM) attack. If the downloaded file contains sensitive information, the attacker could use this to perform further attacks on the application or impersonate a user.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure. It can also lead to data theft depending on the content on the downloadable executable files in the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Route all application traffic through a HTTP interception proxy
1. Use a browser to navigate to: {{URL}}
1. Observe within the HTTP interception proxy that an executable file is downloaded unencrypted

**Proof of Concept (PoC)**

The screenshot below shows that an executable file is downloaded unencrypted:

{{screenshot}}","It is recommended to remove the need for downloadable executable files for the application. If they are needed for users to perform business as usual functions within the application, all downloadable files should go through an integrity check and be stored and transmitted across an encrypted network. Additionally, it’s recommended that files with `.bat`, `.cmd`, and `.exe` extensions undergo additional scrutiny and be assessed for both business need and overall security check of the files.",unclassified,
Insecure Data Transport - Executable Download - No Secure Integrity Check,"Risk levels for an application are raised when executable files are able to be downloaded as it increases the chances of malicious files being downloaded and executing in the system, or on an end user’s device. An executable file can be downloaded within this application without encryption or a secure integrity check, enabling an attacker to observe the contents of the downloaded file through a network sniffing or Person-in-the-Middle (PitM) attack. An attacker could also download a malicious executable instead of the intended file. If the downloaded file contains sensitive information, the attacker could use this to perform further attacks on the application or impersonate a user.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure. It can also lead to data theft depending on the content on the downloadable executable files in the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Route all application traffic through a HTTP interception proxy
1. Use a browser to navigate to: {{URL}}
1. Observe within the HTTP interception proxy that an executable file is downloaded unencrypted and does not go through an integrity check

**Proof of Concept (PoC)**

The screenshot below shows that an executable file is downloaded unencrypted:

{{screenshot}}","It is recommended to reduce the need for downloadable executable files for the application. If they are needed for users to perform business as usual functions within the application, all downloadable files should go through an integrity check and be stored and transmitted across an encrypted network. Additionally, it’s recommended that files with `.bat`, `.cmd`, and `.exe` extensions undergo additional scrutiny and be assessed for both business need and overall security check of the files.",unclassified,
Insecure Os Firmware,"When Operating System (OS) firmware is insecure, it broadens the application’s attack surface and gives  an attacker more opportunity to maintain persistence and achieve a high level of privilege within the application. Firmware can be exploited via network, software, or hardware layers. Once compromised, an attacker can establish persistence, capture sensitive data, exfiltrate data, impact application performance, or pivot into attacking the company’s wider network.

**Business Impact**

This vulnerability can lead to direct financial loss to the company due to data theft, application manipulation and corruption, or Denial of Service to customers and users of the application. It can also lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Start {{application}} on the operating system and navigate to {{url}}
1. Input the following payload into {{parameter}}:

{{Payload}}

1. Observe that the OS firmware is insecure


**Proof of Concept (PoC)**

The screenshot below shows insecure OS firmware:

{{screenshot}}",It is recommended to keep all firmware up to date with the latest version and include all firmware in a patch management lifecycle with a detailed firmware upgrade plan.,unclassified,
Insecure Os Firmware - Kiosk Escape Or Breakout,"A kiosk escape or breakout occurs when an exploit allows users to bypass the software package serving as the frontend for an application on a system, gaining unauthorized access to the underlying operating system. This vulnerability varies in impact depending on the operating system and the level of hardening applied to the system. In cases where the system uses administrator-level access, the consequences can include defacement, installation of malicious software, or breaches of data integrity, potentially affecting stored customer data.

**Business Impact**

This vulnerability can lead to unauthorized access, data breaches, and malicious activities, including the installation of unwanted software and alteration of stored data. Such incidents can result in significant financial losses, damage to the organization's reputation, and erosion of customer trust, especially if sensitive customer information is compromised.

**Steps to Reproduce**

1. Turn the {{hardware}} on and wait for the software to run.
1. Constantly click on the bottom right of the touch screen, revealing the desktop.
1. Observe that there is an administrator level user on the device.

**Proof of Concept (PoC)**

The following screenshots demonstrate the process of escaping from the application's controlled environment to access the underlying operating system. This may include screenshots or a description of the exploit technique used, the access gained to system settings or files, and any unauthorized actions performed as a result:

{{screenshot}}","It is recommended to implement vigorous QA testing of applications prior to deployment. Additionally, robust error logging and catching should be performed within the application to prevent crashes and ensure that the application restarts in the event of a crash. A lower privileged accounts with minimal permissions should also be used to lower the impact of a potential kiosk escape.",unclassified,
Insecure Os Firmware - Recovery Of Disk Contains Sensitive Material,"The device's storage medium fails to adequately delete data when a factory reset is performed due to a flaw in the process. An attacker with access to the storage medium post-reset can recover and exploit the sensitive information.

**Business Impact**

The incomplete deletion of sensitive data during a factory reset poses a substantial risk of data breaches. If exploited, this vulnerability can lead to the unauthorized disclosure of confidential information, undermining customer trust and violating privacy regulations. The consequent legal, financial, and reputational damages can significantly impact the organization's standing and operations.

**Steps to Reproduce**

1. Perform a factory reset on the device to initiate the data removal process.
2. Access the storage medium of the device after the reset.
3. Use {{tool}} to retrieve previously stored sensitive information.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","It is recommended to implement robust deletion functions which not only reference to the data, but write over the existing data to prevent digital forensic methods of recovery.",unclassified,
Insecure Os Firmware - Over Permissioned Credentials On Storage,"The device contains a set of credentials stored on its storage medium that are over-permissioned for their intended use. While these credentials are designed to access a specific shared service, their excessive permissions allow for broader unauthorized access. If the device is compromised or falls into the hands of unauthorized user, these over-permissioned credentials could be used to access not only the intended service but also additional services and data that should be segregated.

**Business Impact**

Storing over-permissioned credentials on the device presents a significant security risk, amplifying the potential damage from unauthorized access. Attackers could exploit these credentials to gain extensive control over the system's resources and sensitive data, including customer information and proprietary secrets. Such breaches can lead to financial losses, regulatory penalties, erosion of customer trust, and long-term reputational damage to the organization.

**Steps to Reproduce**

1. Gain physical access to the device and remove the cover, as seen in the images below:
{{screenshot}}
1. Locate the hard drive on the device and remove it.
1. Using a external hard drive caddy, remove the hard drive from the device's storage.
1. Mount the device and extract the credentials from: {{filepath}}

or

1. Gain remote access to the device via SSH with the following credentials:
{{credentials}}

1. Browse to the file path {{filepath}} and open the file.
1. On Line 32, you can see the variable: {{JWT}}
1. Using the HTTP request below, send the request with the token:
{{HTTP request}}

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}",It is recommended to strictly scope the credentials that are provisioned to those that are required to operate basic resources.,unclassified,
Insecure Os Firmware - Poorly Configured Operating System Security,"The device employs a standard operating system where the configuration fails to adequately secure the device. This poor configuration can expose the device to various security vulnerabilities, making it susceptible to unauthorized access, data breaches, and other malicious activities. An attacker with access to the operating system can gain access to the applications and data on the device.

**Business Impact**

The inadequate security configuration of the operating system can lead to significant risks, including the compromise of sensitive information, operational disruptions, and financial losses. Moreover, it can damage the organization's reputation and customer trust. Ensuring compliance with security standards and regulatory requirements becomes challenging under these conditions, potentially resulting in legal and financial repercussions.

**Steps to Reproduce**

1. Power on the device and login, then open the settings menu.
2. You'll see issues which deviate from hardening recommendations, including unnecessary services running, default passwords unchanged, or insufficient access controls.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","It is recommended to implement standards for operating systems (such as those outlined in the NIST or ASD hardening guidelines) that allow for the identification of known configuration issues, and the required changes to prevent them from being exploited further.",unclassified,
Insecure Os Firmware - Local Administrator On Default Environment,"The current configuration of the device uses a local administrator account as the default environment setting. This configuration inherently provides administrator-level access to the running processes and access, posing a significant security risk. If an attacker compromises the application or device, they can gain elevated privileges automatically, allowing for extensive control over the device's functions and data.

**Business Impact**

Operating devices under local administrator accounts by default increases the risk of severe security breaches. An attacker with administrator-level access can disable security measures, install malicious software, and access or alter sensitive information. This could lead to operational disruptions, data breaches involving sensitive customer or business information, and significant financial and reputational damage to the organization. Furthermore, this practice may fail to comply with security standards and regulatory compliance requirements.

**Steps to Reproduce**

1. Open the device and use a TTY Cable to connect to the header pins found in the screenshot below:
{{screenshot}}
1. Using a serial connection with the command below, connect to the device:
{{command}}
1. Press enter then type the command `id`.
1. You'll see the response is `id=0` which is a local administrator account.

or

1. Plug in a keyboard and power on the device.
2. On boot, spam the escape key until a new prompt appears, and click Exit.
3. Now on the desktop, open a terminal and type the command: {{command}}.
4. You'll see the response shows the user is a local administrator account.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}",It is recommended to use a low privileged account with minimal permissions for embedded hardware and kiosks.,unclassified,
Insecure Os Firmware - Weakness In Firmware Updates,"There is a weakness in firmware updates that leaves the system exposed to unpatched vulnerabilities and security risks. These limitations prevents effective maintenance and security management, rendering the device obsolete against evolving threats. An attacker can leverage the weakness in firmware updates to gain access to sensitive information.

**Business Impact**

Weaknesses in firmware updates directly affects operational resilience and security posture, leading to potential system integrity and reliability issues. It can lead to unauthorized access and data breaches, compromising the integrity of the device. The subsequent detection and exploitation of these vulnerabilities can cause significant financial, operational, and reputational damage to the organization, diminishing customer trust and potentially violating regulatory compliance.

**Steps to Reproduce**

1. Identify the specific {{Hardware}} model:
{{Hardware name and model number}}
2. Check the user interface or official documentation for firmware update options.
3. Verify the weakness in the firmware update process within the device's settings or configuration portal.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","It is recommended to implement the ability for the firmware to be upgraded on the device, including the use of an automatic update policy which will allow for the patching of future security issues.",unclassified,
Insecure Os Firmware - Weakness In Firmware Updates - Firmware Is Not Encrypted,"The firmware used for the hardware is stored or transmitted without encryption. This lack of encryption allows for easier reverse engineering and analysis, enabling unauthorized individuals to more readily identify security vulnerabilities within the device's firmware.

**Business Impact**

The absence of encryption on the firmware heightens the risk of security vulnerabilities being discovered and exploited. This can lead to unauthorized access and data breaches, compromising the integrity of the device. The subsequent detection and exploitation of these vulnerabilities can cause significant financial, operational, and reputational damage to the organization, diminishing customer trust and potentially violating regulatory compliance.

**Steps to Reproduce**

1. Browse to the following URL and download the firmware: {{URL}}
2. Open the firmware file using {{Tool}} and {{techniques}}, due to its unencrypted state.
3. Observe that the firmware appears unencrypted, simplifying the process for reverse engineering and vulnerability identification.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}",It is recommended to implement firmware integrity checking that uses cryptographic signatures and allows for the integrity of the firmware updates to be validated by the device prior to patching.,unclassified,
Insecure Os Firmware - Weakness In Firmware Updates - Firmware Does Not Validate Update Integrity,"The hardware fails to validate the authenticity and integrity of the update file. Without proper validation, the system is susceptible to accepting and installing corrupted or malicious updates, compromising the device's security and functionality.

**Business Impact**

The direct impact includes potential compromise of device functionality, unauthorized access to sensitive data, and the introduction of malware, leading to operational disruptions. This vulnerability undermines the trust in the device's security measures, potentially resulting in significant financial costs for mitigation and recovery, alongside damaging the organization's reputation for safeguarding user data and system integrity.

**Steps to Reproduce**

1. Prepare a modified or corrupted firmware update file for the {{hardware version}}.
2. Initiate the firmware update process using the compromised file.
3. Observe the lack of validation checks for the update's authenticity or integrity during the update process.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}",It is recommended to implement encryption for firmware updates so that the data can be protected during transit. This also increases the time it takes to reverse engineer which firmware is used.,unclassified,
Insecure Os Firmware - Weakness In Firmware Updates - Firmware Cannot Be Updated,"The hardware lacks the capability for firmware updates, leaving the system exposed to unpatched vulnerabilities and security risks. These limitations prevents effective maintenance and security management, rendering the device obsolete against evolving threats. An attacker can leverage the lack of firmware updates to gain access to sensitive information.

**Business Impact**

Inability to perform firmware updates directly affects operational resilience and security posture, leading to potential system integrity and reliability issues. It elevates the risk of operational disruptions and could necessitate increased expenditures for device replacement or additional security measures.

**Steps to Reproduce**

1. Identify the specific {{Hardware}} model:
{{Hardware name and model number}}
2. Check the user interface or official documentation for firmware update options.
3. Verify the lack of an update mechanism by attempting to locate or execute a firmware update process within the device's settings or configuration portal.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","It is recommended to implement the ability for the firmware to be upgraded on the device, including the use of an automatic update policy which will allow for the patching of future security issues.",unclassified,
Insecure Os Firmware - Shared Credentials On Storage,"The device in question stores a set of shared credentials on its storage medium. These credentials are intended for accessing a shared service. However, should the device be compromised or acquired by unauthorized parties, an attacker could use these shared credentials to gain access to services that are normally restricted.

**Business Impact**

The presence of shared credentials stored on the device poses a significant security risk. Unauthorized access to shared services can lead to data breaches, unauthorized transactions, or the manipulation of sensitive information. Such incidents can severely impact the organization's operational security, result in financial losses, and damage the organization's reputation, especially if customer data or critical business operations are compromised.

**Steps to Reproduce**

1. Gain physical access to the device and remove the cover, as seen in the images below:

{{screenshot}}
2. Locate the hard drive on the device, and remove it.
3. Using a external hard drive caddy, remove the device's storage.
4. Mount the device and extract the credentials from: {{filepath}}.

or

1. Gain remote access to the device via SSH with the following credentials.
2. Browse to the file path, {{filepath}} and open the file.
3. On Line 32, you can see the variable {{JWT}}.
4. Using the HTTP request below, send the request with the token:
{{HTTP request}}

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","It is recommended to avoid shared credentials where possible. When provisioning service credentials, it is best practice to make them unique per device and strictly scoped to only the resources required to operate, in order to reduce the impact of an exposure of those credentials.",unclassified,
Insecure Os Firmware - Failure To Remove Sensitive Artifacts From Disk,"During the deployment or configuration phases of the device, sensitive artifacts (which can include: configuration information, secrets, or credentials) are transferred to and stored on the device's storage medium. These artifacts are not adequately removed post-deployment or configuration. As a result, an attacker gaining access to the device could view these sensitive artifacts.

**Business Impact**

The persistence of sensitive artifacts on the device's storage poses a significant risk to data confidentiality and system integrity. Unauthorized access to these artifacts can lead to security breaches, unauthorized system access, and the potential leakage of confidential information. The implications include not only immediate operational and financial losses but also long-term damage to the organization's reputation and trustworthiness, alongside potential regulatory non-compliance.

**Steps to Reproduce**

1. Login to the device using the credentials supplied.
2. Open the file found at: {{filepath}}
3. You'll see that the file is a deployment script, viewing the variable, {{variable}} you'll see secrets used during deployment.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","It is recommended to implement robust deletion functions that not only reference to the data, but write over the existing data to prevent digital forensic methods of recovery.",unclassified,
Insecure Os Firmware - Data Not Encrypted At Rest,"The device stores data that is not encrypted at rest, compromising the confidentiality and integrity of the data. This oversight allows an attacker with physical access to the device to easily access and potentially compromise the sensitive data contained within, exposing personal information, secrets, or credentials.

**Business Impact**

The absence of encryption for data at rest on the device poses a significant risk to data confidentiality and integrity. This vulnerability can lead to data breaches, unauthorized access to sensitive information, and potential financial and reputational damages to the organization. It undermines the trust of customers and partners and may result in non-compliance with regulatory requirements related to data protection and privacy.

**Steps to Reproduce**

1. Gain physical access to the device and remove the cover as seen in the images below.
{{screenshot}}
1. Locate the hard drive on the device, and remove it.
1. Using a external hard drive caddy, mount the device.
1. Observe that it is possible to access the filesystem, demonstrating the lack of encryption at rest.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}",It is recommended to encrypt all data at rest within the device to prevent the data from being viewable by a 3rd party attacker.,unclassified,
Insecure Os Firmware - Data Not Encrypted At Rest - Sensitive,"The device stores sensitive data that is not encrypted at rest, compromising the confidentiality and integrity of the data. This oversight allows an attacker with physical access to the device to easily access and potentially compromise the sensitive data contained within, exposing personal information, secrets, or credentials.

**Business Impact**

The absence of encryption for sensitive data at rest on the device poses a significant risk to data confidentiality and integrity. This vulnerability can lead to data breaches, unauthorized access to sensitive information, and potential financial and reputational damages to the organization. It undermines the trust of customers and partners and may result in non-compliance with regulatory requirements related to data protection and privacy.

**Steps to Reproduce**

1. Gain physical access to the device and remove the cover as seen in the images below.
1. Locate the hard drive on the device, and remove it.
1. Using a external hard drive caddy, mount the device.
1. Observe that it is possible to access the filesystem, demonstrating the lack of encryption at rest.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}",It is recommended to encrypt all data at rest within the device to prevent the data from being viewable by a 3rd party attacker.,unclassified,
Insecure Os Firmware - Data Not Encrypted At Rest - Non Sensitive,"The device stores non-sensitive data that is not encrypted at rest. Despite the data not being directly exploitable, its accessibility due to lack of encryption allows attackers with physical access to the device to retrieve this information. This exposure could facilitate reverse engineering efforts or aid in future exploitation attempts, indirectly compromising the system's security.

**Business Impact**

While the data in question is classified as non-sensitive, its exposure still poses security risks. Unauthorized access to this data can provide attackers with insights into the device's operations or architecture, potentially leading to vulnerabilities being uncovered. This situation can undermine the security posture of the device, leading to increased susceptibility to targeted attacks, erosion of customer confidence, and potential reputational damage.

**Steps to Reproduce**

1. Gain physical access to the device and remove the cover as seen in the images below.
1. Locate the hard drive on the device, and remove it.
1. Using a external hard drive caddy, mount the device.
1. Observe that it is possible to access the filesystem, demonstrating the lack of encryption at rest.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}",It is recommended to encrypt all data at rest within the device to prevent the data from being viewable by a 3rd party attacker.,unclassified,
Insecure Os Firmware - Hardcoded Password,"When Operating System (OS) firmware is insecure, it broadens the application’s attack surface and gives  an attacker more opportunity to maintain persistence and achieve a high level of privilege within the application. Firmware can be exploited via network, software, or hardware layers. Once compromised, an attacker can establish persistence, capture sensitive data, exfiltrate data, impact application performance, or pivot into attacking the company’s wider network.

Hard-coded passwords were identified in the source code of the application. An attacker could abuse the hard-coded passwords to gain access to aspects of the application they normally would not have access to. With this increased access, a malicious attacker could perform other attacks on the application, elevate their privileges, or gather sensitive data from within the application.

**Business Impact**

This vulnerability can lead to direct financial loss to the company due to data theft, application manipulation and corruption, or Denial of Service to customers and users of the application. It can also lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Navigate to the source code files of the application
1. Observe that a password is hard-coded into the source code and does not require external validation

**Proof of Concept (PoC)**

The screenshot below shows the hard-coded password within the application source files:

{{screenshot}}","It is recommended to keep all firmware up to date with the latest version and include all firmware in a patch management lifecycle with a detailed firmware upgrade plan. Additionally, hard-coded passwords should not be present within the source-code of the application.",unclassified,
Insecure Os Firmware - Hardcoded Password - Privileged User,"When Operating System (OS) firmware is insecure, it broadens the application’s attack surface and gives  an attacker more opportunity to maintain persistence and achieve a high level of privilege within the application. Firmware can be exploited via network, software, or hardware layers. Once compromised, an attacker can establish persistence, capture sensitive data, exfiltrate data, impact application performance, or pivot into attacking the company’s wider network.

A hard-coded password for a privileged user was identified in the source code of the application. An attacker could abuse the hard-coded password for a privileged user to gain access to aspects of the application they normally would not have access to. With this increased access, a malicious attacker could perform other attacks on the application, or gather sensitive data from within the application.

**Business Impact**

This vulnerability can lead to direct financial loss to the company due to data theft, application manipulation and corruption, or Denial of Service to customers and users of the application. It can also lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Navigate to the source code files of the application
1. Observe that a password is hard-coded into the source code and does not require external validation

**Proof of Concept (PoC)**

The screenshot below shows the hard-coded password within the application source files:

{{screenshot}}","It is recommended to keep all firmware up to date with the latest version and include all firmware in a patch management lifecycle with a detailed firmware upgrade plan. Additionally, hard-coded passwords should not be present within the source-code of the application.",unclassified,
Insecure Os Firmware - Hardcoded Password - Non Privileged User,"When Operating System (OS) firmware is insecure, it broadens the application’s attack surface and gives an attacker more opportunity to maintain persistence and achieve a high level of privilege within the application. Firmware can be exploited via network, software, or hardware layers. Once compromised, an attacker can establish persistence, capture sensitive data, exfiltrate data, impact application performance, or pivot into attacking the company’s wider network.

A hard-coded password for a non-privileged user was identified in the source code of the application. An attacker could abuse the hard-coded password for a non-privileged user to gain access to aspects of the application they normally would not have access to. With this increased access, a malicious attacker could perform other attacks on the application, elevate their privileges, or gather sensitive data from within the application.

**Business Impact**

This vulnerability can lead to direct financial loss to the company due to data theft, application manipulation and corruption, or Denial of Service to customers and users of the application. It can also lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Navigate to the source code files of the application
1. Observe that a password is hard-coded into the source code and does not require external validation

**Proof of Concept (PoC)**

The screenshot below shows the hard-coded password within the application source files:

{{screenshot}}","It is recommended to keep all firmware up to date with the latest version and include all firmware in a patch management lifecycle with a detailed firmware upgrade plan. Additionally, hard-coded passwords should not be present within the source-code of the application.",unclassified,
Insecure Os Firmware - Poorly Configured Disk Encryption,"The device uses a disk encryption to protect stored data from being accessed while at rest. However, due to a poor configuration of the encryption mechanism, an unauthorized attacker with physical access to the device can decrypt the disk's contents. This vulnerability could expose secrets, customer data, or other sensitive information stored on the device.

**Business Impact**

A flaw in the disk encryption configuration significantly undermines the device's data security, posing a high risk to the confidentiality and integrity of stored data. If exploited, this vulnerability can lead to the exposure of sensitive information, potentially resulting in financial losses, damage to the organization's reputation, and erosion of customer trust. Furthermore, it may result in non-compliance with data protection regulations.

**Steps to Reproduce**

1. Gain physical access to the device and start the boot process.
2. Once the device has reached the boot menu and asks for a password, type `A` 257 times and press enter.
3. The device will decrypt the disk and you can access its contents, including any sensitive data stored on the device.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}",It is recommended to use standard cryptographic libraries to reduce the likelihood of implementation vulnerabilities. It's also important to verify that the bootloader and encryption systems are up to date to avoid any known public exploits.,unclassified,
Insecure Os Firmware - Command Injection,"When Operating System (OS) firmware is insecure, it broadens the application’s attack surface and gives  an attacker more opportunity to maintain persistence and achieve a high level of privilege within the application. Firmware can be exploited via network, software, or hardware layers. Once compromised, an attacker can establish persistence, capture sensitive data, exfiltrate data, impact application performance, or pivot into attacking the company’s wider network. An attacker could abuse this command injection  vulnerability in the application to execute arbitrary commands on the user's operating system.


**Business Impact**

This vulnerability can lead to direct financial loss to the company due to data theft, application manipulation and corruption, or Denial of Service to customers and users of the application. It can also lead to reputational damage as customers may view the application as insecure.

**Steps to Reproduce**

1. Start {{application}} on the operating system and navigate to {{url}}
1. Observe that the OS firmware is insecure by {{action}}
1. Input the following payload into {{parameter}} to perform command injection:

{{Payload}}

**Proof of Concept (PoC)**

The screenshots below show the steps required to exploit the command injection:

{{screenshot}}","It is recommended to validate and parameterise all user input to seperate user entered data and commands while. Additionally, it is best practice to not call OS commands directly and instead use built in library function to perform necessary tasks.

It is also best practice to keep all operating systems and firmware up to date with the latest version and include all firmware in a patch management lifecycle with a detailed firmware upgrade plan. 

For further information, see:

- <https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html>",unclassified,
Broken Authentication And Session Management,"Broken authentication and session management vulnerabilities exist when a user is able to access resources or perform actions not intended for their user role. Identity and access controls can be bypassed through a variety of ways including but not limited to, calling an internal post authentication page, modifying the given URL parameters, by manipulating the form, or by counterfeiting sessions.

This application has authentication and session management controls which an attacker can bypass to access a user account. The attacker is only limited by the permissions of the user account they access, including Administrator users. This could include viewing or editing sensitive customer data, viewing or editing other user permissions, and taking over other user accounts or elevating privileges.

**Business Impact**

Broken authentication and session management could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe that the authentication method or session management has been compromised in some way

**Proof of Concept (PoC)**

The screenshot below demonstrates the broken authentication and session management:

{{screenshot}}","Authentication bypass can be remediated by implementing a handful of best practices relating to authentication and session management to ensure secure implementation. These include:

- Keeping all systems, software and operating systems up-to-date with a repeatable patch management process
- Validate all user input server-side
- Ensure that the authentication mechanisms and logic are robust and that each request for a resource passes through an authorization process

The verification logic of the application, as well as all of the above, should be thoroughly tested during the development and QA phases of an application build.

For further information, refer to Open Web Application Security Project(OWASP) guides located at:

- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html>
- <https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/>",unclassified,
Broken Authentication And Session Management - Cleartext Transmission Of Session Token,"Session tokens help a server trust that the requests it is receiving come from a specific authenticated user. When a session token is transmitted in cleartext over an unencrypted channel, it can be intercepted via a Person-in-the-Middle (PitM) attack. This application transmits the session token via a cleartext transmission which can allow an attacker to access the session token via a PitM attack and send requests to the server pretending to be the legitimate user.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure. It can also lead to data theft through the attacker’s ability to manipulate data through their ability to make requests to the server through a legitimate session token. However, the attacker is limited by the legitimate user’s privileges within the application/

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. View the HTTP headers using an HTTP interception proxy
1. Observe the `Secure` flag is not set
1. Observe that cookies are sent in cleartext

**Proof of Concept (PoC)**

The screenshots below show the session token being transmitted via cleartext:

{{screenshot}}","The session token should be sent over an encrypted channel (HTTPS) at all times.

Additionally, it is best practice to enforce short session expiration times for all user sessions. This allows an attacker less time to use a valid session ID. However, session timeout values should be set based upon business needs which take into consideration the criticality of the application and the data contained within.

For further information, please see:

- <https://cwe.mitre.org/data/definitions/319.html>
- <https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html>
- <https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#secure-attribute>",unclassified,
Broken Authentication And Session Management - Weak Registration Implementation,"When the registration implementation for an application is weak, it diminishes the integrity of the overall authentication process. An application's registration process can be weakened by a connection over HTTP, or by allowing users to submit a disposable or alias email address to register an account, for example.The weak registration implementation for this application could allow an attacker to abuse the registration process and bulk register fake user profiles to launch spam campaigns.

**Business Impact**

Having a weak registration implementation can result in reputational damage for the business through the impact to customers’ trust as they could believe that the business doesn’t take their account security seriously or trust that their data within will remain secure.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Register an account
1. {{action}} and observe that the registration implementation is weak

**Proof of Concept (PoC)**

The following screenshot shows the weak registration implementation:

{{screenshot}}","The application should only accept valid email addresses for all user accounts to minimize account abuse. Additionally, registration should occur over an HTTP connection to ensure that the network traffic cannot be sniffed by a local attacker.",unclassified,
Broken Authentication And Session Management - Weak Registration Implementation - Over Http,"When the registration implementation for an application is weak, it diminishes the integrity of the overall authentication process. The application sends a registration or confirmation link over an unsecure HTTP connection. An attacker with local network access can intercept and read the content of the HTTP connection, allowing them to abuse the registration process and misuse user accounts.

**Business Impact**

Having a weak registration implementation can result in reputational damage for the business through the impact to customers’ trust as they could believe that the business doesn’t take their account security seriously or trust that their data within will remain secure.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Register a new user account
1. Observe that the registration implementation is connected over HTTP

**Proof of Concept (PoC)**

The following screenshot shows the weak registration implementation:

{{screenshot}}","All authentication processes, including registration, should be transmitted over an encrypted HTTPS connection.",unclassified,
Broken Authentication And Session Management - Concurrent Logins,"Having multiple concurrent logins can allow an attacker to reuse stolen or acquired session tokens to hijack requests. Old sessions are commonly found in open source intelligence efforts or through sniffed requests via Person-in-The-Middle (PitM) attacks. An attacker can use previously acquired sessions to exploit the privacy of a user of this application by continually accessing their account.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Login to the application
1. Using an incognito tab or another browser, login using the same credentials
1. Observe that both sessions remain valid

**Proof of Concept (PoC)**

The screenshots below show the concurrent logins:

{{screenshot}}","The application should monitor and alert the user to concurrent login events and provide the user a way to logout of other sessions than their current login.

For further information, please see:
<https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#simultaneous-session-logons>",unclassified,
Broken Authentication And Session Management - Session Fixation,"Session fixation occurs when there is an error in the way the application manages session IDs for users. An attacker with access to the application can set the session or cookies manually to force the targeted user’s browser to fixate on using the attacker's session cookies. This can be performed by setting a token in the URL or a hidden form by chaining vulnerabilities.

**Business Impact**

This vulnerability could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Sign into a user’s account
1. Perform {{action}} to see the session token in the URL or form field and copy it:

{{screenshot}}

1. Open another container or incognito session and set the cookie manually
1. Observe the application does {{action}} to show that the session is fixated

**Proof of Concept (PoC)**

The screenshot(s) below shows the full exploit:

{{screenshot}}","The application should use a unique, randomly generated session identifier for each session and ensure that the identifier is regenerated upon successful authentication.

For further information, please see:

- <https://owasp.org/www-community/controls/Session_Fixation_Protection>
- <https://www.hacksplaining.com/prevention/session-fixation>",unclassified,
Broken Authentication And Session Management - Session Fixation - Remote Attack Vector,"Session fixation occurs when there is an error in the way the application manages session IDs for users. An attacker with remote access to the application can set the session or cookies manually to force the targeted user’s browser to fixate on using the attacker's session cookies.This can be performed remotely by setting a token in the URL or a hidden form by chaining vulnerabilities.

**Business Impact**

This vulnerability could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Sign into a user’s account
1. Perform {{action}} to see the session token in the URL or form field:

{{screenshot}}

1. Perform {{action}} to send the request in an incognito browser and login using the same user credentials

**Proof of Concept (PoC)**

The screenshot(s) below shows the full exploit:

{{screenshot}}","The application should use a unique, randomly generated session identifier for each session and ensure that the identifier is regenerated upon successful authentication.

For further information, please see:

- <https://owasp.org/www-community/controls/Session_Fixation_Protection>
- <https://www.hacksplaining.com/prevention/session-fixation>",unclassified,
Broken Authentication And Session Management - Session Fixation - Local Attack Vector,"Session fixation occurs when there is an error in the way the application manages session IDs for users. An attacker with local access to the application can set the session or cookies manually to force the targeted user’s browser to fixate on using the attacker's session cookies. This can be performed remotely by setting a token in the URL or a hidden form by chaining vulnerabilities.

**Business Impact**

This vulnerability could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Sign into a user’s account
1. Perform {{action}} to see the session token in the URL or form field and copy it:

{{screenshot}}

1. Open another container or incognito session and set the cookie manually
1. Observe the application does {{action}} to show that the session is fixated

**Proof of Concept (PoC)**

The screenshot(s) below shows the full exploit:

{{screenshot}}","The application should use a unique, randomly generated session identifier for each session and ensure that the identifier is regenerated upon successful authentication.

For further information, please see:

- <https://owasp.org/www-community/controls/Session_Fixation_Protection>
- <https://www.hacksplaining.com/prevention/session-fixation>",unclassified,
Broken Authentication And Session Management - Saml Replay,"SAML replay is a vulnerability where an attacker intercepts and reuses a valid Security Assertion Markup Language (SAML) token to gain unauthorized access to a system. This occurs when the application fails to implement proper safeguards, such as token expiration, or single-use tokens. An attacker can use the replayed token to access sensitive data, or perform unauthorized actions within the application on behalf of a user.

**Business Impact**  
SAML Replay attacks can lead to unauthorized access to sensitive data, and can cause financial, reputational, and legal damages. This vulnerability could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Capture the following request that includes a valid SAML assertion:

```
{{request}}
```

1. Replay the captured SAML assertion by sending it to the target application without modification.
1. Observe that the application grants access based on the replayed token


**Proof of Concept (PoC)**

The screenshot below demonstrates the broken authentication and session management:

{{screenshot}}","SAML replay attacks can be remediated by implementing a handful of best practices relating to authentication and session management to ensure secure implementation. These include:

- SAML assertions must include time-limited tokens with precise timestamps. The Service Providers (SPs) must check these timestamps, rejecting any assertion that is outside the validity window.
- Validate SAML assertions against the originating identity provider to ensure authenticity.
- Regularly monitor authentication logs for unusual patterns, such as repeated use of the same token.

The verification logic of the application, as well as all of the above, should be thoroughly tested during the development and QA phases of an application build.

For further information, refer to Open Web Application Security Project (OWASP) guide located at:

- <https://cheatsheetseries.owasp.org/cheatsheets/SAML_Security_Cheat_Sheet.html>",unclassified,
Broken Authentication And Session Management - Weak Login Function,"Weak login functionality arises from improperly configured authentication practices which weakens the security of the authentication process of an application. This can lead to an attacker gaining access to user data and functionality of the application by taking advantage of the broken authentication and session management mechanisms.

**Business Impact**

Weak login function can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the privileges of the account the attacker gains access to.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe in the HTTP interception proxy a 200 OK in the HTTP response indicating valid access

**Proof of Concept (PoC)**

The following screenhots show the full exploit:

{{screenshot}}","Weak login function can be remediated by implementing a handful of best practices relating to authentication and session management to ensure secure implementation. These include:

- Keeping all systems, software and operating systems up-to-date with a repeatable patch management process
- Validate all user input server-side
- Ensure that the authentication mechanisms and logic are robust and that each request for a resource passes through an authorization process

The verification logic of the application, as well as all of the above, should be thoroughly tested during the development and QA phases of an application build.

For further information, refer to Open Web Application Security Project(OWASP) guides located at:

- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html>
- <https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/>",unclassified,
Broken Authentication And Session Management - Weak Login Function - Lan Only,"Weak login functionality arises from improperly configured authentication practices which weakens the security of the authentication process of an application. This application does not protect the security of users’ credentials as the login is only available via a LAN connection. A malicious attacker can Person-in-the-Middle (PiTM) communication between the user and the application on the LAN to steal administrative credentials and login to the system using admin privileges.

**Business Impact**

Weak login function can lead to indirect financial loss through an attacker accessing login credentials and gaining access to the user’s account. From here, the attacker could delete, or modify data. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the privileges of the account the attacker gains access to.

**Steps to Reproduce**

1. On the LAN, poison the DNS and ARP tables of the target:

{{screenshot}}

1. Man-in-The-Middle (MiTM) communication and route traffic through your computer:

{{screenshot}}

1. Forward the request to see that the requests are unencrypted in transit

**Proof of Concept (PoC)**

The following screenshots show the full exploit:

{{screenshot}}","Weak login function can be remediated by implementing a handful of best practices relating to authentication and session management to ensure secure implementation. These include:

- Enabling HTTPS for the login page and all subsequent authenticated pages
- Disable the option of forcing a HTTP connection by browsers
- Implement the HTTP Strict Transport Security (HSTS) header
- Keeping all systems, software and operating systems up-to-date with a repeatable patch management process
- Validate all user input server-side
- Ensure that the authentication mechanisms and logic are robust and that each request for a resource passes through an authorization process

The verification logic of the application, as well as all of the above, should be thoroughly tested during the development and QA phases of an application build.

For further information, refer to Open Web Application Security Project(OWASP) guides located at:

- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#transmit-passwords-only-over-tls-or-other-strong-transport>
- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html>
- <https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/>",unclassified,
Broken Authentication And Session Management - Weak Login Function - Http And Https Available,"Weak login functionality arises from improperly configured authentication practices which weakens the security of the authentication process of an application. This application does not protect the security of users’ credentials as it allows the login page to load over both a HTTP and a HTTPS connection. This means that it is possible for web requests to be transmitted over HTTP in plaintext, allowing an attacker on the same network to observe these requests, and obtain the login credentials.

**Business Impact**

Weak login function can lead to indirect financial loss through an attacker accessing login credentials and gain access to the user’s account. From here, the attacker could delete, or modify data. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the privileges of the account the attacker gains access to.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Attempt to sign into the website using the login button
1. In the HTTP interception proxy, observe that the credentials are submitted HTTPS, but are also accessible on HTTP

**Proof of Concept (PoC)**

The following screenhots show the full exploit:

{{screenshot}}","Weak login function can be remediated by implementing a handful of best practices relating to authentication and session management to ensure secure implementation. These include:

- Enabling HTTPS for the login page and all subsequent authenticated pages
- Disable the option of forcing a HTTP connection by browsers
- Implement the HTTP Strict Transport Security (HSTS) header
- Keeping all systems, software and operating systems up-to-date with a repeatable patch management process
- Validate all user input server-side
- Ensure that the authentication mechanisms and logic are robust and that each request for a resource passes through an authorization process

The verification logic of the application, as well as all of the above, should be thoroughly tested during the development and QA phases of an application build.

For further information, refer to Open Web Application Security Project(OWASP) guides located at:

- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#transmit-passwords-only-over-tls-or-other-strong-transport>
- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html>
- <https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/>",unclassified,
Broken Authentication And Session Management - Weak Login Function - Https Not Available Or Http By Default,"Weak login functionality arises from improperly configured authentication practices which weakens the security of the authentication process of an application. When this application loads the login page over HTTP by default or doesn’t have HTTPS available, all web requests are transmitted over HTTP in plaintext. This allows any attacker on the same network to observe these requests, and obtain the login credentials.

**Business Impact**

Weak login function can lead to indirect financial loss through an attacker accessing login credentials and gain access to the user’s account. From here, the attacker could delete or modify the users data. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the privileges of the account the attacker gains access to.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Attempt to sign into the website using the login button
1. In the HTTP interception proxy, observe that the credentials are submitted over HTTP by default

**Proof of Concept (PoC)**

The following screenhots show the full exploit:

{{screenshot}}","Weak login function can be remediated by implementing a handful of best practices relating to authentication and session management to ensure secure implementation. These include:

- Enabling HTTPS for the login page and all subsequent authenticated pages
- Keeping all systems, software and operating systems up-to-date with a repeatable patch management process
- Validate all user input server-side
- Ensure that the authentication mechanisms and logic are robust and that each request for a resource passes through an authorization process

The verification logic of the application, as well as all of the above, should be thoroughly tested during the development and QA phases of an application build.

For further information, refer to Open Web Application Security Project(OWASP) guides located at:

- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#transmit-passwords-only-over-tls-or-other-strong-transport>
- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html>
- <https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/>",unclassified,
Broken Authentication And Session Management - Weak Login Function - Other Plaintext Protocol No Secure Alternative,"Weak login functionality arises from improperly configured authentication practices which weakens the security of the authentication process of an application. This application does not protect the security of users’ credentials as it allows the authentication to be transmitted over a plaintext protocol and does not implement a secure alternative. This means that it is possible for user credentials to be transmitted in plaintext, allowing an attacker on the same network to observe these requests, and obtain the login credentials.

**Business Impact**

Weak login function can lead to indirect financial loss through an attacker accessing login credentials and gain access to the user’s account. From here, the attacker could delete, or modify data. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the privileges of the account the attacker gains access to.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Attempt to sign into the website using the login button
1. In the HTTP interception proxy, observe that the credentials are submitted over an unsecure protocol and there is no option for HTTPS

**Proof of Concept (PoC)**

The following screenhots show the full exploit:

{{screenshot}}","Weak login function can be remediated by implementing a handful of best practices relating to authentication and session management to ensure secure implementation. These include:

- Enabling HTTPS for the login page and all subsequent authenticated pages
- Disable the option of forcing a HTTP connection by browsers
- Implement the HTTP Strict Transport Security (HSTS) header
- Keeping all systems, software and operating systems up-to-date with a repeatable patch management process
- Validate all user input server-side
- Ensure that the authentication mechanisms and logic are robust and that each request for a resource passes through an authorization process

The verification logic of the application, as well as all of the above, should be thoroughly tested during the development and QA phases of an application build.

For further information, refer to Open Web Application Security Project(OWASP) guides located at:

- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#transmit-passwords-only-over-tls-or-other-strong-transport>
- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html>
- <https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/>",unclassified,
Broken Authentication And Session Management - Weak Login Function - Not Operational,"Weak login functionality arises from improperly configured authentication practices which weakens the security of the authentication process of an application. This application does not protect the security of users’ credentials as it allows a login function to load on a non-operational endpoint that is not intended for public access. An attacker can Person-in-the-Middle (PiTM) communication between the user and the application on the specified IP to steal administrative credentials and login to the system using admin privileges.

**Business Impact**

Weak login function can lead to indirect financial loss through an attacker accessing login credentials and gaining access to the user’s account. From here, the attacker could delete, or modify data. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the privileges of the account the attacker gains access to.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to the vulnerable endpoint: {{URL or x.x.x.x}}

1. Man-in-The-Middle (MiTM) communication and route traffic through your computer:

{{screenshot}}

1. Attempt to sign into the website using the login button
1. In the HTTP interception proxy, observe that the requests are unencrypted in transit

**Proof of Concept (PoC)**

The following screenshots show the full exploit:

{{screenshot}}","Weak login function can be remediated by implementing a handful of best practices relating to authentication and session management to ensure secure implementation. These include:

- Removing or restricting public access to endpoints that are not operational
- If the endpoint is intended for public access, consider using multi-factor authentication (MFA), to reduce the risk of unauthorized access
- Enabling HTTPS for the login page and all subsequent authenticated pages
- Disable the option of forcing a HTTP connection by browsers
- Implement the HTTP Strict Transport Security (HSTS) header
- Keeping all systems, software and operating systems up-to-date with a repeatable patch management process
- Validate all user input server-side
- Ensure that the authentication mechanisms and logic are robust and that each request for a resource passes through an authorization process

The verification logic of the application, as well as all of the above, should be thoroughly tested during the development and QA phases of an application build.

For further information, refer to Open Web Application Security Project(OWASP) guides located at:

- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#transmit-passwords-only-over-tls-or-other-strong-transport>
- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html>
- <https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/>",unclassified,
Broken Authentication And Session Management - Weak Login Function - Over Http,"Weak login functionality arises from improperly configured authentication practices which weakens the security of the authentication process of an application. When this application loads the login page over HTTP all web requests are transmitted in plaintext, allowing any attacker on the same network to observe these requests, and obtain the login credentials.

**Business Impact**

Weak login function can lead to indirect financial loss through an attacker accessing login credentials and gain access to the user’s account. From here, the attacker could delete, or modify data. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the privileges of the account the attacker gains access to.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Attempt to sign into the website using the login button
1. In the HTTP interception proxy, observe that the credentials are submitted over HTTP

**Proof of Concept (PoC)**

The following screenhots show the full exploit:

{{screenshot}}","Weak login function can be remediated by implementing a handful of best practices relating to authentication and session management to ensure secure implementation. These include:

- Enabling HTTPS for the login page and all subsequent authenticated pages
- Keeping all systems, software and operating systems up-to-date with a repeatable patch management process
- Validate all user input server-side
- Ensure that the authentication mechanisms and logic are robust and that each request for a resource passes through an authorization process

The verification logic of the application, as well as all of the above, should be thoroughly tested during the development and QA phases of an application build.

For further information, refer to Open Web Application Security Project(OWASP) guides located at:

- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#transmit-passwords-only-over-tls-or-other-strong-transport>
- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html>
- <https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/>",unclassified,
Broken Authentication And Session Management - Authentication Bypass,"Authentication bypass vulnerabilities allow an attacker to gain access to an account without having to go through the application's authentication procedure. 

Authentication bypass often occurs through logic flaws and incomplete implementation of authentication mechanisms. Bypassing the authentication mechanisms of this application allows an attacker to view or edit data or other user's permissions, take over user accounts, access unauthorized endpoints, or expose critical data, depending on the authorization of the account they gain access to.

**Business Impact**

Authentication bypass can lead to data loss or theft through an attacker's access to data. The severity of which is dependent on the sensitivity of the data within the application. It can also result in reputational damage to the application or the company due to legitimate users not trusting the security of the application if the application's data becomes publicly available.

**Steps to Reproduce**

1. Navigate to: {{URL}} and login as a regular user
1. In the URL, change the `/user` to `/user/administrator`
1. Observe that the application now allows the user to view other user's profile details. These actions are usually restricted to an authenticated user

**Proof of Concept (PoC)**

The following image(s) show the full exploit:

{{screenshot}}

An attacker can bypass authentication or break session management to access the application's data.","Authentication bypass can be remediated by implementing a handful of best practices relating to authentication and session management to ensure secure implementation. These include:

- Keeping all systems, software and operating systems up-to-date with a repeatable patch management process
- Validate all user input server-side
- Ensure that the authentication mechanisms and logic are robust and that each request for a resource passes through an authorization process

The verification logic of the application, as well as all of the above, should be thoroughly tested during the development and QA phases of an application build.

For further information, refer to Open Web Application Security Project (OWASP):

- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html>
- <https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/>",unclassified,
Broken Authentication And Session Management - Two Fa Bypass,"Incorrectly implemented Second Factor Authentication (2FA) mechanisms can be bypassed through manipulation of the form, modifying the given URL parameters, or by counterfeiting the session. The 2FA mechanism for this application can be bypassed by an attacker who can gain access to the application through a user’s account and impersonate users.

The attacker is only limited by the permissions of the user account they access, including Administrator users. This could include viewing or editing sensitive customer data, viewing or editing other user permissions, and taking over other user accounts or elevating privileges.

**Business Impact**

Bypassing 2FA mechanisms could lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Attempt to sign in to the application
1. Intercept the 2FA request using the HTTP interception proxy
1. Modify the body of the request (as below) and forward it to the endpoint:

```HTTP
{{request}}
```

1. Observe that the 2FA mechanism has been bypassed and a successful login has occurred

**Proof of Concept (PoC)**

The screenshot below demonstrates that 2FA has been bypassed:

{{screenshot}}","Authentication bypass can be remediated by implementing a handful of best practices relating to authentication and session management to ensure secure implementation. These include:

- Keeping all systems, software and operating systems up-to-date with a repeatable patch management process
- Validate all user input server-side
- Ensure that the authentication mechanisms and logic are robust and that each request for a resource passes through an authorization process

The verification logic of the application, as well as all of the above, should be thoroughly tested during the development and QA phases of an application build.

For further information, refer to Open Web Application Security Project(OWASP) guides located at:

- <https://cheatsheetseries.owasp.org/cheatsheets/Multifactor_Authentication_Cheat_Sheet.html>
- <https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html>
- <https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/>",unclassified,
Broken Authentication And Session Management - Failure To Invalidate Session,"Failure to invalidate a session is a vulnerability which allows an attacker to maintain access to a service. An attacker can use previously acquired sessions to exploit the privacy of a targeted user by continually accessing their account and gathering information about an application’s endpoints an unauthenticated user will not usually have access to.

An attacker may compromise a user’s session through a variety of ways including, calling an internal post authentication page, modifying the given URL parameters, phishing a user, by manipulating a form, or by counterfeiting sessions. Once they have gained account access, an attacker may be able to change the password of the account and lock out the legitimate user. The attacker’s actions are limited by the privileges of the user’s account that they gain access to. This could include viewing or editing sensitive customer data, viewing or editing other user permissions.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Sign into a user’s account (Browser A)
1. Sign into the same user’s account, using a different browser (Browser B)
1. Observe that both user sessions are valid

**Proof of Concept (PoC)**

The screenshot below shows the the application failing to invalidate the session:

{{screenshot}}","The application should monitor and alert the user to concurrent login events and provide the user a way to logout of other sessions than their current login.

For further information, please see:
<https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#simultaneous-session-logons>",unclassified,
Broken Authentication And Session Management - Failure To Invalidate Session - On Logout Server Side Only,"Failure to invalidate a session when a user logs out is a vulnerability that increases the attack surface for session hijacking attacks, such as Cross-Site Scripting (XSS), session sniffing, and other client-side attacks. Most users have the expectation that when they logout, no one else can access their account. When sessions are not invalidated on logout, the user’s trust is broken.

This application fails to invalidate a user’s session server-side on logout, leaving the account vulnerable to session hijacking. An attacker may compromise a user’s session then be able to change the password of the account and lock out the legitimate user. Once the attacker has gained access to an account their actions are only limited by the privileges of the user’s account that they have gained access to. This could include viewing or editing sensitive customer data, viewing or editing other user permissions.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

Failure to invalidate a session on logout may also lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Sign into a user account
1. In the HTTP interception proxy, capture any authenticated GET or POST request
1. Log out of the user account in the browser
1. In the HTTP interception proxy, resend the captured request to the endpoint:

```HTTP
{{request}}
```

1. Observe that the session token was not invalidated on logout

**Proof of Concept (PoC)**

The screenshot below show the logout occurring and the application failing to invalidate the session:

{{screenshot}}","The application should invalidate all current user sessions, both server-side and client-side, when the user logs out.

As many common user scenarios involve users leaving or closing a page instead of logging out, short session expiration should also be considered for all user sessions. This allows an attacker less time to use a valid session ID. Session timeout values should be set based upon business needs. wThe length of the session should take into consideration the criticality of the application and the data contained within.

For further information, please see Open Web Application Security Project (OWASP):

- <https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#renew-the-session-id-after-any-privilege-level-change>
- <https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#session-expiration>
- <https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html>",unclassified,
Broken Authentication And Session Management - Failure To Invalidate Session - On Password Change,"An attacker may compromise a user's session through a variety of ways including, calling an internal post authentication page, modifying the given URL parameters, phishing a user, by manipulating a form, or by counterfeiting sessions. Once they have gained account access, an attacker may be able to change the password of the account and lock out the legitimate user. The attacker's actions are limited by the privileges of the user's account that they gain access to. This could include viewing or editing sensitive customer data, viewing or editing other user permissions.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure. Additionally, this can cause escalations where a user knows that their account is compromised, but have no means of evicting an attacker by changing their password.

**Steps to Reproduce**

1. Using one browser (Browser A), sign into a user's account using the login page: {{URL}}
1. Using a different browser (Browser B), sign into the same user's account 
1. Using Browser A, change the password of the account
1. Using Browser B, observe that the user session is still valid

**Proof of Concept (PoC)**

The screenshots below show the password change and the application failing to invalidate the session:

{{screenshot}}

{{screenshot}}","At a minimum, all non-current user sessions should be invalidated when the user changes their password. However, it is best practice to invalidate all of a user's sessions upon password reset and have the user login to their account again with the newly created password.

Additionally, short session expiration windows should be considered for all user sessions as they allow an attacker less time to use a valid session ID. Session timeout values should be set based upon business needs which take into consideration the criticality of the application and the data contained within.

For further information, please see Open Web Application Security Project (OWASP) guides relating to this:

<https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#renew-the-session-id-after-any-privilege-level-change>
<https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#session-expiration>
<https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html>",unclassified,
Broken Authentication And Session Management - Failure To Invalidate Session - All Sessions,"Sessions commonly fail to invalidate active sessions. An attacker can use previously acquired sessions to exploit the privacy of a targeted user by continually accessing their account and gathering information about an application’s endpoints an unauthenticated user will not usually have access to.

An attacker may compromise a user’s session through a variety of ways including, calling an internal post authentication page, modifying the given URL parameters, phishing a user, by manipulating a form, or by counterfeiting sessions. Once they have gained account access, an attacker may be able to change the password of the account and lock out the legitimate user. The attacker’s actions are limited by the privileges of the user’s account that they gain access to. This could include viewing or editing sensitive customer data, viewing or editing other user permissions.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Sign into a user’s account
1. Capture any authenticated request
1. Logout of the application
1. Replay the request using the HTTP interception proxy
1. Observe that the application responds to the request

**Proof of Concept (PoC)**

The screenshot below shows the the application failing to invalidate the session:

{{screenshot}}","The application should invalidate all current user sessions, both server-side and client-side, when a user logs out.

As many common user scenarios involve users leaving or closing a page instead of logging out, short session expiration should also be considered for all user sessions. This allows an attacker less time to use a valid session ID. Session timeout values should be set based upon business needs. wThe length of the session should take into consideration the criticality of the application and the data contained within.

For further information, please see Open Web Application Security Project (OWASP):

- <https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#simultaneous-session-logons>
- <https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#session-expiration>",unclassified,
Broken Authentication And Session Management - Failure To Invalidate Session - On Two Fa Activation Change,"Failure to invalidate a session after a change in Two-Factor Authentication (2FA) can allow an attacker, who has access to the session cookies, full account access where they can perform actions that the user can. Most users have the expectation that when they reset, change, or activate 2FA, no one else can access their account. When sessions are not invalidated upon 2FA activation or change, the user’s trust is broken. Applications that fail to invalidate sessions when 2FA activated or changed are more susceptible to account takeover by an attacker who has gained a foothold in a legitimate user’s account.

An attacker may compromise a user’s session through a variety of ways including, calling an internal post authentication page, modifying the given URL parameters, phishing a user, by manipulating a form, or by counterfeiting sessions. Once they have gained account access, an attacker may be able to change the password or set their own 2FA on the account and lock out the legitimate user. The attacker’s actions are limited by the privileges of the user’s account that they gain access to. This could include viewing or editing sensitive customer data, viewing or editing other user permissions.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Sign into a user’s account (Browser A)
1. Sign into the same user’s account, using a different browser (Browser B)
1. Using Browser A, set up 2FA for the account
1. Using Browser B, perform an authenticated action, such as changing the profile name
1. Observe that the authenticated action is successful and that the user session is still valid

**Proof of Concept (PoC)**

The screenshots below show 2FA being set and the application failing to invalidate the session:

{{screenshot}}","All user sessions should be invalidated when the user sets up or changes their 2FA. The application should then have the user login to their account again and prompt for the newly created 2FA mechanism.

It is also best practice to shorten session timeout values based upon business needs. The length of the session should take into consideration the criticality of the application and the data contained within.

For further information, please see Open Web Application Security Project (OWASP):

- <https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#renew-the-session-id-after-any-privilege-level-change>
- <https://cheatsheetseries.owasp.org/cheatsheets/Multifactor_Authentication_Cheat_Sheet.html>",unclassified,
Broken Authentication And Session Management - Failure To Invalidate Session - On Logout,"Failure to invalidate a session when a user logs out is a vulnerability that increases the attack surface for session hijacking attacks, such as Cross-Site Scripting (XSS), session sniffing, and other client-side attacks. Most users have the expectation that when they logout, no one else can access their account. When sessions are not invalidated on logout, the user’s trust is broken. 

This application fails to invalidate a user’s session on logout, leaving the account vulnerable to session hijacking. An attacker may compromise a user’s session then be able to change the password of the account and lock out the legitimate user. Once the attacker has gained access to an account their actions are only limited by the privileges of the user’s account that they have gained access to. This could include viewing or editing sensitive customer data, viewing or editing other user permissions.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

Failure to invalidate a session on logout may also lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Sign into a user account
1. In the HTTP interception proxy, capture any authenticated GET or POST request
1. Log out of the user account in the browser
1. In the HTTP interception proxy, resend the following request to the endpoint {{URL}}:

```HTTP
{{request}}
```

1. Observe that the session token was not invalidated on logout

**Proof of Concept (PoC)**

The screenshots below show the logout occurring and the application failing to invalidate the session:

{{screenshot}}","The application should invalidate all current user sessions, both server-side and client-side, when a user logs out.

As many common user scenarios involve users leaving or closing a page instead of logging out, short session expiration should also be considered for all user sessions. This allows an attacker less time to use a valid session ID. Session timeout values should be set based upon business needs. wThe length of the session should take into consideration the criticality of the application and the data contained within.

For further information, please see Open Web Application Security Project (OWASP):

- <https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#renew-the-session-id-after-any-privilege-level-change>
- <https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#session-expiration>
- <https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html>",unclassified,
Broken Authentication And Session Management - Failure To Invalidate Session - On Email Change,"Sessions commonly fail to invalidate active sessions. An attacker can use previously acquired sessions to exploit the privacy of a targeted user by continually accessing their account and gathering information about an application’s endpoints an unauthenticated user would not usually have access to. Even when a valid user changes their email address within the application, other user sessions are not invalidated.

An attacker may compromise a user’s session through a variety of ways including, calling an internal post authentication page, modifying the given URL parameters, phishing a user, by manipulating a form, or by counterfeiting sessions. Once they have gained account access, an attacker may be able to change the password of the account and lock out the legitimate user. The attacker’s actions are limited by the privileges of the user’s account that they gain access to. This could include viewing or editing sensitive customer data, viewing or editing other user permissions.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Sign into a user’s account
1. Capture any authenticated request
1. Change the email address associated with the account
1. Logout of the application
1. Replay the request using the HTTP interception proxy
1. Observe that the application responds to the request

**Proof of Concept (PoC)**

The screenshot below shows the the application failing to invalidate the session:

{{screenshot}}","The application should monitor and alert the user to concurrent login events and provide the user a way to logout of other sessions than their current login.

For further information, please see:
<https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#simultaneous-session-logons>",unclassified,
Broken Authentication And Session Management - Failure To Invalidate Session - Long Timeout,"Sessions commonly fail to invalidate active sessions. An attacker can use previously acquired sessions to exploit the privacy of a targeted user by continually accessing their account and gathering information about an application’s endpoints an unauthenticated user will not usually have access to. Due to the application’s long timeout expiration on sessions, an attacker has a longer window of opportunity to use valid user sessions maliciously.

An attacker may compromise a user’s session through a variety of ways including, calling an internal post authentication page, modifying the given URL parameters, phishing a user, by manipulating a form, or by counterfeiting sessions. Once they have gained account access, an attacker may be able to change the password of the account and lock out the legitimate user. The attacker’s actions are limited by the privileges of the user’s account that they gain access to. This could include viewing or editing sensitive customer data, viewing or editing other user permissions.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Sign into a user’s account
1. Capture any authenticated request
1. Wait for 10 mins
1. Replay the request using the HTTP interception proxy
1. Observe that the application responds to the request

**Proof of Concept (PoC)**

The screenshot below shows the the application failing to invalidate the session:

{{screenshot}}","It is best practice to shorten session timeout values based upon business needs. The length of the session should take into consideration the criticality of the application and the data contained within.

For further information, please see:
<https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#session-expiration>",unclassified,
Broken Authentication And Session Management - Failure To Invalidate Session - Permission Change,"**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company as customers may view the application as insecure.

**Steps to Reproduce**

1. Using one browser (Browser A), sign into a user's account using the login page: {{URL}}
1. Using a different browser (Browser B), sign into the same user's account
1. Using Browser A, change the permission level of the account
1. Using Browser B, observe that the user session is still valid with elevated account permissions

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","It is best practice to invalidate all of a user's sessions upon changing the permission level and have the user login to their account again.

Additionally, consider implementing a robust permission management system for control and tracking of user permissions and account access.

For further information, please see Open Web Application Security Project (OWASP) guide relating to this:

- <https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#renew-the-session-id-after-any-privilege-level-change>",unclassified,
Privacy Concerns,"Privacy concerns arise when an application collects user or user device data that is not necessary for the functionality of the application. Unnecessary can range from personally identifiable user information to user device information that is not needed for use of the application. If an attacker were to gain access to this collected information they could perform further attacks on the application, the business, or its users.
  
**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Observe in the HTTP interception proxy that unnecessary data is being collected

**Proof of Concept (PoC)**

Below is a screenshot demonstrating that unnecessary data collection:

{{screenshot}}",It is recommended to reduce the amount of data collected of end users and their devices.,unclassified,
Privacy Concerns - Unnecessary Data Collection,"Unnecessary data collection is where an application collects user or user device data that is not necessary for the functionality of the application. If an attacker were to gain access to this collected information they could perform further attacks on the application, the business, or its users.
  
**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Observe in the HTTP interception proxy that unnecessary data is being collected

**Proof of Concept (PoC)**

Below is a screenshot demonstrating that unnecessary data collection:

{{screenshot}}",It is recommended to reduce the amount of data collected of end users and their devices.,unclassified,
Privacy Concerns - Unnecessary Data Collection - Wifi Ssid Password,"Unnecessary data collection is where an application collects user or user device data that is not necessary for the functionality of the application. The WIFI SSID and password is not used by the application and therefore its collection is unnecessary. If an attacker were to gain access to this collected information they could perform further attacks on the application, the business, or its users.
  
**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Observe in the HTTP interception proxy that the WIFI SSID and password is being collected

**Proof of Concept (PoC)**

Below is a screenshot demonstrating that unnecessary data collection:

{{screenshot}}",It is recommended to reduce the amount of data collected of end users and their devices.,unclassified,
Client Side Injection,"Client-side injection is a vulnerability that results from untrusted client-side data being interpreted and executed by the system without any checks. Within the application an attacker is able to inject data in the form of JavaScript, or a binary file on a local or remote file system, which is then loaded and executed by the application. As a result, the attacker is able to invoke code remotely on the machine.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Notice that {{value}} is loaded by the application when doing {{action}}
1. Perform {{action}} to see the injected code executed by the system

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the client-side injection:

{{screenshot}}","There is no single technique to protect from client-side injection. However, the following best practices should be adhered to:

- All client-side input data should be validated based on the content it is reasonable to contain for users
- When loading libraries or launching executable files, ensure that absolute paths are used. Do not use relative paths",unclassified,
Client Side Injection - Binary Planting,"Client-side injection via binary planting is a vulnerability that results from client-side untrusted data, in the form of a binary file, being interpreted and executed by the system. Within the application an attacker is able to load a planted binary file on a local or remote file system, which is then loaded and executed by the application. As a result, the attacker is able to invoke code remotely on the machine.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Notice that {{value}} is loaded by the application when doing {{action}}
1. Create binary file using {{software}}
1. Upload binary file using {{action}}
1. {{action}} to see permissions executed by the system

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the binary planting:

{{screenshot}}","There is no single technique to protect from binary planting. However, the following best practices should be adhered to:

- All client-side input data should be validated based on the content it is reasonable to contain for users
- When loading libraries or launching executable files, ensure that absolute paths are used. Do not use relative paths",unclassified,"https://owasp.org/www-community/attacks/Binary_planting, https://cwe.mitre.org/data/definitions/114.html"
Client Side Injection - Binary Planting - Non Default Folder Privilege Escalation,"Client-side injection via binary planting is a vulnerability that results from client-side untrusted data, in the form of a binary file, being interpreted and executed by the system. Within the application an attacker is able to load a planted binary file on a local or remote file system, which is then loaded and executed by the application. As a result, the attacker is able to invoke code remotely on the machine.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust. It could also result in privacy violations, fraud, or account takeover depending on the type of privilege escalation obtained by the attacker.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Notice that {{value}} is loaded by the application when doing {{action}}
1. Create binary file using {{software}}
1. Upload binary file using {{action}}
1. {{action}} to see permissions executed by the system

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the binary planting:

{{screenshot}}","There is no single technique to protect from binary planting. However, the following best practices should be adhered to:

All client-side input data should be validated based on the content it is reasonable to contain for users
When loading libraries or launching executable files, ensure that absolute paths are used. Do not use relative paths",unclassified,"https://owasp.org/www-community/attacks/Binary_planting, https://cwe.mitre.org/data/definitions/114.html"
Client Side Injection - Binary Planting - No Privilege Escalation,"Client-side injection via binary planting is a vulnerability that results from client-side untrusted data, in the form of a binary file, being interpreted and executed by the system. Within the application an attacker is able to load a planted binary file on a local or remote file system, which is then loaded and executed by the application. As a result, the attacker is able to invoke code remotely on the machine.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Notice that {{value}} is loaded by the application when doing {{action}}
1. Create binary file using {{software}}
1. Upload binary file using {{action}}
1. {{action}} to see permissions executed by the system

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the binary planting:

{{screenshot}}","There is no single technique to protect from binary planting. However, the following best practices should be adhered to:

All client-side input data should be validated based on the content it is reasonable to contain for users
When loading libraries or launching executable files, ensure that absolute paths are used. Do not use relative paths",unclassified,"https://owasp.org/www-community/attacks/Binary_planting, https://cwe.mitre.org/data/definitions/114.html"
Automotive Security Misconfiguration,"Automotive security misconfigurations can occur within the software, firmware, or network settings of vehicles, leading to security vulnerabilities. These misconfigurations can stem from default settings, inadequate security measures, or improper configurations during the manufacturing or maintenance processes. An attacker can exploit this misconfiguration and gain unauthorised access to data, or manipulate the vehicle system's integrity.

**Business Impact**

This vulnerability can lead to data breaches, unauthorized access to sensitive information, remote exploitation or manipulation of vehicle systems, or compromise of driver safety, privacy, and vehicle integrity. Additionally, it may result in reputational damage, legal liabilities, and financial losses for automotive manufacturers and service providers.

**Steps to Reproduce**

1. Identify the software, firmware, and network components present in the vehicle:
{{Vulnerable component}}
2. Analyze the configurations and settings of these components for potential misconfigurations.
3. Exploit the misconfiguration to gain unauthorized access, manipulate vehicle systems, or intercept communications.
4. Observe that it is possible to {{vulnerable action}}, demonstrating the misconfiguration.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Battery Management System,"Automotive security misconfigurations can occur within the software, firmware, or network settings of vehicles, leading to security vulnerabilities. These misconfigurations can stem from default settings, inadequate security measures, or improper configurations during the manufacturing or maintenance processes. An attacker can exploit this misconfiguration and gain unauthorised access to data, or manipulate the vehicle system's integrity.

**Business Impact**

This vulnerability can lead to data breaches, unauthorized access to sensitive information, remote exploitation or manipulation of vehicle systems, or compromise of driver safety, privacy, and vehicle integrity. Additionally, it may result in reputational damage, legal liabilities, and financial losses for automotive manufacturers and service providers.

**Steps to Reproduce**

1. Identify the software, firmware, and network components present in the vehicle:
{{Vulnerable component}}
2. Analyze the configurations and settings of these components for potential misconfigurations.
3. Exploit the misconfiguration to gain unauthorized access, manipulate vehicle systems, or intercept communications.
4. Observe that it is possible to {{vulnerable action}}, demonstrating the misconfiguration.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Battery Management System - Firmware Dump,"Automotive security misconfigurations can occur within the software, firmware, or network settings of vehicles, leading to security vulnerabilities. These misconfigurations can stem from default settings, inadequate security measures, or improper configurations during the manufacturing or maintenance processes. An attacker can exploit this misconfiguration and gain unauthorised access to data, or manipulate the vehicle system's integrity.

**Business Impact**

This vulnerability can lead to data breaches, unauthorized access to sensitive information, remote exploitation or manipulation of vehicle systems, or compromise of driver safety, privacy, and vehicle integrity. Additionally, it may result in reputational damage, legal liabilities, and financial losses for automotive manufacturers and service providers.

**Steps to Reproduce**

1. Identify the software, firmware, and network components present in the vehicle:
{{Vulnerable component}}
2. Analyze the configurations and settings of these components for potential misconfigurations.
3. Exploit the misconfiguration to gain unauthorized access, manipulate vehicle systems, or intercept communications.
4. Observe that it is possible to {{vulnerable action}}, demonstrating the misconfiguration.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Battery Management System - Fraudulent Interface,"Automotive security misconfigurations can occur within the software, firmware, or network settings of vehicles, leading to security vulnerabilities. These misconfigurations can stem from default settings, inadequate security measures, or improper configurations during the manufacturing or maintenance processes. An attacker can exploit this misconfiguration and gain unauthorised access to data, or manipulate the vehicle system's integrity.

**Business Impact**

This vulnerability can lead to data breaches, unauthorized access to sensitive information, remote exploitation or manipulation of vehicle systems, or compromise of driver safety, privacy, and vehicle integrity. Additionally, it may result in reputational damage, legal liabilities, and financial losses for automotive manufacturers and service providers.

**Steps to Reproduce**

1. Identify the software, firmware, and network components present in the vehicle:
{{Vulnerable component}}
2. Analyze the configurations and settings of these components for potential misconfigurations.
3. Exploit the misconfiguration to gain unauthorized access, manipulate vehicle systems, or intercept communications.
4. Observe that it is possible to {{vulnerable action}}, demonstrating the misconfiguration.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Can,"The Controller Area Network (CAN) is a network bus designed to aid communication between an automotive vehicle’s electronic devices and control units. CAN misconfigurations can lead to security weaknesses in the data transfer process between components that can result in injection flaws. An attacker can take advantage of the CAN misconfiguration and inject a payload into the CAN system, causing the system to not behave as intended.

**Business Impact**

This CAN misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The CAN input is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following CAN message payload:

{{payload}}

1. Observe that {{action}} occurs as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the CAN communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s):

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Can - Injection Headlights,"The Controller Area Network (CAN) is a network bus designed to aid communication between an automotive vehicle’s electronic devices and control units. CAN misconfigurations can lead to security weaknesses in the data transfer process between components that can result in injection flaws. An attacker can take advantage of the CAN misconfiguration and inject a payload into the CAN system, causing the system to not behave as intended.

**Business Impact**

This CAN misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The CAN input is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following CAN message payload:

{{payload}}

1. Observe that {{action}} occurs as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the CAN communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s):

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Can - Injection Sensors,"The Controller Area Network (CAN) is a network bus designed to aid communication between an automotive vehicle’s electronic devices and control units. CAN misconfigurations can lead to security weaknesses in the data transfer process between components that can result in injection flaws. An attacker can take advantage of the CAN misconfiguration and inject a payload into the CAN system, causing the system to not behave as intended.

**Business Impact**

This CAN misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The CAN input is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following CAN message payload:

{{payload}}

1. Observe that {{action}} occurs as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the CAN communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s):

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Can - Injection Dos,"The Controller Area Network (CAN) is a network bus designed to aid communication between an automotive vehicle’s electronic devices and control units. CAN misconfigurations can lead to security weaknesses in the data transfer process between components that can result in injection flaws. The {{application}} allows an attacker to connect to the CAN Bus and send multiple messages to the system at a rate which can cause a Denial of Service (DOS) condition. This can cause disruption to the communication between the vehicle’s electronic devices and control units.

**Business Impact**

This CAN misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The CAN input is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following payload recursively with a short delay using {{hardware}}:

{{payload}}

1. Observe that a DoS condition has been created

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the CAN communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s) recursively causing a DoS condition:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Can - Injection Disallowed Messages,"The Controller Area Network (CAN) is a network bus designed to aid communication between an automotive vehicle’s electronic devices and control units. CAN misconfigurations can lead to security weaknesses in the data transfer process between components that can result in injection flaws. The {{application}} allows an attacker to connect to the CAN Bus and send messages to the system that are otherwise not allowed. This can cause disruption to the communication between the vehicle’s electronic devices and control units.

**Business Impact**

This CAN misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The CAN input is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following disallowed payload:

{{payload}}

1. Observe that {{action}} occurs as a result on {{target}}

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the CAN communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s):

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Can - Injection Pyrotechnical Device Deployment Tool,"The Controller Area Network (CAN) is a network bus designed to aid communication between an automotive vehicle’s electronic devices and control units. CAN misconfigurations can lead to security weaknesses in the data transfer process between components that can result in injection flaws. An attacker can take advantage of the CAN misconfiguration and inject a payload into the CAN system, causing the system to not behave as intended.

**Business Impact**

This CAN misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The CAN input is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following CAN message payload:

{{payload}}

1. Observe that {{action}} occurs as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the CAN communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s):

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Can - Injection Basic Safety Message,"The Controller Area Network (CAN) is a network bus designed to aid communication between an automotive vehicle’s electronic devices and control units. CAN misconfigurations can lead to security weaknesses in the data transfer process between components that can result in injection flaws. An attacker can take advantage of the CAN misconfiguration and inject a payload into the CAN system, causing the system to not behave as intended.

**Business Impact**

This CAN misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The CAN input is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following CAN message payload:

{{payload}}

1. Observe that {{action}} occurs as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the CAN communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s):

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Can - Injection Powertrain,"The Controller Area Network (CAN) is a network bus designed to aid communication between an automotive vehicle’s electronic devices and control units. CAN misconfigurations can lead to security weaknesses in the data transfer process between components that can result in injection flaws. An attacker can take advantage of the CAN misconfiguration and inject a payload into the CAN system, causing the system to not behave as intended.

**Business Impact**

This CAN misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The CAN input is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following CAN message payload:

{{payload}}

1. Observe that {{action}} occurs as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the CAN communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s):

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Can - Injection Steering Control,"The Controller Area Network (CAN) is a network bus designed to aid communication between an automotive vehicle’s electronic devices and control units. CAN misconfigurations can lead to security weaknesses in the data transfer process between components that can result in injection flaws. An attacker can take advantage of the CAN misconfiguration and inject a payload into the CAN system, causing the system to not behave as intended.

**Business Impact**

This CAN misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The CAN input is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following CAN message payload:

{{payload}}

1. Observe that {{action}} occurs as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the CAN communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s):

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Can - Injection Vehicle Anti Theft Systems,"The Controller Area Network (CAN) is a network bus designed to aid communication between an automotive vehicle’s electronic devices and control units. CAN misconfigurations can lead to security weaknesses in the data transfer process between components that can result in injection flaws. An attacker can take advantage of the CAN misconfiguration and inject a payload into the CAN system, causing the system to not behave as intended.

**Business Impact**

This CAN misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The CAN input is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following CAN message payload:

{{payload}}

1. Observe that {{action}} occurs as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the CAN communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s):

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Can - Injection Battery Management System,"The Controller Area Network (CAN) is a network bus designed to aid communication between an automotive vehicle’s electronic devices and control units. CAN misconfigurations can lead to security weaknesses in the data transfer process between components that can result in injection flaws. An attacker can take advantage of the CAN misconfiguration and inject a payload into the CAN system, causing the system to not behave as intended.

**Business Impact**

This CAN misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The CAN input is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following CAN message payload:

{{payload}}

1. Observe that {{action}} occurs as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the CAN communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s):

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Rf Hub,"The Radio Frequency Hub (RFH) is a receiver hub which communicates with other electronic devices and control units through either the Controller Area Network (CAN) bus or a separate serial bus. The RFH allows communications for vehicle accessories such as remote ignition systems, keyless entry, remote immobilization systems, and anti-theft systems, amongst other operations. Misconfigurations in the RFH can lead to security weaknesses across any of these systems. An attacker can leverage misconfigurations in the RFH and cause disruption to the communication between the vehicle’s electronic devices and control units.

**Business Impact**

RFH misconfigurations can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. Setup {{hardware}} and {{software}} to interact with the RF layer of {{target}}
1. Using {{software}} send command: {{payload}}
1. Observe that {{action}} occurs on the {{target}} as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the RFH misconfiguration:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Rf Hub - Unauthorized Access Turn On,"The Radio Frequency Hub (RFH) is a receiver hub which communicates with other electronic devices and control units through either the Controller Area Network (CAN) bus or a separate serial bus. The RFH allows communications for vehicle accessories such as remote ignition systems, keyless entry, remote immobilization systems, and anti-theft systems, amongst other operations.

Misconfigurations in the RFH can lead to security weaknesses across any of these systems. An attacker can control the power state of a device via radio frequency. They could exploit this by performing a Denial of Service (DoS) attack, preventing the owner of the vehicle from turning their vehicle on or off, as well as allowing for remote control of the vehicle during use.

**Business Impact**

This RFH misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. Setup {{hardware}} and {{software}} to interact with the RF layer of {{target}}
1. Turn on {{target}} using {{hardware}} and/or {{software}}

**Proof of Concept (PoC)**

The image(s) below demonstrates the RFH misconfiguration:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Rf Hub - Data Leakage Pull Encryption Mechanism,"The Radio Frequency Hub (RFH) is a receiver hub which communicates with other electronic devices and control units through either the Controller Area Network (CAN) bus or a separate serial bus. The RFH allows communications for vehicle accessories such as remote ignition systems, keyless entry, remote immobilization systems, and anti-theft systems, amongst other operations.

Misconfigurations in the RFH can lead to security weaknesses across any of these systems. An attacker can exploit radio frequency interactions in the target to decode the data sent Over the Air (OTA) or On-Vehicle as they are sent insecurely. Through this, an attacker can uncover PII or confidential data from encrypted communications.

**Business Impact**

This RFH misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. Setup {{hardware}} and {{software}} to interact with the RF layer of {{target}}
1. Perform a Person-in-the-Middle (PitM) attack by doing {{action}}, using {{hardware}} and {{software}}
1. Attempt to bypass the encryption by {{action}} or using meta data from the intercepted messages to decode/decrypt the communication

**Proof of Concept (PoC)**

The image(s) below demonstrates the RFH misconfiguration:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Rf Hub - Can Injection Interaction,"The Radio Frequency Hub (RFH) is a receiver hub which communicates with other electronic devices and control units through either the Controller Area Network (CAN) bus or a separate serial bus. The RFH allows communications for vehicle accessories such as remote ignition systems, keyless entry, remote immobilization systems, and anti-theft systems, amongst other operations.

Misconfigurations in the RFH can lead to security weaknesses across any of these systems. An attacker can exploit radio frequency interactions in the target and can interact and send messages to the CAN bus, disrupting the communication between the vehicle’s electronic devices and control units.

**Business Impact**

This RFH misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. Setup {{hardware}} and {{software}} to interact with the RF layer of {{target}}
1. Using {{software}} send command: {{payload}}
1. Observe that {{action}} occurs on the {{target}} as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the RFH misconfiguration:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Rf Hub - Replay,"The Radio Frequency Hub (RFH) is a receiver hub which communicates with other electronic devices and control units through either the Controller Area Network (CAN) bus or a separate serial bus. The RFH allows communications for vehicle accessories such as remote ignition systems, keyless entry, remote immobilization systems, and anti-theft systems, amongst other operations. Misconfigurations in the RFH can lead to security weaknesses across any of these systems. An attacker can leverage misconfigurations in the RFH and cause disruption to the communication between the vehicle’s electronic devices and control units.

**Business Impact**

RFH misconfigurations can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. Setup {{hardware}} and {{software}} to interact with the RF layer of {{target}}
1. Using {{software}} send command: {{payload}}
1. Observe that {{action}} occurs on the {{target}} as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the RFH misconfiguration:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Rf Hub - Relay,"The Radio Frequency Hub (RFH) is a receiver hub which communicates with other electronic devices and control units through either the Controller Area Network (CAN) bus or a separate serial bus. The RFH allows communications for vehicle accessories such as remote ignition systems, keyless entry, remote immobilization systems, and anti-theft systems, amongst other operations. Misconfigurations in the RFH can lead to security weaknesses across any of these systems. An attacker can leverage misconfigurations in the RFH and cause disruption to the communication between the vehicle’s electronic devices and control units.

**Business Impact**

RFH misconfigurations can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. Setup {{hardware}} and {{software}} to interact with the RF layer of {{target}}
1. Using {{software}} send command: {{payload}}
1. Observe that {{action}} occurs on the {{target}} as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the RFH misconfiguration:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Rf Hub - Key Fob Cloning,"The Radio Frequency Hub (RFH) is a receiver hub which communicates with other electronic devices and control units through either the Controller Area Network (CAN) bus or a separate serial bus. The RFH allows communications for vehicle accessories such as remote ignition systems, keyless entry, remote immobilization systems, and anti-theft systems, amongst other operations.

Misconfigurations in the RFH can lead to security weaknesses across any of these systems. An attacker can exploit the target system by creating a permanent clone of the key fob, giving permanent access to any vehicle of the same make/model.

**Business Impact**

This RFH misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. Setup {{hardware}} and {{software}} to interact with the RF layer of {{target}}
1. Use the {{application}} on {{target}} to clone key fob by {{action}}
1. Use the original key fob to roll the nonce, then unlock {{target}} using spoofed {{hardware}}

**Proof of Concept (PoC)**

The image(s) below demonstrates the RFH misconfiguration:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Rf Hub - Roll Jam,"The Radio Frequency Hub (RFH) is a receiver hub which communicates with other electronic devices and control units through either the Controller Area Network (CAN) bus or a separate serial bus. The RFH allows communications for vehicle accessories such as remote ignition systems, keyless entry, remote immobilization systems, and anti-theft systems, amongst other operations. Misconfigurations in the RFH can lead to security weaknesses across any of these systems. An attacker can leverage misconfigurations in the RFH and cause disruption to the communication between the vehicle’s electronic devices and control units.

**Business Impact**

RFH misconfigurations can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. Setup {{hardware}} and {{software}} to interact with the RF layer of {{target}}
1. Using {{software}} send command: {{payload}}
1. Observe that {{action}} occurs on the {{target}} as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the RFH misconfiguration:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Rsu,"Automotive security misconfigurations can occur within the software, firmware, or network settings of vehicles, leading to security vulnerabilities. These misconfigurations can stem from default settings, inadequate security measures, or improper configurations during the manufacturing or maintenance processes. An attacker can exploit this misconfiguration and gain unauthorised access to data, or manipulate the vehicle system's integrity.

**Business Impact**

This vulnerability can lead to data breaches, unauthorized access to sensitive information, remote exploitation or manipulation of vehicle systems, or compromise of driver safety, privacy, and vehicle integrity. Additionally, it may result in reputational damage, legal liabilities, and financial losses for automotive manufacturers and service providers.

**Steps to Reproduce**

1. Identify the software, firmware, and network components present in the vehicle:
{{Vulnerable component}}
2. Analyze the configurations and settings of these components for potential misconfigurations.
3. Exploit the misconfiguration to gain unauthorized access, manipulate vehicle systems, or intercept communications.
4. Observe that it is possible to {{vulnerable action}}, demonstrating the misconfiguration.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Rsu - Sybil Attack,"Automotive security misconfigurations can occur within the software, firmware, or network settings of vehicles, leading to security vulnerabilities. These misconfigurations can stem from default settings, inadequate security measures, or improper configurations during the manufacturing or maintenance processes. An attacker can exploit this misconfiguration and gain unauthorised access to data, or manipulate the vehicle system's integrity.

**Business Impact**

This vulnerability can lead to data breaches, unauthorized access to sensitive information, remote exploitation or manipulation of vehicle systems, or compromise of driver safety, privacy, and vehicle integrity. Additionally, it may result in reputational damage, legal liabilities, and financial losses for automotive manufacturers and service providers.

**Steps to Reproduce**

1. Identify the software, firmware, and network components present in the vehicle:
{{Vulnerable component}}
2. Analyze the configurations and settings of these components for potential misconfigurations.
3. Exploit the misconfiguration to gain unauthorized access, manipulate vehicle systems, or intercept communications.
4. Observe that it is possible to {{vulnerable action}}, demonstrating the misconfiguration.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Gnss Gps,"Global Navigation Satellite System (GNSS) and Global Positioning System (GPS) spoofing involves the broadcast of fake GNSS/GPS signals to fake the position of a vehicle, or otherwise make the positioning unreliable. An attacker is able to send fake GNSS/GPS signals to the receiver and successfully spoof a vehicle’s position.

**Business Impact**

This vulnerability can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The GNSS/GPS signal is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following payload using {{hardware}}:

{{payload}}

1. Observe that the GNSS/GPS signal has been spoofed

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the GNSS/GPS communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s), causing GNSS/GPS spoofing:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Gnss Gps - Spoofing,"Global Navigation Satellite System (GNSS) and Global Positioning System (GPS) spoofing involves the broadcast of fake GNSS/GPS signals to fake the position of a vehicle, or otherwise make the positioning unreliable. An attacker is able to send fake GNSS/GPS signals to the receiver and successfully spoof a vehicle’s position.

**Business Impact**

This vulnerability can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The GNSS/GPS signal is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following payload using {{hardware}}:

{{payload}}

1. Observe that the GNSS/GPS signal has been spoofed

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the GNSS/GPS communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s), causing GNSS/GPS spoofing:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Infotainment Radio Head Unit,"The In-Vehicle Infotainment (IVI) system, is a central unit in an automotive vehicle's dashboard that centralizes information and entertainment systems and their controls. Misconfigurations in the IVI system can lead to security weaknesses. An attacker can take advantage of IVI misconfiguration and inject a payload into the IVI system, causing the system to not behave as intended.

**Business Impact**

This IVI system misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The IVI system input is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following IVI system message payload:

{{payload}}

1. Observe that {{action}} occurs as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the IVI system communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s):

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Infotainment Radio Head Unit - Source Code Dump,"The In-Vehicle Infotainment (IVI) system is a central unit in an automotive vehicle's dashboard that centralizes information and entertainment systems and their controls. Misconfigurations in the IVI system can lead to security weaknesses. Source code can be dumped in the target IVI system, allowing an attacker to read, release, and exploit code that should otherwise be hidden from users on the IVI unit. An attacker is able to dump firmware code online which also allows others to view, share, or exploit proprietary code.

**Business Impact**

Source code that is accessible from within the IVI system can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. Acquire a bin or firmware file for {{target}}
1. Unzip the firmware using {{software}}
1. Unsquare file system using {{software}}

**Proof of Concept (PoC)**

The image(s) below demonstrates the extracted firmware folder and snippets of exposed source code:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Infotainment Radio Head Unit - Dos Brick,"The In-Vehicle Infotainment (IVI) system is a central unit in an automotive vehicle's dashboard that centralizes information and entertainment systems and their controls. Misconfigurations in the IVI system can lead to security weaknesses. An attacker can take advantage of an IVI misconfiguration and inject format strings into the IVI system, causing a Denial of Service (DoS) condition to the system.

**Business Impact**

DoS in the IVI system can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. Perform reconnaissance on the application by {{action}}, using {{software}} on the system
1. The IVI system {{application}} exposes {{target}} on the system
1. Inject the following payload in the infotainment system input field:

{{payload}}

1. Observe the inserted payload from infotainment system

**Proof of Concept (PoC)**

The image(s) below demonstrates theDoS from injected format strings on the target infotainment system:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Infotainment Radio Head Unit - Code Execution Can Bus Pivot,"The In-Vehicle Infotainment (IVI) system, is a central unit in an automotive vehicle's dashboard that centralizes information and entertainment systems and their controls. Misconfigurations in the IVI system can lead to security weaknesses. An attacker can pivot into the CAN bus system and execute code by taking advantage of an IVI misconfiguration, causing the system to not behave as intended.

**Business Impact**

This IVI system misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The IVI system {{application}} uses this feature to {{action}}, exploited by {{action}}
1. Pivot into the CAN bus using this vulnerability by {{action}}
1. Inject the following CAN bus payload by using {{hardware}} and/or {{application}}:

{{payload}}

1. Observe that {{action}} occurs as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the IVI system communication occurs. It also shows how an attacker connects to the CAN bus, and is able to inject the payload(s):

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Infotainment Radio Head Unit - Sensitive Data Leakage Exposure,"The In-Vehicle Infotainment (IVI) system is a the central unit in an automotive vehicle's dashboard that centralizes information and entertainment systems and their controls. Misconfigurations in the IVI system can lead to security weaknesses. The IVI system leaks sensitive data, allowing an attacker to collect this sensitive data via logs and user configurations within the underlying IVI interface.

**Business Impact**

Sensitive data that is accessible from within the IVI system can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle. Additionally, the impact is further enhanced by the impact of the business having to respond, notify, and recover from a potential data breach if an attacker is successful in exfiltrating PII.

**Steps to Reproduce**

1. Power on {{target}} by {{action}}
1. Use {{application}} and notice that the data is stored/transmitted by {{application}} in an insecure manner

**Proof of Concept (PoC)**

The image(s) below demonstrates how and where to find the sensitive data on the vulnerable system:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Infotainment Radio Head Unit - Code Execution No Can Bus Pivot,"The In-Vehicle Infotainment (IVI) system, is a central unit in an automotive vehicle's dashboard that centralizes information and entertainment systems and their controls. Misconfigurations in the IVI system can lead to security weaknesses. An attacker can execute code on the IVI unit by taking advantage of a misconfiguration in the system, causing the system to not behave as intended.

**Business Impact**

This IVI system misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. Perform reconnaissance on the application by {{action}}, using {{software}} on the system
1. The IVI system {{application}} exposes {{target}} on the system
1. Inject the following to the exposed asset:

{{payload}}

1. Observe that {{action}} occurs as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the IVI system communication occurs. It also shows how an attacker is able to inject the payload(s):

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Infotainment Radio Head Unit - Ota Firmware Manipulation,"The In-Vehicle Infotainment (IVI) system, is a central unit in an automotive vehicle's dashboard that centralizes information and entertainment systems and their controls. Misconfigurations in the IVI system can lead to security weaknesses. An attacker can take advantage of IVI misconfiguration and inject a payload into the IVI system, causing the system to not behave as intended.

**Business Impact**

This IVI system misconfiguration can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. The IVI system input is identified by using {{hardware}} on {{target}}
1. Connect to {{target}} by using {{application}} with {{hardware}}
1. Inject the following IVI system message payload:

{{payload}}

1. Observe that {{action}} occurs as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the process by which an attacker identifies where the IVI system communication occurs. It also shows how an attacker connects to the {{target}}, and is able to inject the payload(s):

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Infotainment Radio Head Unit - Default Credentials,"The In-Vehicle Infotainment (IVI) system, is a central unit in an automotive vehicle's dashboard that centralizes information and entertainment systems and their controls. Misconfigurations in the IVI system can lead to security weaknesses. Default credentials in the IVI unit can be leveraged by an attacker to gain developer access to the system. From here, the attacker can cause the system to behave not as intended.

**Business Impact**

Default credentials in the IVI system can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. Port scan the IVI unit by leveraging {{application}} and {{hardware}}
1. Bruteforce default credentials on exposed service(s)
1. Login to service(s) and run {{action}}
1. Observe that {{action}} occurs as a result

**Proof of Concept (PoC)**

The image(s) below demonstrates the default password successfully authenticating an attacker into the infotainment system:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Infotainment Radio Head Unit - Unauthorized Access To Services,"The In-Vehicle Infotainment (IVI) system is a central unit in an automotive vehicle's dashboard that centralizes information and entertainment systems and their controls. Misconfigurations in the IVI system can lead to security weaknesses. Unauthorized access to services in the IVI system can originate from wireless protocols, in-vehicle applications, and physical inputs that communicate with the vehicle’s IVI unit. An attacker can leverage the unauthorized service(s) to escalate privileges on the IVI unit, and compromise internal and external communications.

**Business Impact**

Exposed services that are accessible from within the IVI system can result in reputational damage and indirect financial loss for the business through the impact to customers’ trust in the security and safety of the automotive vehicle.

**Steps to Reproduce**

1. Scan the {{target}} and find that {{application}} is exposed
1. Access application by {{action}}

**Proof of Concept (PoC)**

The image(s) below demonstrates that the IVI system is exposed to attackers:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Abs,"Automotive security misconfigurations can occur within the software, firmware, or network settings of vehicles, leading to security vulnerabilities. These misconfigurations can stem from default settings, inadequate security measures, or improper configurations during the manufacturing or maintenance processes. An attacker can exploit this misconfiguration and gain unauthorised access to data, or manipulate the vehicle system's integrity.

**Business Impact**

This vulnerability can lead to data breaches, unauthorized access to sensitive information, remote exploitation or manipulation of vehicle systems, or compromise of driver safety, privacy, and vehicle integrity. Additionally, it may result in reputational damage, legal liabilities, and financial losses for automotive manufacturers and service providers.

**Steps to Reproduce**

1. Identify the software, firmware, and network components present in the vehicle:
{{Vulnerable component}}
2. Analyze the configurations and settings of these components for potential misconfigurations.
3. Exploit the misconfiguration to gain unauthorized access, manipulate vehicle systems, or intercept communications.
4. Observe that it is possible to {{vulnerable action}}, demonstrating the misconfiguration.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Abs - Unintended Acceleration Brake,"Automotive security misconfigurations can occur within the software, firmware, or network settings of vehicles, leading to security vulnerabilities. These misconfigurations can stem from default settings, inadequate security measures, or improper configurations during the manufacturing or maintenance processes. An attacker can exploit this misconfiguration and gain unauthorised access to data, or manipulate the vehicle system's integrity.

**Business Impact**

This vulnerability can lead to data breaches, unauthorized access to sensitive information, remote exploitation or manipulation of vehicle systems, or compromise of driver safety, privacy, and vehicle integrity. Additionally, it may result in reputational damage, legal liabilities, and financial losses for automotive manufacturers and service providers.

**Steps to Reproduce**

1. Identify the software, firmware, and network components present in the vehicle:
{{Vulnerable component}}
2. Analyze the configurations and settings of these components for potential misconfigurations.
3. Exploit the misconfiguration to gain unauthorized access, manipulate vehicle systems, or intercept communications.
4. Observe that it is possible to {{vulnerable action}}, demonstrating the misconfiguration.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Immobilizer,"Automotive security misconfigurations can occur within the software, firmware, or network settings of vehicles, leading to security vulnerabilities. These misconfigurations can stem from default settings, inadequate security measures, or improper configurations during the manufacturing or maintenance processes. An attacker can exploit this misconfiguration and gain unauthorised access to data, or manipulate the vehicle system's integrity.

**Business Impact**

This vulnerability can lead to data breaches, unauthorized access to sensitive information, remote exploitation or manipulation of vehicle systems, or compromise of driver safety, privacy, and vehicle integrity. Additionally, it may result in reputational damage, legal liabilities, and financial losses for automotive manufacturers and service providers.

**Steps to Reproduce**

1. Identify the software, firmware, and network components present in the vehicle:
{{Vulnerable component}}
2. Analyze the configurations and settings of these components for potential misconfigurations.
3. Exploit the misconfiguration to gain unauthorized access, manipulate vehicle systems, or intercept communications.
4. Observe that it is possible to {{vulnerable action}}, demonstrating the misconfiguration.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Automotive Security Misconfiguration - Immobilizer - Engine Start,"Automotive security misconfigurations can occur within the software, firmware, or network settings of vehicles, leading to security vulnerabilities. These misconfigurations can stem from default settings, inadequate security measures, or improper configurations during the manufacturing or maintenance processes. An attacker can exploit this misconfiguration and gain unauthorised access to data, or manipulate the vehicle system's integrity.

**Business Impact**

This vulnerability can lead to data breaches, unauthorized access to sensitive information, remote exploitation or manipulation of vehicle systems, or compromise of driver safety, privacy, and vehicle integrity. Additionally, it may result in reputational damage, legal liabilities, and financial losses for automotive manufacturers and service providers.

**Steps to Reproduce**

1. Identify the software, firmware, and network components present in the vehicle:
{{Vulnerable component}}
2. Analyze the configurations and settings of these components for potential misconfigurations.
3. Exploit the misconfiguration to gain unauthorized access, manipulate vehicle systems, or intercept communications.
4. Observe that it is possible to {{vulnerable action}}, demonstrating the misconfiguration.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Sensitive Data Exposure,"Sensitive data exposure can occur when sensitive data is not encrypted, or behind an authorization barrier. When this information is exposed it can place sensitive data, such as secrets, at risk. This can occur due to a variety of scenarios such as not encrypting data, SSL not being used for authenticated pages, or passwords being stored using unsalted hashes. Examples of such data include, but are not limited to: personally identifiable information (PII), Social Security numbers, medical data, banking information, and login credentials.

Sensitive data relating to the business was exposed. This data could be exfiltrated and used by an attacker to sell access to databases and database content, or use credentials identified to take over accounts, amongst other attack vectors.

**Business Impact**

Disclosure of secrets can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Use a browser to navigate to: {{url}}/data/
1. Observe that secrets are being disclosed

**Proof of Concept (PoC)**

The screenshots below displays the secrets disclosed:

{{screenshot}}","It is recommended to encrypt sensitive data, including secrets, both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data including secrets should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Exif Geolocation Data Not Stripped From Uploaded Images,"Exchangeable Image File Format (EXIF) data is a standard used to specify the format of metadata in photographs. Most EXIF data contains the make, model and type of camera used, the lens settings, as well as the geolocation data. This application does not remove the EXIF data when a user uploads photographs, which could be used by an attacker to find and collect the geolocation data of users.

**Business Impact**

When an application fails to remove the EXIF data from uploaded images, it breaks the user’s trust in the application and can result in reputational damage to the business.

**Steps to Reproduce**

1. Use a browser to navigate to: {{url}}
1. Download the user uploaded image
1. Extract the EXIF geolocation data

**Proof of Concept (PoC)**

The following screenshot shows the EXIF Geolocation Data:

{{screenshot}}","The application should strip all metadata from images when they are uploaded to protect the privacy of its users.

It is recommended to encrypt sensitive data both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Exif Geolocation Data Not Stripped From Uploaded Images - Automatic User Enumeration,"Exchangeable Image File Format (EXIF) data is a standard used to specify the format of metadata in photographs. Most EXIF data contains the make, model and type of camera used, the lens settings, as well as the geolocation data. This application does not remove the EXIF data when a user uploads photographs, which could be used by an attacker to find and collect the geolocation data of users. Additionally, software can be used to automatically extract the EXIF geolocation data from multiple uploaded images, which can be used to automatically enumerate users.

**Business Impact**

When an application fails to remove the EXIF data from uploaded images, it breaks the user’s trust in the application and can result in reputational damage to the business. This impact is amplified by the speed of which an attacker is able to enumerate geolocation data of users on the platform.

**Steps to Reproduce**

1. Use a browser to navigate to: {{url}}
1. Download the user uploaded image
1. Use the following software/script to automatically extract the EXIF geolocation data for multiple users:

{{Software}}

**Proof of Concept (PoC)**

The following screenshot shows the EXIF Geolocation Data:

{{screenshot}}","The application should strip all metadata from images when they are uploaded to protect the privacy of its users.

It is recommended to encrypt sensitive data both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Exif Geolocation Data Not Stripped From Uploaded Images - Manual User Enumeration,"Exchangeable Image File Format (EXIF) data is a standard used to specify the format of metadata in photographs. Most EXIF data contains the make, model and type of camera used, the lens settings, as well as the geolocation data. This application does not remove the EXIF data when a user uploads photographs, which could be used by an attacker to find and collect the geolocation data of users. Additionally, software can be used to automatically extract the EXIF geolocation data from multiple uploaded images, which can be used to manually enumerate users.

**Business Impact**

When an application fails to remove the EXIF data from uploaded images, it breaks the user’s trust in the application and can result in reputational damage to the business. This impact is amplified as an attacker is able to manually enumerate geolocation data of users on the platform.

**Steps to Reproduce**

1. Use a browser to navigate to: {{url}}
1. Download the user uploaded image
1. Extract the EXIF geolocation data for multiple users

**Proof of Concept (PoC)**

The following screenshot shows the EXIF Geolocation Data:

{{screenshot}}","The application should strip all metadata from images when they are uploaded to protect the privacy of its users.

It is recommended to encrypt sensitive data both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Disclosure Of Known Public Information,"Sensitive data can be exposed when it is not behind an authorization barrier. When this information is exposed it can place the application at further risk of compromise. This can occur due to a variety of scenarios such as not encrypting data, secrets committed to GitHub within public repositories, or exposed internal assets.

Known public information is disclosed by this application which can be used by an attacker to build a profile of the business, the application, and its users for further attacks.

**Business Impact**

Disclosure of known public information can result in reputational damage for the business through an attacker’s ability to impact customers' trust through further attack methods, such as social engineering.

**Steps to Reproduce**

1. Use a browser to navigate to: {{url}}
1. Observe that publicly known information is being disclosed

**Proof of Concept (PoC)**

The screenshots below displays the publicly known information disclosed:

{{screenshot}}","It is recommended to restrict the amount of data available to the public, and review and monitor regularly the business' online footprint. The information being disclosed should be intentional and aligned with the desired level of privacy.

All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.",unclassified,
Sensitive Data Exposure - Sensitive Data Hardcoded,"Sensitive data can be exposed when it is not behind an authorization barrier. When this information is exposed it can place the application at further risk of compromise. This application has sensitive data that is hardcoded, such as API keys, credentials, or Personally Identifiable Information (PII). This hardcoded sensitive data can be used by an attacker to gain access to the application and escalate their privileges, which can lead to user account compromise and data exfiltration.

**Business Impact**

This vulnerability can lead to data exfiltration through the attacker’s ability to manipulate the application through their access to the hardcoded sensitive data. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Capture the request using the HTTP interception proxy
1. Observe the hardcoded sensitive data exposed in the request / source code:

{{screenshot}}

**Proof of Concept (PoC)**

The following screenshot shows the hardcoded sensitive data:

{{screenshot}}","It is recommended to not hardcode any sensitive data within the application. Sensitive data should be encrypted both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,"https://owasp.org/www-project-proactive-controls/v3/en/c8-protect-data-everywhere, https://cwe.mitre.org/data/definitions/798.html, https://wiki.sei.cmu.edu/confluence/display/java/MSC03-J.+Never+hard+code+sensitive+information"
Sensitive Data Exposure - Sensitive Data Hardcoded - Oauth Secret,"Sensitive data can be exposed when it is not behind an authorization barrier. When this information is exposed it can place the application at further risk of compromise. This application has hardcoded OAuth secrets which can be used by an attacker to escalate privileges within the application via OAuth workflows.

**Business Impact**

This vulnerability can lead to sensitive data through the attacker’s ability to manipulate the application through their access to the hardcoded file paths. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Capture the request using the HTTP interception proxy
1. Observe the hardcoded OAuth secret exposed in the request / source code:

{{screenshot}}

**Proof of Concept (PoC)**

The following screenshot shows the hardcoded OAuth secret:

{{screenshot}}","It is recommended to not hardcode any sensitive data, including OAuth secrets, within the application. Sensitive data should be encrypted both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,"https://owasp.org/www-project-proactive-controls/v3/en/c8-protect-data-everywhere, https://cwe.mitre.org/data/definitions/798.html, https://wiki.sei.cmu.edu/confluence/display/java/MSC03-J.+Never+hard+code+sensitive+information"
Sensitive Data Exposure - Sensitive Data Hardcoded - File Paths,"Sensitive data can be exposed when it is not behind an authorization barrier. When this information is exposed it can place the application at further risk of compromise. This application has hardcoded file paths which can be used by an attacker to request files from the underlying system via directory traversal and can lead to exposure of data such as file naming conventions, system admin users, and permissions on the system.

**Business Impact**

This vulnerability can lead to sensitive data through the attacker’s ability to manipulate the application through their access to the hardcoded file paths. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Capture the request using the HTTP interception proxy
1. Observe the hardcoded file path exposed in the request / source code:

{{screenshot}}

**Proof of Concept (PoC)**

The following screenshot shows the hardcoded file path:

{{screenshot}}","It is recommended to not hardcode any file paths within the application. Sensitive data should be encrypted both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,"https://owasp.org/www-project-proactive-controls/v3/en/c8-protect-data-everywhere, https://cwe.mitre.org/data/definitions/798.html, https://wiki.sei.cmu.edu/confluence/display/java/MSC03-J.+Never+hard+code+sensitive+information"
Sensitive Data Exposure - Non Sensitive Token In Url,"Sensitive data can be exposed when it is not behind an authorization barrier. When this information is exposed it can place the application at further risk of compromise. This application discloses a non-sensitive token in the URL which an attacker can use to build word lists for brute-forcing valid tokens across the application environment.

**Business Impact**

When an application discloses a non-sensitive token in the URL it leaves the application more susceptible to future attacks.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Observe the exposed token in the URL

**Proof of Concept (PoC)**

The following screenshot shows the non-sensitive token in the URL:

{{screenshot}}","It is best practice to transmit tokens via HTTP cookies, or via hidden field forms which are submitted by using the HTTP Post method.

All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws. Sensitive data should be encrypted both when at rest and when in transit.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Mixed Content,"Mixed content is when a page is loaded over a HTTPS connection but the application pulls content using a mix of HTTP and HTTPS, leaving the page susceptible to sniffing and Person-in-The-Middle (PiTM) attacks. This application discloses sensitive data via mixed content, enabling an attacker to collect sensitive metadata to escalate privileges or launch phishing campaigns on targeted users.

**Business Impact**

This vulnerability can lead to data theft through the attacker’s ability to manipulate data through their access to the application through a PiTM connection. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Login as a user and navigate to: {{URL}}
1. Use Developer Tools, Network tab to see that sensitive content is being served over HTTP:

{{screenshot}}

**Proof of Concept (PoC)**

The following screenshot shows the sensitive data served over HTTP:

{{screenshot}}","The application should prevent mixed content from loading and make HTTPS connections default. If the content cannot load over a HTTPS connection, the content should not be displayed.

It is recommended to encrypt sensitive data both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,"https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content, https://owasp.org/www-project-proactive-controls/v3/en/c8-protect-data-everywhere"
Sensitive Data Exposure - Via Localstorage Sessionstorage,"Local storage, also known as offline, web, or session storage, is the underlying storage mechanism which varies from one user agent to the next. This application discloses sensitive data in the local storage which is accessible by JavaScript. As a result, the sensitive data can be captured by an attacker using Cross-Site Scripting (XSS), allowing them to locally access the sensitive data and use it in further attacks.

**Business Impact**

This vulnerability can lead to data theft through the attacker’s ability to access and manipulate sensitive data through their access to the application's local session. These malicious actions can result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Using the HTTP interception proxy, forward the following request:

```HTTP
{{request}}
```

1. Observe the exposed sensitive data

**Proof of Concept (PoC)**

The following screenshot shows the sensitive data exposed via the local storage:

{{screenshot}}","The application should securely transmit sensitive tokens, such as session identifiers, and information related to users authentication or personal information. This can be achieved by transmitting the tokens via HTTP cookies, or via hidden field forms which are submitted by using the HTTP Post method.

It is recommended to encrypt sensitive data both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Via Localstorage Sessionstorage - Non Sensitive Token,"Local storage, also known as offline, web, or session storage, is the underlying storage mechanism which varies from one user agent to the next. This application discloses a non-sensitive token in the local storage which is accessible by JavaScript. As a result, the token can be captured by an attacker using Cross-Site Scripting (XSS) or Cross-Site Request Forgery (CSRF), allowing them to gather relevant user data and leverage this information to build phishing campaigns.

**Business Impact**

This vulnerability can lead to data theft through the attacker’s ability to access and manipulate sensitive data through their access to the application's local session. These malicious actions can result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Using the HTTP interception proxy, forward the following request:

```HTTP
{{request}}
```

1. Observe the exposed sensitive token

**Proof of Concept (PoC)**

The following screenshot shows the non-sensitive token exposed via the local storage:

{{screenshot}}","The application should securely transmit sensitive data, such as session identifiers, and information related to users authentication or personal information. This can be achieved by transmitting the tokens via HTTP cookies, or via hidden field forms which are submitted by using the HTTP Post method.

It is recommended to encrypt sensitive data both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Via Localstorage Sessionstorage - Sensitive Token,"Local storage, also known as offline, web, or session storage, is the underlying storage mechanism which varies from one user agent to the next. This application discloses a sensitive token in the local storage which is accessible by JavaScript. As a result, the sensitive token can be captured by an attacker using Cross-Site Scripting (XSS), allowing them to locally reset a legitimate user’s account password to one they control, successfully taking over the user’s account.

**Business Impact**

This vulnerability can lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Using the HTTP interception proxy, forward the following request:

```HTTP
{{request}}
```

1. Observe the exposed sensitive token

**Proof of Concept (PoC)**

The following screenshot shows the sensitive token exposed via the local storage:

{{screenshot}}","The application should securely transmit sensitive data, such as session identifiers, session tokens, and information related to users authentication or personal information. This can be achieved by transmitting the tokens via HTTP cookies, or via hidden field forms which are submitted by using the HTTP Post method.

It is recommended to encrypt sensitive data both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Sensitive Token In Url,"Sensitive data can be exposed when it is not behind an authorization barrier. When this information is exposed it can place the application at further risk of compromise. The application discloses a sensitive token in the URL, which, if captured by an attacker, can be used to gain access to the users account through this token, breaching the Confidentiality and Integrity of that account.

**Business Impact**

A sensitive token in the URL could lead to data manipulation through the attacker’s ability to manipulate the application through their access to the application. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Observe the exposed token in the URL

**Proof of Concept (PoC)**

The following screenshot shows the sensitive token in the URL:

{{screenshot}}","The application should transmit tokens via HTTP cookies, or via hidden field forms which are submitted by using the HTTP Post method.

It is recommended to encrypt sensitive data both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Sensitive Token In Url - In The Background,"Sensitive data can be exposed when it is not behind an authorization barrier. When this information is exposed it can place the application at further risk of compromise. The application discloses a sensitive token in the URL in background requests which are not seen in the main user interface. If captured by an attacker, these sensitive tokens can be used to escalate privileges or authorize API calls within the application.

**Business Impact**

Disclosure of a sensitive token in the URL in the background could lead to data manipulation through the attacker’s ability to manipulate the application through their access to the application. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Observe the exposed token in the URL of a background request

**Proof of Concept (PoC)**

The following screenshot shows the sensitive token:

{{screenshot}}","The application should transmit tokens via HTTP cookies, or via hidden field forms which are submitted by using the HTTP Post method.

It is recommended to encrypt sensitive data both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Sensitive Token In Url - On Password Reset,"Sensitive data can be exposed when it is not behind an authorization barrier. When this information is exposed it can place the application at further risk of compromise. The application discloses a sensitive token in the URL upon the password reset function which, if captured by an attacker, can be used to reset a legitimate user’s account password to one they control, successfully taking over the user’s account.

**Business Impact**

This vulnerability can lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Navigate to the password reset function
1. Observe the exposed token in the URL

**Proof of Concept (PoC)**

The following screenshot shows the sensitive token in the URL:

{{screenshot}}","The application should transmit tokens via HTTP cookies, or via hidden field forms which are submitted by using the HTTP Post method.

It is recommended to encrypt sensitive data both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Sensitive Token In Url - User Facing,"Sensitive data can be exposed when it is not behind an authorization barrier. When this information is exposed it can place the application at further risk of compromise. The application discloses a sensitive token in the URL that is user facing which can be captured by an attacker. This allows the attacker to gain access to a legitimate user’s account, breaching the Confidentiality and Integrity of their account.

**Business Impact**

This vulnerability can lead to data theft through the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users, including performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Login as a user and navigate to: {{URL}}
1. Observe the exposed token in the URL

**Proof of Concept (PoC)**

The following screenshot shows the sensitive token in the URL:

{{screenshot}}","The application should transmit tokens via HTTP cookies, or via hidden field forms which are submitted by using the HTTP Post method.

It is recommended to encrypt sensitive data both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Weak Password Reset Implementation,"When the password reset implementation is weak, the strength of the overall authentication process for the application is diminished. Tokens sent over HTTP, predictable reset tokens, and long expiry times create weak conditions for the password reset implementation. This application’s weak password reset implementation allows an attacker to abuse the password reset token and reset a user’s password, locking the user out of their account and achieving full account takeover.

**Business Impact**

Weak password reset implementation could lead to data theft from the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users. This includes them performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login to a valid account and navigate to: {{URL}}
1. Click on the reset link
1. Capture the request using the HTTP interception proxy
1. Observe the weakness in the password reset implementation

**Proof of Concept (PoC)**

The following screenshot shows the weak password reset implementation:

{{screenshot}}","Password reset tokens should be sufficiently long, random, have a short expiry time, and invalidated after first use.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html, https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#change-password-feature, https://cwe.mitre.org/data/definitions/640.html, https://cwe.mitre.org/data/definitions/620.html"
Sensitive Data Exposure - Weak Password Reset Implementation - Password Reset Token Sent Over Http,"When the password reset implementation is weak, the strength of the overall authentication process for the application is diminished. Tokens sent over HTTP, predictable reset tokens, and long expiry times create weak conditions for the password reset implementation.

This application transmits the password reset token over an insecure HTTP connection, rather than HTTPS. An attacker could intercept this token and reset a user’s password, locking the user out of their account and achieving full account takeover.

**Business Impact**

Weak password reset implementation could lead to data theft from the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users. This includes them performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login to a valid account and navigate to: {{URL}}
1. Click on the reset link
1. Capture the request using the HTTP interception proxy
1. Observe that the password reset token is being sent over HTTP

**Proof of Concept (PoC)**

The screenshot below displays the password reset token being sent over HTTP:

{{screenshot}}","Password reset tokens should be transmitted over a HTTPS connection. They should also be sufficiently long, random, have a short expiry time, and invalidated after first use.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html, https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#change-password-feature, https://cwe.mitre.org/data/definitions/640.html, https://cwe.mitre.org/data/definitions/620.html"
Sensitive Data Exposure - Weak Password Reset Implementation - Token Leakage Via Host Header Poisoning,"When the password reset implementation is weak, the strength of the overall authentication process for the application is diminished. `Host` header poisoning occurs when the `Host` header is manipulated in a HTTP request to point to a domain an attacker controls. From here, when the user clicks on the password reset link sent to their email, the attacker can capture the the token and reset a user’s password, locking the user out of their account and achieving full account takeover.

**Business Impact**

Weak password reset implementation could lead to data theft from the attacker’s ability to manipulate data through their access to the application, and their ability to interact with other users. This includes them performing other malicious attacks, which would appear to originate from a legitimate user. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Click on the reset link
1. Capture the request using the HTTP interception proxy
1. Manipulate the `Host` header to point to a domain you control
1. From the user’s email account, click the password reset link
1. Observer that an attacker can capture the password reset token

**Proof of Concept (PoC)**

The screenshot below displays the weak password reset implementation:

{{screenshot}}","Ensure that the password reset link generation is sent to a known server name rather than `HTTP_HOST`. For example:

```javascript
$_SERVER['SERVER_NAME'] 
```

should be used instead of:

```javascript
$_SERVER['HTTP_HOST']
```

Password reset tokens should be transmitted over a HTTPS connection. They should also be sufficiently long, random, have a short expiry time, and invalidated after first use.",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html, https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#change-password-feature, https://cwe.mitre.org/data/definitions/640.html, https://cwe.mitre.org/data/definitions/620.html"
Sensitive Data Exposure - Json Hijacking,"Sensitive data can be exposed when it is not behind an authorization barrier. When this information is exposed it can place the application at further risk of compromise. JSON Hijacking allows a malicious attacker to exfiltrate sensitive data using Cross Site Request Forgery (CSRF) and overriding the Object prototype by using `__defineSetter__`.

This application is susceptible to JSON hijacking which enables an attacker to retrieve sensitive data by tricking a user to click on a crafted link. Once a user clicks on the link, data from the user’s account is read and passed to the attacker. This allows an attacker to collect Personally Identifiable Information (PII) and sensitive metadata to escalate privileges or launch phishing campaigns on targeted users.

**Business Impact**

Sensitive data disclosure through JSON hijacking can result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Host the following payload on the attacker server:

{{payload}}

1. Make a request on behalf of the user to the attacker served file:

{{screenshot}}

1. Observe that the user requested data from the vulnerable endpoint and the response is in JSON
1. On the attacker hosted server, look at the logs to see that the JSON was successfully exfiltrated:

{{screenshot}}

**Proof of Concept (PoC)**

The following screenshot shows the sensitive data disclosed:

{{screenshot}}","To prevent JSON hijacking from occurring, the following configurations can be set:

- Sanitize all data inputs both server and client-side.
- Enable CSRF protections by requiring a predefined, random value for all JSON requests
- Only return JSON objects through HTTP POST requests, as script tags will only generate through HTTP GET requests
- Do not let web browsers interpret JSON objects as valid JavaScript code",unclassified,
Sensitive Data Exposure - Xssi,"Cross-Site Script Inclusion (XSSI) is a client-side attack that uses JavaScript within an authenticated session to leak sensitive data. This sensitive data could be authentication related or user related sensitive data. XSSI can be found on this domain which allows an attacker to control code that is executed within a user’s authenticated session.
  
**Business Impact**

XSSI could lead to data theft and exfiltration through the attacker’s ability to manipulate data. These malicious actions could also result in reputational damage for the business through the impact to customers’ trust.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Log into an account and navigate to URL which contains the payload
1. Observe the JavaScript payload being executed

**Proof of Concept (PoC)**

Below is a screenshot demonstrating the injected JavaScript executing:

{{screenshot}}","There is no single technique to stop XSS from occurring. However, implementing the right combination of defensive measures within the application will prevent and limit the impact of XSS. Some best practices include the following:

All user input fields should be sanitized based on what the field is likely to contain. For example, a date field (01/01/2001) should only contain a maximum of 10 characters consisting of numbers and forward slashes. Additionally, drop down or pick lists can be used for allowable inputs to ensure expected values are sent to the server.
Use appropriate HTTP response headers to ensure the browser correctly interprets responses. These should be customized specific to the application and its environment. For example:

``` HTTP
X-Content-Type-Options: nosniff
Content-Security-Policy: default-src ‘self’; script-src ‘self’
```",unclassified,"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, https://owasp.org/www-community/attacks/xss/"
Sensitive Data Exposure - Password Reset Token,"The `Referer` HTTP request header is used to show the URL of the page a user requested the resource from. This application’s `Referer` headers leak valid user password reset tokens over an untrusted third-party link. This token can be intercepted by a local attacker performing a Person-in-The-Middle (PiTM) attack, or by an attacker exploiting third-party vendors. With access to the exposed password reset token in the `Referer` HTTP header, the attacker could escalate privileges and execute API calls on behalf of a user in the application.

**Business Impact**

Token Leakage via `Referer` header can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application, providing that they can capture the password reset token and use it to escalate privileges and execute API calls. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the privileges of the account the attacker gains access to.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Click on the link to the third-party website
1. Capture the request using the HTTP interception proxy
1. Observe the password token in the `Referer` header

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","The application should transmit sensitive tokens via a HTTPS connection using HTTP cookies, or via hidden field forms which are submitted by using the HTTP Post method.

If using the `Referer` header, set a `Referrer-Policy` header and set the directives as appropriate to the information displayed. For example, on sensitive pages such as the password reset page the `Referrer-Policy` header can be set as follows:

`Referrer-Policy: no-referrer`",unclassified,"https://infosec.mozilla.org/guidelines/web_security.html#referrer-policy, https://owasp.org/www-project-proactive-controls/v3/en/c8-protect-data-everywhere, https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer"
Sensitive Data Exposure - Disclosure Of Secrets,"Disclosure of secrets occurs when sensitive data is not behind an authorization barrier. When this information is exposed it can place sensitive data, such as secrets, at risk. This can occur due to a variety of scenarios such as not encrypting data, secrets committed to GitHub within public repositories, or exposed internal assets.

Examples of secret data include, but are not limited to, vendor details, client information, Personally Identifiable Information (PII), Social Security Numbers, medical data, banking information, and credentials or authentication keys. Disclosure of secrets could be used by an attacker to sell access to databases and database content, or use credentials identified to take over accounts, amongst other attack vectors.

**Business Impact**

Disclosure of secrets can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Use a browser to navigate to: {{url}}/data/
1. Observe that secrets are being disclosed

**Proof of Concept (PoC)**

The screenshots below displays the secrets disclosed:

{{screenshot}}","It is recommended to encrypt sensitive data, including secrets, both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data including secrets should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Disclosure Of Secrets - For Publicly Accessible Asset,"Disclosure of secrets for a publicly available asset occurs when sensitive data is not behind an authorization barrier. When this information is exposed it can place sensitive data, such as secrets, at risk. This can occur due to a variety of scenarios such as not encrypting data, secrets committed to GitHub within public repositories, or exposed external assets. Disclosure of secrets for publicly available assets could be leveraged by an attacker to gain privileged access to the application or the environment where the application is hosted. From here, an attacker could execute functions under the guise of an Administrator user, depending on the permissions level they are able to access.

**Business Impact**

Disclosure of secrets for a publicly available asset can lead to indirect financial loss due to an attacker accessing, deleting, or modifying data from within the application. Reputational damage for the business can also occur via the impact to customers’ trust that these events create. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Use a browser to navigate to: {{url}}/data/
1. Observe that secrets are being disclosed

1. Use a browser to navigate to: {{URL}}/data-disclosed/
1. Crawl open source databases and publicly accessible data for secrets
1. Observe that the following endpoint reveals secret data:

{{screenshot}}

**Proof of Concept (PoC)**

The exposed secrets for this publicly accessible asset can be seen in the screenshot below:

{{screenshot}}","It is recommended to encrypt sensitive data, including secrets, both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data including secrets should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Disclosure Of Secrets - For Internal Asset,"Disclosure of secrets for internal assets occurs when sensitive data for the internal assets is not behind an authorization barrier. When this information is exposed it can place sensitive data, such as secrets, at risk. This can occur due to a variety of scenarios such as not encrypting data, secrets committed to GitHub within public repositories, or exposed internal assets.

Disclosure of secrets for this internal asset could be leveraged by an attacker to access the internal application or the environment where the application is hosted.

**Business Impact**

Disclosure of secrets for internal assets can lead to indirect financial loss due to an attacker accessing, deleting, or modifying data from within the application. This could happen through an insider threat, existing data breaches, or a malicious internal attacker escalating their privileges. Reputational damage for the business can also occur via the impact to customers’ trust that these events create. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Setup a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{url}}/data/
1. Intercept the response with the HTTP interception proxy
1. Observe the disclosure of sensitive data in the response, as seen below:

{{screenshot}}

**Proof of Concept (PoC)**

The screenshots below show the full exploit:

{{screenshot}}","It is recommended to encrypt sensitive data, including secrets, both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data including secrets should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Disclosure Of Secrets - Data Traffic Spam,"Disclosure of secrets occurs when the data is not properly secured, allowing sensitive data, such as secrets, API keys, or other data critical to business operation to be exposed. This application discloses data within data traffic spam which can enable an attacker to use secrets for privilege escalation within the application, or to send API requests on behalf of the user.

**Business Impact**

Disclosure of secrets can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1 Generate data traffic by forwarding the following request multiple times to the endpoint:

```HTTP
{{request}}
```

1. Observe the disclosure of sensitive data in the HTTP interception proxy

**Proof of Concept (PoC)**

The screenshot below displays the secrets disclosed:

{{screenshot}}","It is recommended to implement robust spam filtering and email authentication mechanisms such as SPF (Sender Policy Framework), DKIM (DomainKeys Identified Mail), and DMARC (Domain-based Message Authentication, Reporting, and Conformance). Sensitive data should be encrypted both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data including secrets should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Disclosure Of Secrets - Non Corporate User,"Disclosure of secrets occurs when the data is not properly secured. When secrets are exposed it can place the application at further risk of compromise. This application discloses secrets for a non-corporate user which can be leveraged by an attacker to access the application and make requests on the legitimate user’s behalf.

**Business Impact**

Disclosure of secrets can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application via the access gained using the non-corporate user account. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Observe the following secret for a non-corporate user was revealed:

{{value}}

**Proof of Concept (PoC)**

The screenshots below displays the secrets disclosed:

{{screenshot}}","It is recommended to encrypt secrets belonging to non-corporate users both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data including secrets should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Disclosure Of Secrets - Intentionally Public Sample Or Invalid,"Disclosure of critically sensitive data occurs when the data is not properly secured, allowing critically sensitive data, such as secrets, API keys, or other data critical to business operation to be exposed. This application discloses an invalid, or intentionally public sample, of secrets that are used for the application. While seemingly harmless, an attacker can use these examples to build wordlists, which can be used to bruteforce requests to the application until a valid secret is processed successfully.

**Business Impact**

Disclosure of secrets can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application via the access gained using the non-corporate user account. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Observe the following invalid/Intentionally public secret was revealed:

{{value}}

**Proof of Concept (PoC)**

The screenshots below displays the secrets disclosed:

{{screenshot}}","It is recommended to evaluate the sensitivity of secrets and ensure that appropriate access controls are in place. Even if secrets are intentionally public, are invalid, or are a only a sample, it is important to regularly review access controls.

All sensitive data, including secrets, should be encrypted both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data including secrets should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Disclosure Of Secrets - Pii Leakage Exposure,"Personally Identifiable Information (PII) exposure can occur when sensitive data is not encrypted, or behind an authorization barrier. When PII is exposed it can place sensitive data, such as secrets, at risk. This can occur due to a variety of scenarios such as not encrypting data, SSL not being used for authenticated pages, or passwords being stored using unsalted hashes. Examples of such data include, but are not limited to: Social Security Numbers (SSN), medical data, banking information, and login credentials.

Sensitive data relating to the business was exposed. This data could be exfiltrated and used by an attacker to sell access to databases and database content, or use credentials identified to take over accounts, amongst other attack vectors.

**Business Impact**

Leakage or exposure of PII can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Use a browser to navigate to: {{url}}/data/
1. Observe that secrets are being disclosed

**Proof of Concept (PoC)**

The screenshots below displays the PII disclosed:

{{screenshot}}","It is recommended to encrypt sensitive data, including PII, both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data including secrets should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Disclosure Of Secrets - Pay Per Use Abuse,"Disclosure of secrets occurs when the data is not properly secured, allowing sensitive data, such as secrets, API keys, or other data critical to business operation to be exposed. This application discloses sensitive data that could be used by an attacker to make repeated API requests on a user’s behalf without their knowledge. Additionally, if an attacker is able to chain this vulnerability with another, they could use their access to the API to escalate privileges on the application and its hosted environment.

**Business Impact**

Disclosure of secrets can lead to direct financial loss through an attacker making repeated requests to the API which are generally pay-per-use.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Observe that the following secret for the API is exposed:

{{screenshot}}

1 Send the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe the HTTP 200 OK success status response code

**Proof of Concept (PoC)**

The screenshot below displays the secrets disclosed:

{{screenshot}}","It is recommended to encrypt sensitive data, including secrets, both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data including secrets should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Internal Ip Disclosure,"Sensitive data can be exposed when it is not behind an authorization barrier. When this information is exposed it can place the application at further risk of compromise. This application discloses an internal IP address which an attacker could use to gather information, and carry out network-layer attacks, on the underlying system.

**Business Impact**

When an application fails to mask internal IP addresses it leaves the internal network more susceptible to future network based attacks.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. In the HTTP interception proxy, observe the disclosed internal IP address

**Proof of Concept (PoC)**

The following screenshot shows the disclosed internal IP address:

{{screenshot}}","It is recommended to mask all internal IP addresses to reduce the attack surface of the application.

Sensitive data both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Visible Detailed Error Page,"Visible detailed error pages are a result of improper error handling which introduces a variety of security problems for a website. Detailed internal error messages, such as error codes, stack traces and database dumps, can be displayed publicly, leaking implementation information. The detailed error pages leaked by this application can be collected by an attacker and combined with other attack vectors to increase the severity and impact of malicious attacks on the application.

**Business Impact**

This vulnerability can impact customers’ trust in the application which can result in reputational damage for the business and indirect financial losses.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Observe detailed error message

**Proof of Concept (PoC)**

The following screenshot shows the data disclosed in the detailed error message:

{{screenshot}}","It is best practice to create a policy around what occurs when an error is made in the application, detailing what information is sent to the user and what information is logged. This policy should be circulated across all development teams so that their code adheres to the policy.

When an error occurs the site should respond with a generic error message to the user that does not display internal details about the error or the underlying system.",unclassified,"https://owasp.org/www-community/Improper_Error_Handling, https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html, https://cwe.mitre.org/data/definitions/209.html"
Sensitive Data Exposure - Visible Detailed Error Page - Descriptive Stack Trace,"Visible detailed error pages are a result of improper error handling which introduces a variety of security problems for a website. Detailed internal error messages, such as error codes, stack traces and database dumps, can be displayed publicly, leaking implementation information.

The descriptive stack trace leaked by this application shows versions of software and implementation data. An attacker can collect this data and combine it with other attack vectors to increase the severity and impact of malicious attacks on the application or exploit specific versions of software that have known vulnerabilities.

**Business Impact**

This vulnerability can impact customers’ trust in the application which can result in reputational damage for the business and indirect financial losses.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Observe detailed error message showing a descriptive stack trace

**Proof of Concept (PoC)**

The following screenshot shows the data disclosed in the descriptive stack trace:

{{screenshot}}","It is best practice to create a policy around what occurs when an error is made in the application, detailing what information is sent to the user and what information is logged. This policy should be circulated across all development teams so that their code adheres to the policy.

When an error occurs the site should respond with a generic error message to the user that does not display internal details about the error or the underlying system.",unclassified,"https://owasp.org/www-community/Improper_Error_Handling, https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html, https://cwe.mitre.org/data/definitions/209.html"
Sensitive Data Exposure - Visible Detailed Error Page - Detailed Server Configuration,"Visible detailed error pages are a result of improper error handling which introduces a variety of security problems for a website. Detailed internal error messages, such as error codes, stack traces and database dumps, can be displayed publicly, leaking implementation information.

The detailed server configuration leaked by this application shows which versions of software are running, physical paths, environmental variables, and the software configuration settings. An attacker can collect this data and combine it with other attack vectors to increase the severity and impact of malicious attacks on the application or exploit specific versions of software that have known vulnerabilities.

**Business Impact**

This vulnerability can impact customers’ trust in the application which can result in reputational damage for the business and indirect financial losses.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Observe detailed error message showing detailed server configuration

**Proof of Concept (PoC)**

The following screenshot shows the data disclosed in the detailed server configuration:

{{screenshot}}","It is best practice to create a policy around what occurs when an error is made in the application, detailing what information is sent to the user and what information is logged. This policy should be circulated across all development teams so that their code adheres to the policy.

When an error occurs the site should respond with a generic error message to the user that does not display internal details about the error or the underlying system.",unclassified,"https://owasp.org/www-community/Improper_Error_Handling, https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html, https://cwe.mitre.org/data/definitions/209.html"
Sensitive Data Exposure - Visible Detailed Error Page - Full Path Disclosure,"Visible detailed error pages are a result of improper error handling which introduces a variety of security problems for a website. Detailed internal error messages, such as error codes, stack traces and database dumps, can be displayed publicly, leaking implementation information.

The full path disclosure leaked by this application displays implementation information which should not be publicly available. An attacker can collect this data and combine it with other attack vectors to increase the severity and impact of malicious attacks on the application and access the paths displayed.

**Business Impact**

This vulnerability can impact customers’ trust in the application which can result in reputational damage for the business and indirect financial losses.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Observe detailed error message showing the full path disclosure

**Proof of Concept (PoC)**

The following screenshot shows the data disclosed in the full path disclosure:

{{screenshot}}","When an error occurs, the site should respond with a generic error message to the user that does not display internal details about the error, or the underlying system. It is recommended to create and implement a policy around what occurs when an error is made in the application. This should detail what information is sent to the user and what information is logged and be circulated across all development teams so that their code adheres to the policy.",unclassified,"https://owasp.org/www-community/Improper_Error_Handling, https://cheatsheetseries.owasp.org/cheatsheets/Error_Handling_Cheat_Sheet.html, https://cwe.mitre.org/data/definitions/209.html"
Sensitive Data Exposure - Critically Sensitive Data,"Disclosure of critically sensitive data occurs when the data is not properly secured, allowing critically sensitive data, such as secrets, API keys, or other data critical to business operation to be exposed. This data exposure can be described as critically sensitive as its exposure would likely cause a high priority incident.

**Business Impact**

Critically sensitive data exposure can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application. If a private API key is accessed and is pay-per-use, this could lead to a direct financial cost to the business if an attacker were to repeatedly request resources from the API.

This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application and the API.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Observe and copy the critical sensitive data that is exposed
1. Using the HTTP interception proxy, forward the following request:

```HTTP
{{request}}
```

1. Verify that the critical sensitive data is valid and allows access to other data or functionality

**Proof of Concept (PoC)**

The screenshots below displays the password disclosed:

{{screenshot}}","It is recommended to encrypt sensitive data, including secrets, both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data including secrets should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Critically Sensitive Data - Password Disclosure,"Disclosure of critically sensitive data occurs when the data is not properly secured, allowing critically sensitive data, such as secrets, API keys, or other data critical to business operation to be exposed. This application discloses the password of a user’s account which an attacker could use to take over the account and access, delete, or modify data from within the application.

**Business Impact**

Disclosure of secrets can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Observe and copy the password value that is exposed
1. Using the HTTP interception proxy, forward the following request:

```HTTP
{{request}}
```

1. Verify that the password is valid and allows authenticated actions to be performed in the user’s account

**Proof of Concept (PoC)**

The screenshots below displays the password disclosed:

{{screenshot}}","It is recommended to encrypt sensitive data, including secrets, both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data including secrets should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Critically Sensitive Data - Private Api Keys,"Disclosure of critically sensitive data occurs when the data is not properly secured, allowing critically sensitive data, such as secrets, API keys, or other data critical to business operation to be exposed. This application discloses private API keys which an attacker could use to abuse the API access and retrieve, delete, or modify data using the API functionality.

**Business Impact**

Critically sensitive data exposure can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application. If the API is pay-per-use, this could lead to a direct financial cost to the business if an attacker were to repeatedly request resources from the API.

This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application and the API.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Observe and copy the private API key that is exposed
1. Using the HTTP interception proxy, forward the following request:

```HTTP
{{request}}
```

1. Verify that the API key is valid and allows access to sensitive data

**Proof of Concept (PoC)**

The screenshots below displays the API key disclosed:

{{screenshot}}","It is recommended to encrypt sensitive data, including secrets, both when at rest and when in transit. All data that is processed, stored, and transmitted by the application should be classified by business need, regulatory and industry requirements, and appropriate privacy laws.

Additionally, it is best practice to not store sensitive data when it is no longer required, as data that is not retained cannot be accessed and used maliciously. All sensitive data including secrets should therefore be a part of a regularly reviewed maintenance cycle. This review cycle should include rotation of secrets.",unclassified,
Sensitive Data Exposure - Token Leakage Via Referer,"The `Referer` HTTP request header is used to show the URL of the page a user requested the resource from. This application’s `Referer` headers leak valid user tokens which can be intercepted by an attacker performing a Person-in-The-Middle (PiTM) attack, or by exploiting third-party vendors. With access to the exposed token in the `Referer` HTTP header, the attacker could escalate privileges and execute API calls on behalf of a user in the application.

**Business Impact**

Token Leakage via `Referer` header can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application, providing that they can escalate privileges and execute API calls. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the privileges of the account the attacker gains access to.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Capture the request using the HTTP interception proxy
1. Observe the token in `Referer` header

**Proof of Concept (PoC)**

The following screenshot shows the token exposed within the `Referer` HTTP request header:

{{screenshot}}","The application should transmit sensitive tokens via HTTP cookies, or via hidden field forms which are submitted by using the HTTP Post method.

If using the `Referer` header, set a `Referrer-Policy` header and set the directives as appropriate to the information displayed. For example, on sensitive pages such as the password reset page the `Referrer-Policy` header can be set as follows:

`Referrer-Policy: no-referrer`",unclassified,"https://infosec.mozilla.org/guidelines/web_security.html#referrer-policy, https://owasp.org/www-project-proactive-controls/v3/en/c8-protect-data-everywhere, https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer"
Sensitive Data Exposure - Token Leakage Via Referer - Untrusted Third Party,"The `Referer` HTTP request header is used to show the URL of the page a user requested the resource from. This application’s `Referer` headers leak valid user tokens over an untrusted third-party link. This token can be intercepted by a local attacker performing a Person-in-The-Middle (PiTM) attack, or by an attacker exploiting third-party vendors. With access to the exposed token in the `Referer` HTTP header, the attacker could escalate privileges and execute API calls on behalf of a user in the application.

**Business Impact**

Token Leakage via `Referer` header can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application, providing that they can escalate privileges and execute API calls. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the privileges of the account the attacker gains access to.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Click on the link to the third-party website
1. Capture the request using the HTTP interception proxy
1. Observe the token in `Referer` header and that theconnection is over HTTP

**Proof of Concept (PoC)**

The following screenshot shows the token exposed within the `Referer` HTTP request header over a HTTP connection:

{{screenshot}}","The application should transmit sensitive tokens via a HTTPS connection using HTTP cookies, or via hidden field forms which are submitted by using the HTTP Post method.

If using the `Referer` header, set a `Referrer-Policy` header and set the directives as appropriate to the information displayed. For example, on sensitive pages such as the password reset page the `Referrer-Policy` header can be set as follows:

`Referrer-Policy: no-referrer`",unclassified,"https://infosec.mozilla.org/guidelines/web_security.html#referrer-policy, https://owasp.org/www-project-proactive-controls/v3/en/c8-protect-data-everywhere, https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer"
Sensitive Data Exposure - Token Leakage Via Referer - Trusted Third Party,"The `Referer` HTTP request header is used to show the URL of the page a user requested the resource from. This application’s `Referer` headers leak valid user tokens to a trusted third-party. This token can be intercepted by a local attacker performing a Person-in-The-Middle (PiTM) attack, or by an attacker exploiting third-party vendors. With access to the exposed token in the `Referer` HTTP header, the attacker could escalate privileges and execute API calls on behalf of a user in the application.

**Business Impact**

Token Leakage via `Referer` header can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application, providing that they can escalate privileges and execute API calls. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the privileges of the account the attacker gains access to.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Click on the link to the third-party website
1. Capture the request using the HTTP interception proxy
1. Observe the token is in `Referer` header and that the connection is over HTTP

**Proof of Concept (PoC)**

The following screenshot shows the token exposed within the `Referer` HTTP request header over a HTTP connection:

{{screenshot}}

Here is a list of the untrusted 3rd party hosts that receive the token:

-","It is recommended to configure the application to transmit valid third-party tokens via HTTP cookies, or via hidden field forms which are submitted by using the HTTP Post method.

If using the `Referer` header, set a `Referrer-Policy` header and set the directives as appropriate to the information displayed. For example, on sensitive pages such as the password reset page the `Referrer-Policy` header can be set as follows:

`Referrer-Policy: no-referrer`",unclassified,"https://infosec.mozilla.org/guidelines/web_security.html#referrer-policy, https://owasp.org/www-project-proactive-controls/v3/en/c8-protect-data-everywhere, https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer"
Sensitive Data Exposure - Token Leakage Via Referer - Over Http,"The `Referer` HTTP request header is used to show the URL of the page a user requested the resource from. This application’s `Referer` headers leak valid user tokens that are transmitted over an unencrypted HTTP connection. This connection can be intercepted by a local attacker performing a Person-in-The-Middle (PiTM) attack, or by an attacker exploiting third-party vendors. With access to the exposed token in the `Referer` HTTP header, the attacker could escalate privileges and execute API calls on behalf of a user in the application.

**Business Impact**

Token Leakage via `Referer` header can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application, providing that they can escalate privileges and execute API calls. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the privileges of the account the attacker gains access to.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Capture the request using the HTTP interception proxy
1. Observe the token in `Referer` header and that the connection is over HTTP

**Proof of Concept (PoC)**

The following screenshot shows the token exposed within the `Referer` HTTP request header over a HTTP connection:

{{screenshot}}","The application should transmit sensitive tokens via a HTTPS connection using HTTP cookies, or via hidden field forms which are submitted by using the HTTP Post method.

If using the `Referer` header, set a `Referrer-Policy` header and set the directives as appropriate to the information displayed. For example, on sensitive pages such as the password reset page the `Referrer-Policy` header can be set as follows:

`Referrer-Policy: no-referrer`",unclassified,"https://infosec.mozilla.org/guidelines/web_security.html#referrer-policy, https://owasp.org/www-project-proactive-controls/v3/en/c8-protect-data-everywhere, https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer"
Sensitive Data Exposure - Token Leakage Via Referer - Password Reset Token,"The `Referer` HTTP request header is used to show the URL of the page a user requested the resource from. This application’s `Referer` header leaks valid password reset tokens which can be intercepted by an attacker performing a Person-in-The-Middle (PiTM) attack, or by exploiting third-party vendors. With access to the exposed token in the `Referer` HTTP header, the attacker could reset the password on behalf of a user in the application.

**Business Impact**

Token Leakage via `Referer` header can lead to indirect financial loss through an attacker accessing, deleting, or modifying data from within the application, providing that they can escalate privileges and execute API calls. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact is dependent on the sensitivity of the data being stored in, and transmitted by the application, as well as the privileges of the account the attacker gains access to.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to login and navigate to: {{URL}}
1. Capture the request using the HTTP interception proxy
1. Observe the token in `Referer` header

**Proof of Concept (PoC)**

The following screenshot shows the token exposed within the `Referer` HTTP request header:

{{screenshot}}","The application should transmit sensitive tokens via HTTP cookies, or via hidden field forms which are submitted by using the HTTP Post method.

If using the `Referer` header, set a `Referrer-Policy` header and set the directives as appropriate to the information displayed. For example, on sensitive pages such as the password reset page the `Referrer-Policy` header can be set as follows:

`Referrer-Policy: no-referrer`",unclassified,"https://infosec.mozilla.org/guidelines/web_security.html#referrer-policy, https://owasp.org/www-project-proactive-controls/v3/en/c8-protect-data-everywhere, https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer"
Network Security Misconfiguration,"Network security misconfigurations can occur in network devices, services, or infrastructure and expose the organization to security risks. This vulnerability was identified due to default settings, inadequate access controls, or improper firewall rules. Due to this, an attacker can perform further attacks on the application, the business, or its users.
  
**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Issue the following command line in the terminal window: {{command}}
1. Observe that the network security is bypassed and a connection is successfully established between the client computer and the application

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","Disable the user of telnet for the application’s connection to the server. Instead, SSH can be used.",unclassified,
Network Security Misconfiguration - Telnet Enabled,"When telnet is enabled, all data sent over the connection is unsecured as telnet transmits all data via plain text. An attacker could perform a Person-in-the-Middle (PitM) attack and access sensitive data being transmitted via the telnet connection. With access to sensitive data through a PitM attack they could perform further attacks on the application, the business, or its users.
  
**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust.

**Steps to Reproduce**

1. Issue the following command line in the terminal window: `telnet {{application}}`
1. Observe that a telnet connection is successfully established between the client computer and the application

**Proof of Concept (PoC)**

Below is a screenshot demonstrating that a successful telnet connection can be made:

{{screenshot}}","It is recommended to disable the use of telnet for the application’s connection to the server. Instead, SSH can be used, which provides a more secure and encrypted communication channel.",unclassified,
Developer Biases,"Developer biases occurs when AI model developers' perspectives, assumptions, and decisions influence the behaviour and design of an the model. Biases stem from developer's background and experiences, and subconscious prejudices. Outputs from AI models that have a developer bias can result in skewed or otherwise unfair outcomes.

**Business Impact**

Implicit bias in this AI model can result in unintended discrimination and unfairness which can lead to reputational damage and a loss of customer trust in the output of the model.

**Steps to Reproduce**

1. Provide the AI model with data containing subtle, implicit biases.
1. Observe the model's decisions and identify instances where it unintentionally favors certain groups or viewpoints.

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","Establish practices and policies that ensure responsible data collection and training. This can include:

- Conducting a comprehensive review of the training data to find and remediate biases. This includes re-sampling underrepresented groups and adjusting the model parameters to promote fairness.
- Business processes that index ethical frameworks, best practices, and concerns should be developed, monitored, and evaluated.
- Clearly define the desired outcomes of the AI model, then frame the key variables to capture.
- Ensuring that the data collected and used to train the AI model illustrates the environment that it will be deployed in and contains diverse and representative data.
- Design and develop algorithms that are sensitive to fairness considerations, and audit these regularly.
- Practice data collection principles that do not disadvantage specific groups.
- Document the development of the AI model, including all datasets, variables identified, and decisions made throughout the development cycle.",unclassified,
Developer Biases - Implicit Bias,"Implicit bias occurs when there are biases present within the training data of an AI model that affects its decision-making. These implicit biases are usually introduced into the AI model via the developers who affect the design, implementation, and deployment of the AI system.

**Business Impact**

Implicit bias in this AI model can result in unintended discrimination and unfairness which can lead to reputational damage and a loss of customer trust in the output of the model.

**Steps to Reproduce**

1. Provide the AI model with data containing subtle, implicit biases.
1. Observe the model's decisions and identify instances where it unintentionally favors certain groups or viewpoints.

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","Establish practices and policies that ensure responsible data collection and training. This can include:

- Conducting a comprehensive review of the training data to find and remediate biases. This includes re-sampling underrepresented groups and adjusting the model parameters to promote fairness.
- Business processes that index ethical frameworks, best practices, and concerns should be developed, monitored, and evaluated.
- Clearly define the desired outcomes of the AI model, then frame the key variables to capture.
- Ensuring that the data collected and used to train the AI model illustrates the environment that it will be deployed in and contains diverse and representative data.
- Design and develop algorithms that are sensitive to fairness considerations, and audit these regularly.
- Practice data collection principles that do not disadvantage specific groups.
- Document the development of the AI model, including all datasets, variables identified, and decisions made throughout the development cycle.",unclassified,
Misinterpretation Biases,"Misinterpretation biases can occur when AI models incorrectly interpret the context or data, leading the model to make inaccurate decisions or predictions. These misinterpretation biases can stem from inadequate training data, or limitations in the model's design, resulting in outputs that to do not align with the context of the inputs.

**Business Impact**

Misinterpretation biases in this AI model can result in reputational damage and indirect monetary loss due to the loss of customer trust in the output of the model.

**Steps to Reproduce**

1. Present the AI model with scenarios where it needs to consider broader context.
1. Observe the model's decisions and its inability to account for the context in its choices.

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","Establish practices and policies that ensure responsible data collection and training. This can include:

- Conducting a comprehensive review of the training data to find and remediate biases. This includes re-sampling underrepresented groups and adjusting the model parameters to promote fairness.
- Business processes that index ethical frameworks, best practices, and concerns should be developed, monitored, and evaluated.
- Clearly define the desired outcomes of the AI model, then frame the key variables to capture.
- Ensuring that the data collected and used to train the AI model illustrates the environment that it will be deployed in and contains diverse and representative data.
- Design and develop algorithms that are sensitive to fairness considerations, and audit these regularly.
- Practice data collection principles that do not disadvantage specific groups.
- Document the development of the AI model, including all datasets, variables identified, and decisions made throughout the development cycle.",unclassified,
Misinterpretation Biases - Context Ignorance,"Context ignorance occurs when AI models do not consider the broader context when making decisions, leading to uninformed or unfair decision making. This can be a result of the AI model's design or the training data it has been trained on. Outputs from AI models that have context ignorance can result in discrimination, reinforcement of stereotypes, or viewpoints that disadvantage certain groups.

**Business Impact**

Context ignorance in this AI model can result in a lack of fairness and objectivity which can lead to reputational damage and a loss of customer trust in the output of the model. Additionally, business decisions that rely on this AI model are also affected due to suboptimal outcomes and missed opportunities.

**Steps to Reproduce**

1. Present the AI model with scenarios where it needs to consider broader context.
1. Observe the model's decisions and its inability to account for the context in its choices.

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","Establish practices and policies that ensure responsible data collection and training. This can include:

- Conducting a comprehensive review of the training data to find and remediate biases. This includes re-sampling underrepresented groups and adjusting the model parameters to promote fairness.
- Business processes that index ethical frameworks, best practices, and concerns should be developed, monitored, and evaluated.
- Clearly define the desired outcomes of the AI model, then frame the key variables to capture.
- Ensuring that the data collected and used to train the AI model illustrates the environment that it will be deployed in and contains diverse and representative data.
- Design and develop algorithms that are sensitive to fairness considerations, and audit these regularly.
- Practice data collection principles that do not disadvantage specific groups.
- Document the development of the AI model, including all datasets, variables identified, and decisions made throughout the development cycle.",unclassified,
Smart Contract Misconfiguration,"Smart contract misconfiguration encompasses a range of issues in smart contract logic, such as reentrancy vulnerabilities, improper access control, and arithmetic errors. These flaws can lead to unauthorized actions, financial losses, or contract failures. An attacker can exploit misconfigurations to execute unintended transactions, bypass restrictions, or manipulate funds.

**Business Impact**  

Misconfigured smart contracts can result in significant financial losses, reputational damage, and legal liabilities. Exploits can destabilize the platform and harm user trust in the system.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Review the smart contract code for potential logical errors or missing validations
1. Interact with the contract using edge cases or malformed inputs
1. Observe the following points where the contract behaves unexpectedly or allows unauthorized actions {{explanation of where + screenshot}}  

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Conduct security audits and code reviews of smart contracts.  
- Implement automated tools to detect common vulnerabilities.  
- Use modifiers and access control patterns to enforce secure logic.  
- Test contracts extensively with edge cases and different stress scenarios.",unclassified,
Smart Contract Misconfiguration - Reentrancy Attack,"A Reentrancy attack occurs when a smart contract calls an external contract before finalizing the state changes from its initial function. This allows an attacker to repeatedly call the vulnerable function before the first call completes, enabling them to drain funds or manipulate contract states. An attacker can exploit this misconfiguration to recursively withdraw funds beyond their initial balance.

**Business Impact** 

Reentrancy misconfiguration can lead to significant financial losses, as attackers drain funds from the contract or manipulate internal states, undermining user trust. The reputational damage can drive users away from the platform and reduce engagement with the contract.

**Steps to Reproduce** 

1. Navigate to the following URL: {{URL}}
1. Identify a contract function that calls an external contract and transfers funds
1. Deploy a malicious contract that interacts with the vulnerable function
1. Initiate a call from the malicious contract to trigger the reentrancy
1. Observe that the initial call completes without recognizing the unauthorized withdrawals

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Use a `checks-effects-interactions` pattern to ensure internal state updates before external calls.
- Implement `reentrancyGuard` or similar modifiers to prevent reentrancy.
- Regularly audit smart contracts for reentrancy vulnerabilities.",unclassified,
Smart Contract Misconfiguration - Inaccurate Rounding Calculation,"This misconfiguration arises when rounding errors occur during token or fund calculations, leading to incorrect values in transfers or balances. It can be caused by poor rounding methods, or lack of precision controls in mathematical functions. An attacker can exploit rounding inaccuracies to siphon small amounts across multiple transactions, or disrupt accounting.

**Business Impact**

Rounding errors can result in financial inconsistencies, transaction miscalculations, and damage user confidence in the platform’s accuracy. Users may perceive the protocol as untrustworthy if their balances or transfers are systematically inaccurate.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Identify the functions which are performing rounding calculations on token or fund values
1. Execute transactions with different value inputs to observe the rounding behaviors
1. Compare calculated values with expected results to detect inconsistencies
1. Repeat transactions with minimal value variations to test rounding reliability
1. Observe that the rounding errors affect balances or contract accounting

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Use libraries with precise rounding functions and avoid excessive rounding.
- Test functions for rounding accuracy across varied input ranges.
- Standardize rounding logic in critical calculations for consistency.
- Regularly audit rounding functions to minimize financial discrepancies.",unclassified,
Smart Contract Misconfiguration - Integer Overflow Underflow,"Integer overflow or underflow vulnerabilities occur when arithmetic operations exceed the maximum, or minimum storage limits of an integer variable, causing unexpected behaviors. Attackers can use overflow or underflow conditions to alter the intended logic of calculations within a contract to drain funds, alter balances, or bypass conditional checks.

**Business Impact** 

Arithmetic vulnerabilities can cause severe financial losses, compromise contract stability, and negatively impact user trust. Overflow issues can skew balance or token calculations, reducing the protocol’s operational integrity.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Identify a function that uses arithmetic operations on integer variables
1. Input extreme values to trigger possible overflow or underflow:
{{input value}}
1. Observe  conditional checks are bypassed due to altered variable states

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Use libraries like `SafeMath` to prevent overflow and underflow in arithmetic operations.
- Implement input validation to restrict variable ranges.
- Perform rigorous testing on arithmetic functions under extreme conditions.
- Use static analysis tools to identify potential overflow and underflow vulnerabilities.",unclassified,
Smart Contract Misconfiguration - Bypass Of Function Modifiers And Checks,"This misconfiguration occurs when a smart contract’s access controls or validation checks can be circumvented due to design flaws, or incorrect application of modifiers. This allows unauthorized actions or access to restricted contract functions. An attacker can exploit this misconfiguration to access privileged functions or manipulate the contract state without meeting the required conditions.

**Business Impact**
  
Bypassing modifiers and checks undermines the security and integrity of the contract, leading to potential fund loss and reputational harm. Users may lose confidence in the platform if unauthorized actions compromise its security.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Identify the critical functions that use access control or validation modifiers
1. Attempt to bypass modifiers by calling the functions directly
1. Test whether function-level validation can be circumvented using specific inputs
1. Observe inconsistencies in access control or modifier enforcement that allow unauthorized access, or other behavior that is allowed without meeting preset conditions

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Ensure proper application of access control modifiers on all sensitive functions.
- Use access control libraries like `AccessControl` for standardized security.
- Conduct thorough testing on function modifiers to prevent bypass exploits.
- Implement logging and alert mechanisms to detect unauthorized function calls.",unclassified,
Smart Contract Misconfiguration - Unauthorized Smart Contract Approval,"Unauthorized smart contract approval vulnerabilities occur when approval functions allow arbitrary or unauthorized addresses to spend tokens on behalf of the contract. This can arise from missing checks, or weak validation in the approval process. An attacker can leverage this flaw to gain control over users' tokens and initiate unauthorized transactions.

**Business Impact**  

Unauthorized token approvals can lead to user fund losses and significantly harm the protocol’s credibility. Users may lose confidence in the platform's security, reducing participation and affecting the protocol’s overall engagement.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Locate functions responsible for approving token spending
1. Call the function to authorize an unauthorized address
1. Observe that the unauthorized address receives approval to spend tokens

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Enforce strict checks on token approval functions to prevent arbitrary authorization.
- Limit approvals to pre-approved addresses and verify authorization explicitly.
- Use thorough testing to confirm proper validation in approval functions.
- Regularly audit token approval processes for potential security gaps.",unclassified,
Smart Contract Misconfiguration - Smart Contract Owner Takeover,"A smart contract owner takeover occurs when owner or admin privileges can be acquired by an unauthorized party due to insecure permission settings. If ownership functions are misconfigured, an attacker can assume control of the contract and make arbitrary changes, including transferring funds or altering settings.

**Business Impact**  

An owner takeover can compromise the entire protocol, leading to financial and operational losses. It significantly damages user confidence, as users may lose funds or access to services and may perceive the protocol as unsafe.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Locate contract functions allowing ownership transfer, or admin privilege assignment
1. Call the ownership transfer function without required permissions
1. Verify new owner privileges by attempting administrative actions
1. Observe access to sensitive functions typically restricted to the owner

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Implement strict access controls on ownership transfer functions.
- Use multi-signature wallets to manage contract ownership.
- Audit ownership and admin functions to ensure only authorized entities can access them.
- Monitor and log all owner-level activities to detect unauthorized access attempts.",unclassified,
Smart Contract Misconfiguration - Improper Decimals Implementation,"Improper decimals implementation occurs when a smart contract handles token or asset values without accurately accounting for decimal places, leading to calculation errors. Mismanagement of decimal points can result in incorrect fund transfers, unexpected balances, or unintended value losses. An attacker can manipulate decimal mismatches to gain an unfair advantage and gain funds.

**Business Impact**

Decimal inaccuracies can lead to financial losses, user confusion, and reduced trust in the protocol. Incorrect balances or transfers can result in reputational harm and complicate transaction verification.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Examine the contract’s handling of token values and decimals
1. Perform transactions with varying amounts to observe any decimal discrepancies
1. Check balances or transferred values to confirm inaccurate decimal application
1. Verify  that rounding errors occur in displayed or transferred amounts

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Use libraries or modules that accurately handle decimals in calculations.
- Standardize decimal implementation across contract functions.
- Test various transaction amounts to ensure consistent decimal accuracy.
- Regularly audit and document decimal logic to prevent miscalculations.",unclassified,
Smart Contract Misconfiguration - Unauthorized Transfer Of Funds,"When a smart contract lacks restrictions on fund transfer functions, it can allow unauthorized parties to transfer funds. This misconfiguration can arise from insufficient validation of transfer functions or missing authentication checks. An attacker can exploit this flaw to move funds from the contract to their own account without permission.

**Business Impact**  

Unauthorized fund transfers can result in significant financial losses for both users and the protocol. Such incidents cause reputational damage, making users hesitant to interact with the platform and potentially leading to legal consequences.

**Steps to Reproduce** 

1. Navigate to the following URL: {{URL}}
1. Locate transfer functions within the contract
1. Execute the transfer function from an unauthorized account
1. Observe that the contract allows the transfer without proper authentication

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Enforce strict access controls and authentication checks on transfer functions.
- Implement role-based access controls to limit fund movement permissions.
- Use external audits to review fund-handling functions regularly.
- Enable monitoring and alerting for any unauthorized fund transfers.",unclassified,
Smart Contract Misconfiguration - Improper Fee Implementation,"Improper fee implementation occurs when a smart contract applies incorrect or inconsistent fee calculations, leading to potential losses in revenue or unjust costs for users. This can stem from incorrect fee logic, lack of validation on fee amounts, or failure to update fees as needed. An attacker can exploit this misconfiguration by bypassing fees entirely or overcharging users, disrupting normal transaction behavior.

**Business Impact** 

Improper fee configurations can result in financial losses, reduced user satisfaction, and diminished trust in the platform. Users may perceive the platform as unreliable or exploitative if fees are excessive or inconsistent.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Review the contract’s fee logic and parameters
1. Execute multiple transactions with varied amounts and compare fee deductions
1. Observe that fees deviate from expected values, or are inconsistently applied
1. Bypass or change the fee mechanism by adjusting input data
1. Observe that there is abnormal fee behavior compared to the fee policy

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Use accurate mathematical formulas and libraries for fee calculation.
- Conduct thorough testing to verify consistent fee deductions.
- Allow dynamic updates to fee structure, and ensure these updates are documented and accessible.
- Implement a transparent fee audit trail for user clarity and verification purposes.",unclassified,
Smart Contract Misconfiguration - Uninitialized Variables,"Uninitialized variables in smart contracts can lead to unintended access, where unassigned storage variables may have default values accessible by unauthorized parties. Attackers can manipulate these default states, causing unintended function behaviors or unauthorized fund transfers. An attacker can leverage this flaw to exploit the contract’s state, triggering unauthorized actions.

**Business Impact** 

Uninitialized variables can lead to unpredictable contract behavior, financial losses, and user distrust. Such vulnerabilities create a perception of unreliability, which could damage the protocol's reputation and reduce user engagement.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Identify any storage variables within the contract that are not initialized
1. Deploy the following script to interact with uninitialized variables:
{{script}}
1. Observe that the variable allows unauthorized access or bypasses controls
1. Call functions relying on the uninitialized variable and note the unusual behavior

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Initialize all storage variables explicitly to prevent unintended defaults.
- Conduct thorough testing on variable initializations in smart contracts.
- Review code to ensure that no unassigned variables are left.
- Use static analysis tools to identify uninitialized variables before deployment.",unclassified,
Smart Contract Misconfiguration - Irreversible Function Call,"This misconfiguration occurs when a contract contains functions that, once called, cannot be undone or reverted, potentially locking funds or creating irreversible changes in the contract state. It often arises from a lack of access control checks or finality mechanisms on sensitive functions. An attacker can exploit this by calling the function to disrupt the contract’s functionality, or permanently lock funds.

**Business Impact** 

Irreversible function calls can lead to permanent loss of funds, reputational damage, and lack of user trust in the contract. In cases where funds are locked without a return option, the platform’s credibility and financial stability are at risk.

**Steps to Reproduce**  

1. Navigate to the following URL: {{URL}}
1. Locate irreversible functions within the smart contract code
1. Call these functions under normal user permissions:
{{screenshot}}
1. Observe that the function’s actions cannot be reverted or are final

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Implement access control checks for sensitive or irreversible functions.
- Use `require` statements to limit access to authorized entities.
- Test all functions for reversibility or emergency recovery options.
- Document irreversible functions explicitly for user awareness.",unclassified,
Smart Contract Misconfiguration - Malicious Superuser Risk,"Malicious superuser risk occurs when a smart contract grants excessive privileges to a single admin or superuser account without appropriate checks. This can allow the privileged account to manipulate contract functionality or transfer funds at will. An attacker who gains access to the superuser account can exploit these powers to drain funds or modify contract behavior.

**Business Impact**
  
A malicious superuser can compromise the entire protocol, resulting in major financial losses, user trust erosion, and damage to the platform’s integrity. Users may hesitate to interact with a contract that grants unchecked power to a single entity.

**Steps to Reproduce** 

1. Navigate to the following URL: {{URL}}
1. Identify functions that require superuser privileges within the contract
1. Using a superuser account, observe the permissions it grants
1. Modify contract parameters or transfer funds using the account
1. Observe that other accounts cannot counteract these changes

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Implement multi-signature wallets for superuser-level access.
- Limit superuser privileges to essential functions only.
- Regularly audit superuser activities and provide transparency to users.
- Set up monitoring and alert systems to flag unauthorized superuser actions.",unclassified,
Smart Contract Misconfiguration - Function Level Denial Of Service,"Function-level Denial of Service (DoS) occurs when a smart contract function can be exploited to prevent legitimate users from accessing it. This vulnerability often arises due to unchecked loops, gas limitations, or unoptimized logic that blocks execution under specific conditions. An attacker can invoke the function repeatedly to exhaust resources, preventing others from using it.

**Business Impact**

Function-level DoS vulnerabilities can lead to operational disruptions and affect user experience. Users may lose trust in the reliability of the contract, and the platform’s reputation and user retention rates can suffer as a result.

**Steps to Reproduce**

1. Navigate to the following URL: {{URL}}
1. Identify a function that has looping or costly operations
1. Use the following script that calls the function with large datasets or under high load:
{{script}}
1. Observe that the function fails due to gas limits, or causes significant delays
1. Confirm that other users cannot access the function while the attack is ongoing

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Optimize function logic to avoid excessive looping or gas-heavy operations.
- Set usage limits on costly functions to prevent denial-of-service scenarios.
- Implement circuit-breakers to disable functions under high-stress conditions.
- Regularly test functions for performance under load to prevent DoS risks.",unclassified,
Smart Contract Misconfiguration - Improper Use Of Modifier,"This misconfiguration arises when function modifiers fail to enforce expected access controls or validation checks. It can allow unauthorized access to sensitive functions or bypass restrictions, jeopardizing the security of the contract’s logic. An attacker can exploit this flaw to gain unauthorized access or manipulate contract behavior.

**Business Impact** 

Improperly applied modifiers can expose critical functions to unauthorized users, leading to financial losses or unintentional contract manipulations. Such issues harm user confidence and can make the contract seem untrustworthy or vulnerable.

**Steps to Reproduce** 

1. Navigate to the following URL: {{URL}}
1. Review function modifiers applied across sensitive contract functions
1. Access restricted functions with an unauthorized account
1. Bypassing the modifier and observe the following unintended access or manipulation:
{{screenshot}}
1. Observe that restricted contract states or balances are affected

**Proof of Concept**

The screenshot(s) below demonstrate(s) the vulnerability:
>
> {{screenshot}}","Implementing the following defensive measures can prevent and limit the impact of the vulnerability:

- Use access-control libraries like `Ownable` to simplify authorization logic.
- Verify that function modifiers enforce all required checks and validations.
- Test all restricted functions to confirm the effectiveness of applied modifiers.
- Document and audit modifier logic to ensure comprehensive access control.",unclassified,
Data Biases,"Data biases occurs when the data used train the AI model is flawed, unrepresentative or systematically skewed. Biases can stem from different sources, such as sampling errors, historical prejudices, or a lack of diversity in the dataset. Outputs from AI models that have a data bias can result in inaccurate, unfair, or otherwise discriminatory predictions or decisions.

**Business Impact**

Data biases in this AI model can result in reputational damage and indirect monetary loss due to the loss of customer trust in the output of the model.

**Steps to Reproduce**

1. Input the following text into the model. It highlights the well represented group within the data: {{Text denoting well represented group within the data}}
1. Input the following text into the model. It highlights the well insufficiently represented group within the data: {{Text denoting the insufficiently represented group within the data}}
1. Note that the output of the AI model classifies these two groups disparately, showing a bias in the data.

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","Establish practices and policies that ensure responsible data collection and training. This can include:

- Conducting a comprehensive review of the training data to find and remediate biases. This includes re-sampling underrepresented groups and adjusting the model parameters to promote fairness.
- Business processes that index ethical frameworks, best practices, and concerns should be developed, monitored, and evaluated.
- Clearly define the desired outcomes of the AI model, then frame the key variables to capture.
- Ensuring that the data collected and used to train the AI model illustrates the environment that it will be deployed in and contains diverse and representative data.
- Design and develop algorithms that are sensitive to fairness considerations, and audit these regularly.
- Practice data collection principles that do not disadvantage specific groups.
- Document the development of the AI model, including all datasets, variables identified, and decisions made throughout the development cycle.",unclassified,
Data Biases - Representation Bias,"Representation bias occurs when the training data of an AI model has an omission, or insufficient representation, of certain groups which the AI model intends to serve. Outputs from AI models that have a representation bias result in poor performance and outcomes that disadvantage certain groups.

**Business Impact**

Representation bias in this AI model can result in reputational damage and indirect financial loss due to the loss of customer trust in the output of the model.

**Steps to Reproduce**

1. Input the following text into the model. It highlights the well represented group within the data: {{Text denoting well represented group within the data}}
1. Input the following text into the model. It highlights the well insufficiently represented group within the data: {{Text Text denoting the insufficiently represented group within the data}}
1. Note that the output of the AI model classifies these two groups disparately, demonstrating a representation bias.

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","Establish practices and policies that ensure responsible data collection and training. This can include:

- Conducting a comprehensive review of the training data to find and remediate biases. This includes re-sampling underrepresented groups and adjusting the model parameters to promote fairness.
- Business processes that index ethical frameworks, best practices, and concerns should be developed, monitored, and evaluated.
- Clearly define the desired outcomes of the AI model, then frame the key variables to capture.
- Ensuring that the data collected and used to train the AI model illustrates the environment that it will be deployed in and contains diverse and representative data.
- Design and develop algorithms that are sensitive to fairness considerations, and audit these regularly.
- Practice data collection principles that do not disadvantage specific groups.
- Document the development of the AI model, including all datasets, variables identified, and decisions made throughout the development cycle.",unclassified,
Data Biases - Pre Existing Bias,"Pre-existing bias occurs when historical or societal prejudices are present in the training data. This can look like a lack of certain data points, over representation or under representation of groups, a bias in the selection of data points that make up the AI model, or data labels that are discriminatory or subjective. Outputs from AI models that have a pre-existing bias can result in inferior performance and outcomes that disadvantage certain groups.

**Business Impact**

Pre-existing bias in this AI model can result in reputational damage and indirect monetary loss due to the loss of customer trust in the output of the model.

**Steps to Reproduce**

1. Input the following text into the model. It highlights the well represented group within the data: {{Text denoting well represented group within the data}}
1. Input the following text into the model. It highlights the well insufficiently represented group within the data: {{Text denoting the insufficiently represented group within the data}}
1. Note that the output of the AI model classifies these two groups disparately, showing a pre-existing bias.

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","Establish practices and policies that ensure responsible data collection and training. This can include:

- Conducting a comprehensive review of the training data to find and remediate biases. This includes re-sampling underrepresented groups and adjusting the model parameters to promote fairness.
- Business processes that index ethical frameworks, best practices, and concerns should be developed, monitored, and evaluated.
- Clearly define the desired outcomes of the AI model, then frame the key variables to capture.
- Ensuring that the data collected and used to train the AI model illustrates the environment that it will be deployed in and contains diverse and representative data.
- Design and develop algorithms that are sensitive to fairness considerations, and audit these regularly.
- Practice data collection principles that do not disadvantage specific groups.
- Document the development of the AI model, including all datasets, variables identified, and decisions made throughout the development cycle.",unclassified,
Broken Access Control,"When access controls are broken, users are able to perform functions outside of their intended user functionality within the application. Access controls help enforce users' access and how they interact with applications and APIs through authorization. There can be vertical, horizontal, and conditional access controls which give a user their intended permissions within an application. Broken access control in this application can be leveraged by an attacker to elevate privileges, or manipulate, destroy, or disclose data, depending on the type of access control vulnerability being exploited.

**Business Impact**

Broken access controls can lead to financial loss through an attacker accessing, deleting, or modifying data from within the application. This could also result in reputational damage for the business through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Login to an account that should not be able to perform {{action}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe that the account now has additional user functionality and access to data it was previously not authorized to access

**Proof of Concept (PoC)**

The screenshot below demonstrates the broken access control:

{{screenshot}}","Broken access controls can be remediated by implementing a handful of best practices relating to authentication and session management to ensure secure implementation. These include:

- Ensuring that access controls are designed thoroughly upfront and that each request goes through some form of access control check. By default, specific requests that are not explicitly allowed should be denied.
- All users, programs and processes should follow the principle of least privilege and only be given as little access as possible in order to complete their business functions.
- An application’s code should not contain any hardcoded roles as these can become fragile and difficult to enforce and audit.",unclassified,"https://owasp.org/www-project-proactive-controls/v3/en/c7-enforce-access-controls, https://owasp.org/Top10/A01_2021-Broken_Access_Control/, https://portswigger.net/web-security/access-control"
Broken Access Control - Exposed Sensitive Android Intent,"An `Intent` is a messaging object used within an Android application to request action from a different component of the application. When a request occurs and information is retrieved, a lack of validation can result in access controls being bypassed and sensitive information being leaked.
The application has an exposed sensitive Android `Intent` which an attacker can query to gather sensitive information from the application which they could use to perform further attacks on the application, the business, or its users.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Login to an account that should not be able to perform {{action}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe that the account now has additional user functionality and access to data it was previously not authorized to access

**Proof of Concept (PoC)**

The screenshot below demonstrates the broken access control:

{{screenshot}}","Broken access controls can be remediated by implementing a handful of best practices relating to authentication and session management to ensure secure implementation. These include:

- Ensuring that access controls are designed thoroughly upfront and that each request goes through some form of access control check. By default, specific requests that are not explicitly allowed should be denied.
- All users, programs and processes should follow the principle of least privilege and only be given as little access as possible in order to complete their business functions.
- An application’s code should not contain any hardcoded roles as these can become fragile and difficult to enforce and audit.",unclassified,"https://owasp.org/www-project-proactive-controls/v3/en/c7-enforce-access-controls, https://cwe.mitre.org/data/definitions/200.html, https://portswigger.net/web-security/access-control"
Broken Access Control - Username Enumeration,"Username enumeration is a vulnerability where an attacker is able to confirm or guess correct usernames through the difference in the server’s response to input. It often occurs on login, registration, and password reset pages. This application has a username enumeration vulnerability which allows an attacker to brute force passwords, stuff credentials, or for further attacks such as social engineering.

**Business Impact**

Username enumeration can result in reputational damage for the business through the impact to customers’ trust in the application’s security of user accounts. If an attacker is able to chain this vulnerability with another it can lead to user account compromise and data exfiltration.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Attempt to authenticate
1. Observe the response from the server indicating that the username/email is valid or not

**Proof of Concept (PoC)**

The screenshot below shows the response from the server:

{{screenshot}}","The server should respond to valid and invalid authentication attempts with the same message. For example, `Login failed. Username or Password invalid.`

The server should also take the same amount of time to respond to a valid or invalid request so that an attacker can not use this to distinguish between the two.",unclassified,
Broken Access Control - Username Enumeration - Non Brute Force,"Username enumeration is a vulnerability where an attacker is able to confirm or guess correct usernames through a difference in the server’s response to input. It often occurs on login, registration, and password reset pages. This application has a username enumeration vulnerability which allows an attacker to identify the username or email of a user without brute forcing it, allowing an attacker to gain this user information for all users within the application in a short period of time.

**Business Impact**

Username enumeration can result in reputational damage for the business through the impact to customers’ trust in the application’s security of user accounts. If an attacker is able to chain this vulnerability with another it can lead to user account compromise and data exfiltration.

**Steps to Reproduce**

1. Use a browser to navigate to: {{URL}}
1. Attempt to authenticate
1. Observe the response from the server indicating that the username/email is valid or not

**Proof of Concept (PoC)**

The screenshot below shows the response from the server:

{{screenshot}}","The server should respond to valid and invalid authentication attempts with the same message. For example, `Login failed. Username or Password invalid.`

The server should also take the same amount of time to respond to a valid or invalid request so that an attacker can not use this to distinguish between the two.",unclassified,
Broken Access Control - Privilege Escalation,"Access controls can be bypassed through a variety of ways including, calling an internal post authentication page, modifying the given URL parameters, by manipulating the form, or by counterfeiting sessions. The access controls for this application can be bypassed by an attacker who can gain access to a privileged user’s account and functionality. As a result, the attacker has access to more resources or functionality within the application. This could include viewing or editing sensitive customer data, and viewing or editing other user permissions.

**Business Impact**

The impact of this vulnerability can vary in severity depending on the degree of access to resources or functionality the attacker is able to gain. An attacker with the ability to access, delete, or modify data from within the application could result in reputational damage for the business through the impact to customers’ trust. This can also result in indirect financial cost to the business through fines and regulatory bodies if sensitive data is accessed. The severity of the impact to the business is dependent on the sensitivity of the data being stored in, and transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Login to User Account A
1. Using the HTTP interception proxy, forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Forward the requests until there is a POST request visible with the following parameters:

{{parameter}}

1. Modify the parameter to the following payload:

{{payload}}

1. Forward the request then turn off interception in the proxy
1. Observe that User Account A now has additional Administrator privileges and user functionality it was previously not authorized to access

**Proof of Concept (PoC)**

The screenshots below demonstrate the access controls being bypassed.

Unauthenticated view:

{{screenshot}}

Bypassing the access controls:

{{screenshot}}

Privileged user view:

{{screenshot}}

An attacker could escalate this further by abusing the privileged users permissions to perform specific actions. This is demonstrated in the screenshot below:

{{screenshot}}","There are a number of best practices involved with implementing strong access controls, including the following:

- Declare the type of access allowed for each resource and deny access by default, unless these specific access conditions are met by a user attempting to access the resource. To enforce these access controls, it’s important to use a single application wide mechanism.
- It is recommended that all critical information is stored server-side, with only a session ID being passed back and forth between the server and client.
- Similarly, the data being sent to the client should be encrypted to ensure that data cannot be viewed in transit, and it should be digitally signed to ensure the data's integrity.
- Thoroughly test and audit the access controls during the development and deployment lifecycle to ensure the security and integrity of the controls.

For further information, please see the following resources:

- <https://owasp.org/Top10/A01_2021-Broken_Access_Control/>
- <https://owasp.org/www-community/Access_Control>",unclassified,
Broken Access Control - Exposed Sensitive Ios Url Scheme,"A URL Scheme helps facilitate the transfer of a limited amount of data between iOS applications on Apple mobile devices. iOS applications operate in separate sandboxes to limit the access and transfer of data between applications. However, it is possible to perform an App-in-the-Middle (AitM) attack where a malicious application sends a manipulated URL Scheme to trick a legitimate application into sharing a user’s sensitive data, bypassing access controls of the legitimate application.

The application has an exposed sensitive iOS URL Scheme, which an attacker can take advantage of to perform an AitM attack, bypass the access controls of the application, and gather sensitive user data. This data could be used to perform further attacks on the application, the business, or its users, including account takeover.

**Business Impact**

This vulnerability can lead to reputational damage and indirect financial loss to the company through the impact to customers’ trust. The severity of the impact to the business is dependent on the sensitivity of the accessible data being transmitted by the application.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Login to an account that should not be able to perform {{action}}
1. Forward the following request to the endpoint:

```HTTP
{{request}}
```

1. Observe that the account now has additional user functionality and access to data it was previously not authorized to access

**Proof of Concept (PoC)**

The screenshot below demonstrates the broken access control:

{{screenshot}}","Broken access controls can be remediated by implementing a handful of best practices relating to authentication and session management to ensure secure implementation. These include:

- Ensuring that access controls are designed thoroughly upfront and that each request goes through some form of access control check. By default, specific requests that are not explicitly allowed should be denied.
- All users, programs and processes should follow the principle of least privilege and only be given as little access as possible in order to complete their business functions.
- An application’s code should not contain any hardcoded roles as these can become fragile and difficult to enforce and audit.",unclassified,"https://owasp.org/www-project-proactive-controls/v3/en/c7-enforce-access-controls, https://cwe.mitre.org/data/definitions/200.html, https://portswigger.net/web-security/access-control"
Indicators Of Compromise,"Indicators of compromise (IoC) comprise of vulnerabilities in the detection, analysis, or response mechanisms used to identify potential security breaches, or compromises within, an organization's network or systems. This vulnerability may stem from inadequate IoC management, ineffective threat intelligence integration, or improper incident response procedures.

**Business Impact**

The impact of Indicators of Compromise (IoC) Vulnerability can be severe. It can lead to undetected security breaches, prolonged exposure to threats, or ineffective incident response, compromising the confidentiality, integrity, or availability of assets and data. Additionally, it may result in legal liabilities, regulatory penalties, and reputational damage to the organization.

**Steps to Reproduce**

1. Identify the IoC detection and response mechanisms deployed within the organization, including security tools, monitoring systems, and incident response procedures:
{{Vulnerable component}}
2. Analyze the configuration and settings of these mechanisms for potential misconfigurations.
{{Misconfiguration(s)}}
3. Analyze the responsiveness and accuracy of IoC alerts and notifications generated by security tools and systems.
{{Identify what is lacking here}}
4. Observe the impact of successful exploitation of the IoC vulnerabilities on the organization's security posture and incident response capabilities.

**Proof of Concept (PoC)**

The following screenshot(s) demonstrate(s) this vulnerability:

{{screenshot}}","There is no single technique to remediate automotive security misconfigurations. However, implementing the right combination of defensive measures can prevent and limit the impact. Some best practices include the following:

- Develop and enforce secure configuration guidelines for the automotive system, incorporating guidelines for software, firmware, and network settings.
- Ensure that the vehicle's firmware is regularly updated with security patches and fixes to address known vulnerabilities and misconfigurations.
- Conduct regular security audits and assessments of the vehicle's configurations to identify and remediate any misconfigurations. Follow industry best practices and benchmarks for these.",unclassified,
Using Components With Known Vulnerabilities,"Outdated software is common in applications that use many types of different software stacks. Many outdated software versions have well known and documented vulnerabilities, including those with Common Vulnerabilities and Exposures (CVE) IDs. An attacker can take advantage of old software versions in this application by using open source vulnerability information and CVEs to exploit the application.

**Business Impact**

Outdated Software Version can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Intercept a response with the HTTP interception proxy
1. Observe the outdated software version:

```HTTP
{{response}}
```

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the outdated software with known vulnerabilities:

{{screenshot}}","All software should be kept up to date and routinely managed through a patch management process. It is important to have an inventory of all software and versions in use, including dependencies.

Regular monitoring of the Common Vulnerability and Exposures (CVE) and National Vulnerability Database (NVD) is also recommended.",unclassified,
Using Components With Known Vulnerabilities - Captcha Bypass,"A Computer Automated Public Turing Test test to tell Computers and Humans Apart (CAPTCHA) allows applications to tell whether a user is a human or a robot. A CAPTCHA can be bypassed when the implementation or its workflow is improperly configured, or when software can be used to bypass the challenge.

An attacker can bypass the CAPTCHA form and spam the website with queries for registration, login, as well as spam support teams with faulty requests.

**Business Impact**

CAPTCHA bypass can lead to reputational damage for the business due to a loss in confidence and trust by users. It can also result in indirect financial loss to the business through the extra workloads placed on internal teams to deal with spam from an attacker.

**Steps to Reproduce**

1. Navigate to the following endpoint with CAPTCHA: {{value}}
1. Use {{software}} to bypass CAPTCHA

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the CAPTCHA bypass:

{{screenshot}}",The implementation of CAPTCHAs should be thoroughly tested for design and implementation flaws to prevent an attacker bypassing the CAPTCHA.,unclassified,"https://cwe.mitre.org/data/definitions/804.html, https://owasp.org/www-project-automated-threats-to-web-applications/assets/oats/EN/OAT-009_CAPTCHA_Defeat"
Using Components With Known Vulnerabilities - Captcha Bypass - Ocr Optical Character Recognition,"A Computer Automated Public Turing Test test to tell Computers and Humans Apart (CAPTCHA) allows applications to tell whether a user is a human or a robot. A common bypass is using Optical Character Recognition (OCR) where software can filter out the noise form CAPTCHA forms and easily classify the form with high accuracy.

An attacker can leverage software that uses OCR to bypass CAPTCHA forms and spam the website with queries for registration, login, and spam support teams with faulty requests.

**Business Impact**

CAPTCHA bypass can lead to reputational damage for the business due to a loss in confidence and trust by users. It can also result in indirect financial loss to the business through the extra workloads placed on internal teams to deal with spam from an attacker.

**Steps to Reproduce**

1. Navigate to the following endpoint with CAPTCHA: {{value}}
1. Use {{software}} to bypass CAPTCHA

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the CAPTCHA bypass:

{{screenshot}}",The implementation of CAPTCHAs should be thoroughly tested for design and implementation flaws to prevent an attacker bypassing the CAPTCHA.,unclassified,"https://cwe.mitre.org/data/definitions/804.html, https://owasp.org/www-project-automated-threats-to-web-applications/assets/oats/EN/OAT-009_CAPTCHA_Defeat"
Using Components With Known Vulnerabilities - Rosetta Flash,"Outdated software is common in applications that use many types of different software stacks. Many outdated software versions have well known and documented vulnerabilities, including those with Common Vulnerabilities and Exposures (CVE) IDs.

Rosetta Flash is a vulnerability that leverages alphanumeric characters to exploit JavaScript Object Notation with Padding (JSONP) callback endpoints. An attacker can use this vulnerability to bypass Same Origin Policy and execute scripts on domains outside of the scope allowing for code execution and sensitive data exfiltration about end users, including credentials.

**Business Impact**

Rosetta flash can lead to reputational damage for the business due to a loss in confidence and trust by users. A successful rosetta flash attack can lead to sensitive data exfiltration which can result in indirect financial loss to the business.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Navigate to callback endpoint: {{value}}
1. {{action}} and intercept request with a Web Proxy
1. Notice the SWF used: {{value}}
1. Use {{software}} to generate an alphanumeric SWF file hosted on the attacker website: {{value}}
1. Use the callback endpoint to {{action}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the full exploit:

{{screenshot}}","All software should be kept up to date and routinely managed through a patch management process. It is important to have an inventory of all software and versions in use, including dependencies. Regular monitoring of the Common Vulnerability and Exposures (CVE) and National Vulnerability Database (NVD) is also recommended.

Flash files cannot start with comments. Therefore, ensuring that `callback` parameters begin with a comment, such as `/* */`, can protect against rosetta flash.",unclassified,
Using Components With Known Vulnerabilities - Outdated Software Version,"Outdated software is common in applications that use many types of different software stacks. Some outdated software versions have well known and documented vulnerabilities, including those with Common Vulnerabilities and Exposures (CVE) IDs. An attacker can take advantage of old software versions in this application by using open source vulnerabilities and CVEs to exploit an application.

**Business Impact**

Outdated Software Version can lead to reputational damage for the business due to a loss in confidence and trust by users.

**Steps to Reproduce**

1. Enable a HTTP interception proxy, such as Burp Suite or OWASP ZAP
1. Use a browser to navigate to: {{URL}}
1. Intercept a response with the HTTP interception proxy
1. Observe the outdated software version:

```HTTP
{{response}}
```

**Proof of Concept (PoC)**

The screenshot(s) below demonstrates the outdated software with known vulnerabilities:

{{screenshot}}","All software should be kept up to date and routinely managed through a patch management process. It is important to have an inventory of all software and versions in use, including dependencies.

Regular monitoring of the Common Vulnerability and Exposures (CVE) and National Vulnerability Database (NVD) is also recommended.",unclassified,
Unvalidated Redirects And Forwards,"Unvalidated redirects and forwards occur when an application accepts user input that is not validated into the target of a redirection. This input causes a redirection to an external domain, manipulating a user by redirecting them to a malicious site. An open redirect was identified which can impact users' ability to trust legitimate web pages. An attacker can send a phishing email that contains a link with a legitimate business name in the URL and the user will be redirected from the legitimate web server to any external domain. Users are less likely to notice subsequent redirects to different domains when an authentic URL with a valid SSL certificate can be used within the phishing link.

This type of attack is also a precursor for more serious vulnerabilities such as Cross-Site Scripting (XSS), Server-Side Request Forgery (SSRF), Cross-Site Request Forgery (CSRF), or successful phishing attempts where an attacker can harvest users' credentials or gain users' OAuth access by relaying them through an Open Redirection, to a server they control (and can see the inbound requests from).

**Business Impact**

Unvalidated redirects and forwards can result in reputational damage for the business as customers' trust is negatively impacted by an attacker sending them to a phishing site to extract login credentials, or coercing them to send a financial transaction.

**Steps to Reproduce**

1. Using a browser, navigate to: {{URL}}
1. Copy and modify the URI so that the URL redirects to `url=<http://www.bugcrowd.com/`
1. Submit this in a new browser window and you should be redirected to the Bugcrowd website.

**Proof of Concept (PoC)**

The screenshot below demonstrates the unvalidated redirect or forward executing:

{{screenshot}}","# Recommendations(s)

The application should avoid incorporating user-controlled data within redirect targets. This can be achieved by removing the redirect function and replacing it with direct links to the appropriate URL. Additionally, a server-side allow list of trusted URLs can be used as permitted redirect URLs that the website can link to.

It is recommended best practice that all redirects go through an intermediate disclaimer page that notifies the user that they are navigating away from the website.",unclassified,
Unvalidated Redirects And Forwards - Tabnabbing,"Tabnabbing is a type of phishing attack that tricks users into inputting their login and password to a carbon copy of a genuine website. An attacker can use dynamic javascript to change the origin of a website to another website that looks exactly the same as the original, and can phish information from them.

**Business Impact**

Tabnabbing can result in reputational damage for the business as customers' trust is negatively impacted by an attacker sending them to a phishing site to extract login credentials, or coercing them to send a financial transaction.

**Steps to Reproduce**

1. Using a browser, navigate to: {{URL}}
1. {{action}} to navigate the user to a website in another window or tab
1. {{action}} to change the original website to a malicious website: {{value}}

**Proof of Concept (PoC)**

The screenshot below demonstrates the tabnabbing:

{{screenshot}}","# Recommendations(s)

It is recommended best practice to implement a cross-origin opener policy, and an isolation policy. Any time a user is redirected to a site from the webpage, they should be alerted with a security speed bump.",unclassified,
Unvalidated Redirects And Forwards - Open Redirect,"Open redirects occur when an application accepts user input that is not validated into the target of a redirection. This input causes a redirection to an external domain, manipulating a user by redirecting them to a malicious site. An open redirect was identified which can impact users' ability to trust legitimate web pages. An attacker can send a phishing email that contains a link with a legitimate business name in the URL and the user will be redirected from the legitimate web server to any external domain. Users are less likely to notice subsequent redirects to different domains when an authentic URL with a valid SSL certificate can be used within the phishing link.

This type of attack is also a precursor for more serious vulnerabilities such as Cross-Site Scripting (XSS), Server-Side Request Forgery (SSRF), Cross-Site Request Forgery (CSRF), or successful phishing attempts where an attacker can harvest users' credentials or gain users' OAuth access by relaying them through an Open Redirection, to a server they control (and can see the inbound requests from).

**Business Impact**

Open redirects can result in reputational damage for the business as customers' trust is negatively impacted by an attacker sending them to a phishing site to extract login credentials, or coercing them to send a financial transaction.

**Steps to Reproduce**

1. Using a browser, navigate to: {{URL}}
1. Copy and modify the URI so that the URL redirects to `url=<http://www.bugcrowd.com/`
1. Submit this in a new browser window and you should be redirected to the Bugcrowd website.

**Proof of Concept (PoC)**

The screenshot below demonstrates the open redirect executing:

{{screenshot}}","# Recommendations(s)

The application should avoid incorporating user-controlled data within redirect targets. This can be achieved by removing the redirect function and replacing it with direct links to the appropriate URL. Additionally, a server-side allow list of trusted URLs can be used as permitted redirect URLs that the website can link to.

It is recommended best practice that all redirects go through an intermediate disclaimer page that notifies the user that they are navigating away from the website.",unclassified,
Unvalidated Redirects And Forwards - Open Redirect - Get Based,"Open redirects enable an attacker to manipulate a user by redirecting them to a malicious site. A GET-based open redirect was identified which can impact users' ability to trust legitimate web pages. An attacker can send a phishing email that contains a link with a legitimate business name in the URL and the user will be redirected from the legitimate web server to any external domain. Users are less likely to notice subsequent redirects to different domains when an authentic URL with a valid SSL certificate can be used within the phishing link.

This type of attack is also a precursor for more serious vulnerabilities such as Cross-Site Scripting (XSS), Server-Side Request Forgery (SSRF), Cross-Site Request Forgery (CSRF), or successful phishing attempts where an attacker can harvest users' credentials or gain users' OAuth access by relaying them through an Open Redirection, to a server they control (and can see the inbound requests from).

**Business Impact**

GET-based open redirects can result in reputational damage for the business as customers' trust is negatively impacted by an attacker sending them to a phishing site to extract login credentials, or coercing them to send a financial transaction.

**Steps to Reproduce**

1. Using a browser, navigate to the vulnerable endpoint: {{URL_with_no_redirect}}
1. Modify the URL so that it redirects to `http://www.bugcrowd.com/`: {{URL_with_redirect}}
1. Submit this in a new browser window and you should be redirected to the Bugcrowd website

**Proof of Concept (PoC)**

The screenshot below demonstrates the GET-based open redirect executing:

{{screenshot}}","# Recommendations(s)

The application should avoid incorporating user-controlled data within redirect targets. This can be achieved by removing the redirect function and replacing it with direct links to the appropriate URL. Additionally, a server-side allow list of trusted URLs can be used as permitted redirect URLs that the website can link to.

It is recommended best practice that all redirects go through an intermediate disclaimer page that notifies the user that they are navigating away from the website.",unclassified,
Unvalidated Redirects And Forwards - Open Redirect - Post Based,"Open redirects enable an attacker to manipulate a user by redirecting them to a malicious site. A POST-based open redirection was identified which can impact users’ ability to trust legitimate web pages. An attacker can send a phishing email that contains a link with a legitimate business name in the URL and the user will be redirected from the legitimate web server to any external domain. Users are less likely to notice subsequent redirects to different domains when an authentic URL with a valid SSL certificate can be used within the phishing link.

This type of attack is also a precursor for more serious vulnerabilities such as Cross-Site Scripting (XSS), Server-Side Request Forgery (SSRF), Cross-Site Request Forgery (CSRF), or successful phishing attempts where an attacker can harvest users’ credentials or gain users’ OAuth access.

**Business Impact**

POST-based open redirects can result in reputational damage for the business as customers’ trust is negatively impacted by an attacker sending them to a phishing site to extract login credentials, or coercing them to send a financial transaction.

**Steps to Reproduce**

1. Using a browser, navigate to: {{URL}}
1. Open the attached HTML file in the target browser and follow the prompts
1. Submit this in a new browser window and you should be redirected to the Bugcrowd website

**Proof of Concept (PoC)**

The screenshot below demonstrates the POST-based open redirect executing:

{{screenshot}}","# Recommendations(s)

The application should avoid incorporating user-controlled data within redirect targets. This can be achieved by removing the redirect function and replacing it with direct links to the appropriate URL. Additionally, a server-side allow list of trusted URLs can be used as permitted redirect URLs that the website can link to.

It is recommended best practice that all redirects go through an intermediate disclaimer page that notifies the user that they are navigating away from the website.",unclassified,
Unvalidated Redirects And Forwards - Open Redirect - Header Based,"Open redirects enable an attacker to manipulate a user by redirecting them to a malicious site. A header-based open redirection was identified which can impact users’ ability to trust legitimate web pages. An attacker can send a phishing email that contains a link with a legitimate business name in the URL and the user will be redirected from the legitimate web server to any external domain. Users are less likely to notice subsequent redirects to different domains when an authentic URL with a valid SSL certificate can be used within the phishing link.

This type of attack is also a precursor for more serious vulnerabilities such as Cross-Site Scripting (XSS), Server-Side Request Forgery (SSRF), Cross-Site Request Forgery (CSRF), or successful phishing attempts where an attacker can harvest users’ credentials or gain users’ OAuth access.

**Business Impact**

Header-based open redirects can result in reputational damage for the business as customers’ trust is negatively impacted by an attacker sending them to a phishing site to extract login credentials, or coercing them to send a financial transaction.

**Steps to Reproduce**

1. Using a browser, navigate to: {{URL}}
1. Copy and modify the URI so that the URL redirects to <http://www.bugcrowd.com/>
1. Submit this in a new browser window and you should be redirected to the Bugcrowd website.

**Proof of Concept (PoC)**

The screenshot below demonstrates the header-based open redirect executing:

{{screenshot}}","# Recommendations(s)

The application should avoid incorporating user-controlled data within redirect targets. This can be achieved by removing the redirect function and replacing it with direct links to the appropriate URL. Additionally, a server-side allow list of trusted URLs can be used as permitted redirect URLs that the website can link to.

It is recommended best practice that all redirects go through an intermediate disclaimer page that notifies the user that they are navigating away from the website.",unclassified,
Unvalidated Redirects And Forwards - Open Redirect - Flash Based,"Open redirects enable an attacker to manipulate a user by redirecting them to a malicious site. A flash-based open redirect was identified which can impact users’ ability to trust legitimate web pages. An attacker can send a phishing email that contains a link with a legitimate business name in the URL and the user will be redirected from the legitimate web server to any external domain. Users are less likely to notice subsequent redirects to different domains when an authentic URL with a valid SSL certificate can be used within the phishing link.

This type of attack is also a precursor for more serious vulnerabilities such as Cross-Site Scripting (XSS), Server-Side Request Forgery (SSRF), Cross-Site Request Forgery (CSRF), or successful phishing attempts where an attacker can harvest users’ credentials or gain users’ OAuth access.

**Business Impact**

Flash-based open redirects can result in reputational damage for the business as customers’ trust is negatively impacted by an attacker sending them to a phishing site to extract login credentials, or coercing them to send a financial transaction.

**Steps to Reproduce**

1. Using a browser, navigate to: {{URL}}
1. Copy and modify the URI so that the URL redirects to <http://www.bugcrowd.com>
1. Submit this in a new browser window and you should be redirected to the Bugcrowd website.

**Proof of Concept (PoC)**

The screenshot below demonstrates the flash-based open redirect executing:

{{screenshot}}","# Recommendations(s)

The application should avoid incorporating user-controlled data within redirect targets. This can be achieved by removing the redirect function and replacing it with direct links to the appropriate URL. Additionally, a server-side allow list of trusted URLs can be used as permitted redirect URLs that the website can link to.

It is recommended best practice that all redirects go through an intermediate disclaimer page that notifies the user that they are navigating away from the website.",unclassified,
Unvalidated Redirects And Forwards - Lack Of Security Speed Bump Page,"Security speed bumps are prompts used in applications that inform the user that they are being redirected to a source denoted by another user. A lack of security speed bumps can allow an attacker to lure users to another website for phishing and information gathering campaigns by spamming the comment sections or forum posts within the application with malicious links.

**Business Impact**

A lack of a security speed bump can result in reputational damage for the business as customers' trust is negatively impacted by an attacker sending them to a phishing site to extract login credentials, or coercing them to send a financial transaction.

**Steps to Reproduce**

1. Using a browser, navigate to: {{URL}}
1. {{action}} and notice that a security speed bump is not used in the application

**Proof of Concept (PoC)**

The screenshot below demonstrates the lack of a security speed bump:

{{screenshot}}","# Recommendations(s)

It is recommended best practice that all redirects go through an intermediate disclaimer page that notifies the user that they are navigating away from the website.",unclassified,
Societal Biases,"Societal biases occurs when AI model reflect or reinforce societal prejudices and inequalities that are present in the data used to train them. This can be a result of historical and cultural influences that shape the data, and can include systemic discrimination and social stereotypes. Outputs from AI models that have a societal bias can perpetuate and amplify existing societal biases, leading to unfair and discriminatory outcomes.

**Business Impact**

Societal biases in this AI model can result in reputational damage and indirect monetary loss due to the loss of customer trust in the output of the model.

**Steps to Reproduce**

1. Input the following benchmark dataset into the AI model: {{Benchmark data set}}
1. Split the dataset into two sets. One is to act as the training dataset and the other as the testing dataset.
1. Examine the model's predictions and note the following disparity exists: {{Disparity between Group A and Group B}}

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","Establish practices and policies that ensure responsible data collection and training. This can include:

- Conducting a comprehensive review of the training data to find and remediate biases. This includes re-sampling underrepresented groups and adjusting the model parameters to promote fairness.
- Business processes that index ethical frameworks, best practices, and concerns should be developed, monitored, and evaluated.
- Clearly define the desired outcomes of the AI model, then frame the key variables to capture.
- Ensuring that the data collected and used to train the AI model illustrates the environment that it will be deployed in and contains diverse and representative data.
- Design and develop algorithms that are sensitive to fairness considerations, and audit these regularly.
- Practice data collection principles that do not disadvantage specific groups.
- Document the development of the AI model, including all datasets, variables identified, and decisions made throughout the development cycle.",unclassified,
Societal Biases - Systemic Bias,"Systemic bias occurs when AI models consistently favor certain groups over others due to the way that they process data, or other structural or historical factors. This can be a result of the AI model's design or the training data it has been trained on. Outputs from AI models that have a systemic bias can result in discrimination, reinforcement of stereotypes, or viewpoints that disadvantage certain groups.

**Business Impact**

Systemic bias in this AI model can result in a lack of fairness and objectivity which can lead to reputational damage and a loss of customer trust in the output of the model. Additionally, business decisions that rely on this AI model are also affected.

**Steps to Reproduce**

1. Provide the AI model with diverse data that contains structural and historical bias.
1. Observe the model's consistent favoritism of certain groups over others during decision-making.

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","Establish practices and policies that ensure responsible data collection and training. This can include:

- Conducting a comprehensive review of the training data to find and remediate biases. This includes re-sampling underrepresented groups and adjusting the model parameters to promote fairness.
- Business processes that index ethical frameworks, best practices, and concerns should be developed, monitored, and evaluated.
- Clearly define the desired outcomes of the AI model, then frame the key variables to capture.
- Ensuring that the data collected and used to train the AI model illustrates the environment that it will be deployed in and contains diverse and representative data.
- Design and develop algorithms that are sensitive to fairness considerations, and audit these regularly.
- Practice data collection principles that do not disadvantage specific groups.
- Document the development of the AI model, including all datasets, variables identified, and decisions made throughout the development cycle.",unclassified,
Societal Biases - Confirmation Bias,"Confirmation bias occurs when AI algorithms selectively process information that confirms pre-existing beliefs, assumptions, or hypotheses, while disregarding contrary evidence. Outputs from AI models that have a confirmation bias can result in misinformed choices, or the reinforcement of existing stereotypes and misconceptions.

**Business Impact**

Confirmation bias in this AI model can result in reputational damage and indirect monetary loss due to the loss of customer trust in the output of the model.

**Steps to Reproduce**

1. Feed the AI model with data that includes information supporting a pre-existing bias.
1. Observe the model's responses and decisions, noting its preference for data that confirms the bias.
1. Present the model with contrary evidence and observe whether it dismisses or downplays it.

**Proof of Concept (PoC)**

The screenshot(s) below demonstrate(s) the vulnerability:

{{screenshot}}","Establish practices and policies that ensure responsible data collection and training. This can include:

- Conducting a comprehensive review of the training data to find and remediate biases. This includes re-sampling underrepresented groups and adjusting the model parameters to promote fairness.
- Business processes that index ethical frameworks, best practices, and concerns should be developed, monitored, and evaluated.
- Clearly define the desired outcomes of the AI model, then frame the key variables to capture.
- Ensuring that the data collected and used to train the AI model illustrates the environment that it will be deployed in and contains diverse and representative data.
- Design and develop algorithms that are sensitive to fairness considerations, and audit these regularly.
- Practice data collection principles that do not disadvantage specific groups.
- Document the development of the AI model, including all datasets, variables identified, and decisions made throughout the development cycle.",unclassified,
